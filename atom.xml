<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>xgfe</title>
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://xgfe.github.io/"/>
  <updated>2017-10-25T09:38:08.000Z</updated>
  <id>http://xgfe.github.io/</id>
  
  <author>
    <name>xgfe</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>用CSS实现各种图片滤镜效果演示</title>
    <link href="http://xgfe.github.io/2017/10/18/liuhongyu/filter/"/>
    <id>http://xgfe.github.io/2017/10/18/liuhongyu/filter/</id>
    <published>2017-10-18T13:46:00.000Z</published>
    <updated>2017-10-25T09:38:08.000Z</updated>
    
    <content type="html"><![CDATA[<p>本演示关键使用了几个新型的CSS属性(background-blend-mode, mix-blend-mode, 和 filter)，利用这些属性，我们可以让同一张图片呈现出各种不可思议的神奇效果。</p>
<a id="more"></a>
<h3 id="技术原理"><a href="#技术原理" class="headerlink" title="技术原理"></a>技术原理</h3><ul>
<li>以下大多数的效果图中，背景图片源 background-image url 通常会反复使用数次，同时利用CSS混合模式 (multiply, overlay, screen, difference 等)进行处理。</li>
<li>在某些效果中，使用了 CSS filter 属性进一步处理图片，比如 grayscale(), brightness(), 和 contrast() 等可以让图片呈现出更好的效果。</li>
<li>使用 CSS @supports 来检测某种 CSS 属性是否在浏览器中受支持，不支持展示原图。</li>
</ul>
<h3 id="属性介绍"><a href="#属性介绍" class="headerlink" title="属性介绍"></a>属性介绍</h3><h4 id="mix-blend-mode属性"><a href="#mix-blend-mode属性" class="headerlink" title="mix-blend-mode属性"></a>mix-blend-mode属性</h4><pre><code>mix-blend-mode: normal; //正常
mix-blend-mode: multiply; //正片叠底
mix-blend-mode: screen;  //滤色
mix-blend-mode: overlay; //叠加
mix-blend-mode: darken; //变暗
mix-blend-mode: lighten; //变亮
mix-blend-mode: color-dodge; //颜色变淡
mix-blend-mode: color-burn; //颜色加深
mix-blend-mode: hard-light; //强光
mix-blend-mode: soft-light; //柔光
mix-blend-mode: difference; //插值
mix-blend-mode: exclusion; //排除
mix-blend-mode: hue; //色调
mix-blend-mode: saturation; //饱和度
mix-blend-mode: color; //颜色
mix-blend-mode: luminosity; //亮度
</code></pre><p><a href="https://developer.mozilla.org/en-US/docs/Web/CSS/mix-blend-mode" target="_blank" rel="external">具体可参考</a></p>
<h4 id="background-blend-mode属性"><a href="#background-blend-mode属性" class="headerlink" title="background-blend-mode属性"></a>background-blend-mode属性</h4><p>*属性值和mix-blend-mode一样<a href="https://developer.mozilla.org/en-US/docs/Web/CSS/background-blend-mode" target="_blank" rel="external">具体可参考</a></p>
<h4 id="filter属性"><a href="#filter属性" class="headerlink" title="filter属性"></a>filter属性</h4><pre><code>/* URL to SVG filter */
filter: url(&quot;filters.svg#filter-id&quot;);

/* &lt;filter-function&gt; values */
filter: blur(5px); //模糊
filter: brightness(0.4); //亮度
filter: contrast(200%); //对比度
filter: drop-shadow(16px 16px 20px blue); //阴影
filter: grayscale(50%); //灰度
filter: hue-rotate(90deg); //色相旋转
filter: invert(75%); //反色
filter: opacity(25%); //透明度
filter: saturate(30%); //饱和度
filter: sepia(60%); //褪色

/* Multiple filters */
filter: contrast(175%) brightness(3%);
</code></pre><p><a href="https://developer.mozilla.org/en-US/docs/Web/CSS/filter" target="_blank" rel="external">具体可参考</a></p>
<h3 id="效果示例"><a href="#效果示例" class="headerlink" title="效果示例"></a>效果示例</h3><h4 id="原图效果"><a href="#原图效果" class="headerlink" title="原图效果"></a>原图效果</h4><p><img src="http://p0.meituan.net/xgfe/5bdb72c861a17a9749cff76b099a356d212585.jpg" alt=""></p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.pencil-effect</span> &#123;</div><div class="line">  <span class="attribute">background-image</span>: <span class="built_in">url</span>(minions.jpg);</div><div class="line">  <span class="attribute">background-size</span>: cover;</div><div class="line">  <span class="attribute">background-position</span>: center;</div><div class="line">&#125;</div><div class="line"></div><div class="line">@<span class="keyword">supports</span> (filter: invert(<span class="number">1</span>)) and (background-blend-mode: difference) &#123;</div><div class="line">  <span class="selector-class">.pencil-effect</span> &#123;</div><div class="line">    <span class="attribute">background-image</span>: <span class="built_in">url</span>(minions.jpg), <span class="built_in">url</span>(minions.jpg);</div><div class="line">    <span class="attribute">background-blend-mode</span>: difference;</div><div class="line">    <span class="attribute">background-position</span>: <span class="built_in">calc</span>(50% - 1px) <span class="built_in">calc</span>(50% - 1px), <span class="built_in">calc</span>(50% + 1px) <span class="built_in">calc</span>(50% + 1px);</div><div class="line">    <span class="attribute">filter</span>: <span class="built_in">brightness</span>(2) <span class="built_in">invert</span>(1) <span class="built_in">grayscale</span>(1);</div><div class="line">    <span class="attribute">box-shadow</span>: inset <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">1px</span> black;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="pencil效果"><a href="#pencil效果" class="headerlink" title="pencil效果"></a>pencil效果</h4><p><img src="http://p0.meituan.net/xgfe/4c64f176d177c77b4fb42d988015af19145095.jpg" alt=""></p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.watercolor-effect</span> &#123;</div><div class="line">  <span class="attribute">background-image</span>: <span class="built_in">url</span>(minions.jpg);</div><div class="line">  <span class="attribute">background-size</span>: cover;</div><div class="line">  <span class="attribute">background-position</span>: center;</div><div class="line">&#125;</div><div class="line"></div><div class="line">@<span class="keyword">supports</span> (filter: blur(<span class="number">2px</span>)) and (mix-blend-mode: multiply) &#123;</div><div class="line">  <span class="selector-class">.watercolor-effect</span> &#123;</div><div class="line">    <span class="attribute">position</span>: relative;</div><div class="line">    <span class="attribute">overflow</span>: hidden;</div><div class="line">  &#125;</div><div class="line">  <span class="selector-class">.watercolor-effect</span><span class="selector-pseudo">:before</span>, <span class="selector-class">.watercolor-effect</span><span class="selector-pseudo">:after</span> &#123;</div><div class="line">    <span class="attribute">display</span>: block;</div><div class="line">    <span class="attribute">content</span>: <span class="string">""</span>;</div><div class="line">    <span class="attribute">position</span>: absolute;</div><div class="line">    <span class="attribute">top</span>: <span class="number">0</span>;</div><div class="line">    <span class="attribute">left</span>: <span class="number">0</span>;</div><div class="line">    <span class="attribute">right</span>: <span class="number">0</span>;</div><div class="line">    <span class="attribute">bottom</span>: <span class="number">0</span>;</div><div class="line">    <span class="attribute">background-size</span>: cover;</div><div class="line">  &#125;</div><div class="line">  <span class="selector-class">.watercolor-effect</span><span class="selector-pseudo">:before</span> &#123;</div><div class="line">    <span class="attribute">background-image</span>: <span class="built_in">url</span>(minions.jpg), <span class="built_in">url</span>(minions.jpg);</div><div class="line">    <span class="attribute">background-blend-mode</span>: difference;</div><div class="line">    <span class="attribute">background-position</span>: <span class="built_in">calc</span>(50% - 1px) <span class="built_in">calc</span>(50% - 1px), <span class="built_in">calc</span>(50% + 1px) <span class="built_in">calc</span>(50% + 1px);</div><div class="line">    <span class="attribute">filter</span>: <span class="built_in">brightness</span>(2) <span class="built_in">invert</span>(1) <span class="built_in">grayscale</span>(1);</div><div class="line">    <span class="attribute">box-shadow</span>: inset <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">1px</span> black;</div><div class="line">  &#125;</div><div class="line">  <span class="selector-class">.watercolor-effect</span><span class="selector-pseudo">:after</span> &#123;</div><div class="line">    <span class="attribute">background-image</span>: <span class="built_in">url</span>(minions.jpg);</div><div class="line">    <span class="attribute">background-position</span>: center;</div><div class="line">    <span class="attribute">mix-blend-mode</span>: multiply;</div><div class="line">    <span class="attribute">filter</span>: <span class="built_in">brightness</span>(1.3) <span class="built_in">blur</span>(2px) <span class="built_in">contrast</span>(2);</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="watercolor效果"><a href="#watercolor效果" class="headerlink" title="watercolor效果"></a>watercolor效果</h4><p><img src="http://p1.meituan.net/xgfe/27a8948fbda95756722abcc5b7c8aba5227184.jpg" alt=""></p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.colored-pencil-effect</span> &#123;</div><div class="line">  <span class="attribute">background-image</span>: <span class="built_in">url</span>(minions.jpg);</div><div class="line">  <span class="attribute">background-size</span>: cover;</div><div class="line">  <span class="attribute">background-position</span>: center;</div><div class="line">&#125;</div><div class="line"></div><div class="line">@<span class="keyword">supports</span> (filter: invert(<span class="number">1</span>)) and (mix-blend-mode: color) &#123;</div><div class="line">  <span class="selector-class">.colored-pencil-effect</span> &#123;</div><div class="line">    <span class="attribute">position</span>: relative;</div><div class="line">  &#125;</div><div class="line">  <span class="selector-class">.colored-pencil-effect</span><span class="selector-pseudo">:before</span>, <span class="selector-class">.colored-pencil-effect</span><span class="selector-pseudo">:after</span> &#123;</div><div class="line">    <span class="attribute">display</span>: block;</div><div class="line">    <span class="attribute">content</span>: <span class="string">""</span>;</div><div class="line">    <span class="attribute">position</span>: absolute;</div><div class="line">    <span class="attribute">top</span>: <span class="number">0</span>;</div><div class="line">    <span class="attribute">left</span>: <span class="number">0</span>;</div><div class="line">    <span class="attribute">right</span>: <span class="number">0</span>;</div><div class="line">    <span class="attribute">bottom</span>: <span class="number">0</span>;</div><div class="line">    <span class="attribute">background-size</span>: cover;</div><div class="line">    <span class="attribute">box-shadow</span>: inset <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">1px</span> black;</div><div class="line">  &#125;</div><div class="line">  <span class="selector-class">.colored-pencil-effect</span><span class="selector-pseudo">:before</span> &#123;</div><div class="line">    <span class="attribute">background-image</span>: <span class="built_in">url</span>(minions.jpg), <span class="built_in">url</span>(minions.jpg);</div><div class="line">    <span class="attribute">background-blend-mode</span>: difference;</div><div class="line">    <span class="attribute">background-position</span>: <span class="built_in">calc</span>(50% - 1px) <span class="built_in">calc</span>(50% - 1px), <span class="built_in">calc</span>(50% + 1px) <span class="built_in">calc</span>(50% + 1px);</div><div class="line">    <span class="attribute">filter</span>: <span class="built_in">brightness</span>(2) <span class="built_in">invert</span>(1) <span class="built_in">grayscale</span>(1);</div><div class="line">  &#125;</div><div class="line">  <span class="selector-class">.colored-pencil-effect</span><span class="selector-pseudo">:after</span> &#123;</div><div class="line">    <span class="attribute">background</span>: inherit;</div><div class="line">    <span class="attribute">mix-blend-mode</span>: color;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="colored-pencil效果"><a href="#colored-pencil效果" class="headerlink" title="colored-pencil效果"></a>colored-pencil效果</h4><p><img src="http://p0.meituan.net/xgfe/50e1cef7923d032a304a90c078bdbbba86681.jpg" alt=""></p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.warhol-effect</span> &#123;</div><div class="line">  <span class="attribute">background-image</span>: <span class="built_in">url</span>(minions.jpg);</div><div class="line">  <span class="attribute">background-size</span>: cover;</div><div class="line">  <span class="attribute">background-position</span>: center;</div><div class="line">&#125;</div><div class="line"></div><div class="line">@<span class="keyword">supports</span> (background-blend-mode: color) &#123;</div><div class="line">  <span class="selector-class">.warhol-effect</span> &#123;</div><div class="line">    <span class="attribute">background-image</span>: <span class="built_in">linear-gradient</span>(#14EBFF 0, #14EBFF 50%, #FFFF70 50%, #FFFF70 100%), <span class="built_in">linear-gradient</span>(#FF85DA 0, #FF85DA 50%, #AAA 50%, #AAA 100%), <span class="built_in">url</span>(minions.jpg);</div><div class="line">    <span class="attribute">background-size</span>: <span class="number">50%</span> <span class="number">100%</span>, <span class="number">50%</span> <span class="number">100%</span>, <span class="number">50%</span> <span class="number">50%</span>;</div><div class="line">    <span class="attribute">background-position</span>: top left, top right;</div><div class="line">    <span class="attribute">background-repeat</span>: no-repeat, no-repeat, repeat;</div><div class="line">    <span class="attribute">background-blend-mode</span>: color;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="warhol效果"><a href="#warhol效果" class="headerlink" title="warhol效果"></a>warhol效果</h4><p><img src="http://p1.meituan.net/xgfe/c3f854448e4e29a81747f6f2cc27426a90904.jpg" alt=""></p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.infrared-effect</span> &#123;</div><div class="line">  <span class="attribute">background-image</span>: <span class="built_in">url</span>(minions.jpg);</div><div class="line">  <span class="attribute">background-size</span>: cover;</div><div class="line">  <span class="attribute">background-position</span>: center;</div><div class="line">  <span class="attribute">filter</span>: <span class="built_in">hue-rotate</span>(180deg) <span class="built_in">saturate</span>(2);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="infrared效果"><a href="#infrared效果" class="headerlink" title="infrared效果"></a>infrared效果</h4><p><img src="http://p1.meituan.net/xgfe/c0b7f1e52f4e11a4a55bad3ba1157f6f69507.jpg" alt=""></p>
<h3 id="浏览器兼容性"><a href="#浏览器兼容性" class="headerlink" title="浏览器兼容性"></a>浏览器兼容性</h3><ul>
<li>background-blend-mode不支持IE具体详情见下图（mix-blend-mode类似） </li>
</ul>
<p><img src="http://p1.meituan.net/xgfe/02a2dec38a572e4175a74533c2589854308285.jpg" alt=""></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本演示关键使用了几个新型的CSS属性(background-blend-mode, mix-blend-mode, 和 filter)，利用这些属性，我们可以让同一张图片呈现出各种不可思议的神奇效果。&lt;/p&gt;
    
    </summary>
    
      <category term="liuhongyu" scheme="http://xgfe.github.io/categories/liuhongyu/"/>
    
    
      <category term="CSS3" scheme="http://xgfe.github.io/tags/CSS3/"/>
    
  </entry>
  
  <entry>
    <title>基于IntersectionObserver的曝光统计测试</title>
    <link href="http://xgfe.github.io/2017/10/18/lulutia/IntersectionObserver/"/>
    <id>http://xgfe.github.io/2017/10/18/lulutia/IntersectionObserver/</id>
    <published>2017-10-18T09:23:00.000Z</published>
    <updated>2017-10-23T08:34:10.000Z</updated>
    
    <content type="html"><![CDATA[<p>本文主要介绍了IntersectionObserver API，并且就如何将其用于数据埋点给出了尝试。</p>
<a id="more"></a>
<h4 id="背景介绍"><a href="#背景介绍" class="headerlink" title="背景介绍"></a>背景介绍</h4><p>  作为一款产品，往往希望能得到用户的反馈，从而通过对用户行为的分析进行功能、交互等方方面面的改进。然而直接的一对一的用户交流是低效且困难的，因此最普遍的做法便是通过数据埋点来反推用户的行为。那么数据埋点中很重要的一环便是：曝光。<br>  所谓曝光，便是页面被展示的时候进行打点。举个简单的例子：用户进入分类页面，商品以行为单位从上而下进行排列。当用户滚动页面时，之前不在视窗范围内的商品就会出现，此时，这部分商品就算曝光了。需要进行一次记录。<br>  那么为了实现上面功能，最普遍的做法有两个。其一：跟踪滚动事件，然后计算某个商品与视窗的相对位置，从而判断是否可见。其二：维持一个timer，然后以固定的时间为间隔计算某个商品与视窗的相对位置。<br>  上面两种做法在某种程度上能够实现我们的目的，但是会有一些问题，比如最明显的：慢。因为计算相对位置时会调用getBoundingClientRect()，这个操作会导致浏览器进行全页面的重新布局，不用我说，大家都知道这个性能开销是很大的，特别是在频繁进行时。除此之外，如果页面是作为一个iframe包裹的也会产生问题，因为同源策略和浏览器不会允许你获取包裹iframe的页面的数据。然而在现有情况下，很多广告都是通过iframe的形式镶嵌在网页内的。<br>  基于以上的情况，我们急需一种性能良好且iframe友好的方式来实现曝光的功能，因此IntersectionObserver API进入了我们的视野。</p>
<h4 id="IntersectionObserver-API介绍"><a href="#IntersectionObserver-API介绍" class="headerlink" title="IntersectionObserver API介绍"></a>IntersectionObserver API介绍</h4><p>关于IntersectionObserver API的官方文档<a href="https://w3c.github.io/IntersectionObserver/" target="_blank" rel="external">见此</a>。截止本文为止，其兼容性如下图所示:<br><img src="http://okzzg7ifm.bkt.clouddn.com/IntersectionObserver.png" alt="API 兼容性">简单的说IntersectionObserver让你知道什么时候observe的元素进入或者存在在root区域里了。下面我们来看下这个API的具体内容:</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 用构造函数生成观察者实例，回调函数是必须的，后面的配置对象是可选的</span></div><div class="line"><span class="keyword">var</span> observer = <span class="keyword">new</span> IntersectionObserver(<span class="function"><span class="params">changes</span> =&gt;</span> &#123;</div><div class="line">  <span class="keyword">for</span> (<span class="keyword">const</span> change <span class="keyword">of</span> changes) &#123;</div><div class="line">    <span class="built_in">console</span>.log(change.time);               <span class="comment">// 相交发生时经过的时间</span></div><div class="line">    <span class="built_in">console</span>.log(change.rootBounds);         <span class="comment">// 表示发生相交时根元素可见区域的矩形信息，是一个对象值</span></div><div class="line">    <span class="built_in">console</span>.log(change.boundingClientRect); <span class="comment">// target.boundingClientRect()发生相交时目标元素的矩形信息，也是个对象值</span></div><div class="line">    <span class="built_in">console</span>.log(change.intersectionRect);   <span class="comment">// 根元素与目标元素相交时的矩形信息</span></div><div class="line">    <span class="built_in">console</span>.log(change.intersectionRatio);  <span class="comment">// 表示相交区域占目标区域的百分比，是一个0到1的值</span></div><div class="line">    <span class="built_in">console</span>.log(change.target);             <span class="comment">// 相交发生时的目标元素</span></div><div class="line">  &#125;</div><div class="line">&#125;, &#123;</div><div class="line">	<span class="attr">root</span>: <span class="literal">null</span>,</div><div class="line">  	<span class="attr">threshold</span>: [<span class="number">0</span>, <span class="number">0.5</span>, <span class="number">1</span>],</div><div class="line">  	<span class="attr">rootMargin</span>: <span class="string">"50px"</span></div><div class="line">&#125;);</div><div class="line"></div><div class="line"><span class="comment">// 实例属性</span></div><div class="line">observer.root</div><div class="line"></div><div class="line">observer.rootMargin</div><div class="line"></div><div class="line">observer.thresholds</div><div class="line"></div><div class="line"><span class="comment">// 实例方法</span></div><div class="line">observer.observe(target); <span class="comment">// 观察针对某个特定元素的相交事件</span></div><div class="line"></div><div class="line">observer.unobserve(target); <span class="comment">// 停止对某个特定元素的相交事件的观察</span></div><div class="line"></div><div class="line">observer.disconnect(); <span class="comment">// 停止对所有目标元素的阈值事件的观察，简单的说就是停用整个IntersectionObserver</span></div><div class="line"></div><div class="line"><span class="comment">// 除了上面三个实例方法，还有一个takeRecords()的方法，之后会详细介绍</span></div></pre></td></tr></table></figure>
<p>IntersectionObserver API允许开发人员了解目标dom元素相对于intersection root的可见性。这个root可以通过实例属性获取。默认情况下它为null，此时它不是真正意义上的元素，它指视窗范围，因此只要视窗范围内的目标元素(当然是后代元素)滚入视窗时，就会触发回调函数[如果root元素不存在了，则执行其任何的observe都会出错]。下面举个栗子:</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line">&lt;!DOCTYPE html&gt;</div><div class="line"><span class="xml"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span></div><div class="line">	<span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span> /&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">title</span>&gt;</span>intersectionObserve<span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">"text/css"</span>&gt;</span><span class="undefined"></span></div><div class="line">			#target &#123;</div><div class="line">			   position: relative;</div><div class="line">			   top: calc(100vh + 500px);</div><div class="line">			   width: 100px;</div><div class="line">			   height: 100px;</div><div class="line">			   background: red;</div><div class="line">			&#125;</div><div class="line">		<span class="tag">&lt;/<span class="name">style</span>&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"target"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="javascript"></span></div><div class="line">			<span class="keyword">let</span> ele = <span class="keyword">new</span> IntersectionObserver(</div><div class="line">				<span class="function">(<span class="params">entries</span>) =&gt;</span> &#123;</div><div class="line">			  		<span class="built_in">console</span>.log(entries);</div><div class="line">			  &#125;</div><div class="line">			);</div><div class="line"></div><div class="line">			ele.observe(target);</div><div class="line">		<span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure>
<p>上面的栗子中，当红色的块滚入滚出视窗，都会触发回调函数，回调函数在调用时会传入一个由IntersectionObserverEntry 对象组成的数组。每个IntersectionObserverEntry 对象包含对应的observed元素的更新信息，大概数据结构如下，其具体意思在第一段代码里有详细说明:<br><img src="http://okzzg7ifm.bkt.clouddn.com/intersectionObject.png" alt=""><br>我们可以在配置对象中将root改为具体的元素，此时当目标元素出现在root元素中时会触发回调，注意，在这种情况下相交可能发生在视窗下面。具体代码在下，感兴趣的孩子可以试一下:</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div></pre></td><td class="code"><pre><div class="line">&lt;!DOCTYPE html&gt;</div><div class="line"><span class="xml"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span></div><div class="line">	<span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span> /&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">title</span>&gt;</span>intersectionObserve<span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">"text/css"</span>&gt;</span><span class="undefined"></span></div><div class="line">			#root &#123;</div><div class="line">				position: relative;</div><div class="line">				width: 400px;</div><div class="line">				height: calc(100vh + 200px);</div><div class="line">				background: lightblue;</div><div class="line">				overflow: scroll;</div><div class="line">			&#125;</div><div class="line">			#target &#123;</div><div class="line">			   position: absolute;</div><div class="line">			   top: calc(100vh + 800px);</div><div class="line">			   width: 100px;</div><div class="line">			   height: 100px;</div><div class="line">			   background: red;</div><div class="line">			&#125;</div><div class="line"></div><div class="line">		<span class="tag">&lt;/<span class="name">style</span>&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"root"</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"target"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">		<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="javascript"></span></div><div class="line">			<span class="keyword">let</span> ele = <span class="keyword">new</span> IntersectionObserver(</div><div class="line">				<span class="function">(<span class="params">entries</span>) =&gt;</span> &#123;</div><div class="line">			  		<span class="built_in">console</span>.log(entries);</div><div class="line">			  &#125;, &#123;</div><div class="line">			  	<span class="attr">root</span>: root</div><div class="line">			  &#125;</div><div class="line">			);</div><div class="line"></div><div class="line">			ele.observe(target);</div><div class="line">		<span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure>
<p>在上面一条中，回调函数打印出来的对象中有一个intersectionRatio值，这个值其实涉及到了整个API的核心功能：当目标元素和根元素相交的面积占目标元素面积的百分比到达或跨过某些指定的临界值时就会触发回调函数。因此相对的在配置对象里有一个threshold来对这个百分比进行配置，默认情况下这个值是[0]，注意里面的值不能在0-1之外，否则会报错。我们举个栗子如下:</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">......</div><div class="line">let ele = <span class="keyword">new</span> IntersectionObserver(</div><div class="line">	<span class="function">(<span class="params">entries</span>) =&gt;</span> &#123;</div><div class="line">  		<span class="built_in">console</span>.log(entries);</div><div class="line">  &#125;, &#123;</div><div class="line">  	<span class="attr">threshold</span>: [<span class="number">0</span>, <span class="number">0.5</span>, <span class="number">1.0</span>]</div><div class="line">  &#125;</div><div class="line">);</div><div class="line"></div><div class="line">ele.observe(target);</div></pre></td></tr></table></figure>
<p>在上面这个栗子中，我们设定了0，0.5，1.0这三个值，因此当交叉区域跨越0，0.5，1.0时都会触发回调函数。注意我这边的用词是跨越，而不是到达。因为会存在以下两种情况导致回调打印出来的intersectionRatio不为0，0.5和1.0.<br>其一： 浏览器对相交的检测是有时间间隔的。浏览器的渲染工作都是以帧为单位的，而IntersectionObserver是发生在帧里面的。因此假如你设定了[0,0.1,0.2,0.3,0.4,0.5]这个threshold，但是你的滚动过程特别快，导致所有的绘制在一帧里面结束了，此时回调只会挑最近的临界值触发一次。<br>其二： IntersectionObserver是异步的。在浏览器内部，当一个观察者实例观察到众多的相交行为时，它不会立即执行。关于IntersectionObserver的草案里面写明了其实现是基于requestIdleCallback()来异步的执行我们的回调函数的，并且规定了最大的延迟时间是100ms。关于这部分涉及到前面第一段代码里的一个实例方法takeRecords()。如果你很迫切的希望马上知道是否有相交，你不希望等待可能的100ms，此时你就能调用takeRecords()，此后你能马上获得包含IntersectionObserverEntry 对象的数组，里面有相交信息，如果没有任何相交行为发生，则返回一个空数组。但这个方法与正常的异步回调是互斥的，如果它先执行了则正常回调里面就没信息了，反之亦然。<br>除开上面的问题，如果目标元素的面积为0会产生什么情况呢？因为与0计算相交率是没有意义的，实际我们举个栗子：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line">&lt;!DOCTYPE html&gt;</div><div class="line"><span class="xml"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span></div><div class="line">	<span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span> /&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">title</span>&gt;</span>intersectionObserve<span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">"text/css"</span>&gt;</span><span class="undefined"></span></div><div class="line">			#target &#123;</div><div class="line">			   position: relative;</div><div class="line">			   top: calc(100vh + 500px);</div><div class="line">			   width: 100px;</div><div class="line">			   height: 100px;</div><div class="line">			   background: red;</div><div class="line">			&#125;</div><div class="line">		<span class="tag">&lt;/<span class="name">style</span>&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"target"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"img"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="javascript"></span></div><div class="line">			<span class="keyword">let</span> ele = <span class="keyword">new</span> IntersectionObserver(</div><div class="line">				<span class="function">(<span class="params">entries</span>) =&gt;</span> &#123;</div><div class="line">			  		<span class="built_in">console</span>.log(entries);</div><div class="line">			  &#125;, &#123;</div><div class="line">			  	<span class="attr">threshold</span>: [<span class="number">0</span>, <span class="number">0.5</span>, <span class="number">1.0</span>]</div><div class="line">			  &#125;</div><div class="line">			);</div><div class="line"></div><div class="line">			ele.observe(img);</div><div class="line">		<span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure>
<p>我们会看到，虽然我们设定了0.5这个阈值，但实际回调只会在0与1.0时触发。这是一种特殊的处理方式。</p>
<p>上面我们讨论了整个API的核心功能，实际其内部遵循的逻辑如下: 每个观察者实例为所有的目标元素都维护着上次的相交率(previousThreshold)，在新执行Observe的时候会将previousThreshold置为0，之后每次检测到满足threshold的相交率，并且与previousThreshold不同，那么就会触发回调并将previousThreshold重置为这个新值。那么这里可能会有下面几个问题：<br>其一：既然初始值是0，如果阈值设置为0，且刚刚满足滚动到0的位置，回调还会触发吗？实际是会的，这是一种特例，与目标元素在根元素内部(此时相交率为1)滚动到刚刚要超出的位置依然会触发回调函数一样。但是这种情况可能导致一个问题，我们无法直接用intersectionRatio&gt;0来判断目标是否滚入了根元素，因为在慢速滚动下，当目标元素的上边与根元素的下边相交时，此时intersectionRatio=0并且触发了回调，之后当intersectionRatio&gt;0时并不会触发回调了(这里排除还有其他自定义阈值的情况)。这种情况下，可以自定义一个变量值来存展示状态，或者也可以定义一个无限接近0的threshold.<br>其二：如果一个元素初始化就在根元素内部了，然后再执行observe，依然会触发回调吗？会的，因为初始值默认为0，在下一次检测时更新为了实际的相交值。</p>
<p>这里需要强调一点的是，我们的目标元素在Observe的时候可以不存在的[注意这里的不存在是指没有插入dom结构，但是元素本身是需要存在的]，只需要在相交发生时存在就行了，我们来举个栗子：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line">&lt;!DOCTYPE html&gt;</div><div class="line"><span class="xml"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span></div><div class="line">	<span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span> /&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">title</span>&gt;</span>intersectionObserve<span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">"text/css"</span>&gt;</span><span class="undefined"></span></div><div class="line">			#target &#123;</div><div class="line">			   position: relative;</div><div class="line">			   top: calc(100vh + 500px);</div><div class="line">			   width: 100px;</div><div class="line">			   height: 100px;</div><div class="line">			   background: red;</div><div class="line">			&#125;</div><div class="line">		<span class="tag">&lt;/<span class="name">style</span>&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"target"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="javascript"></span></div><div class="line">			<span class="keyword">let</span> ele = <span class="keyword">new</span> IntersectionObserver(</div><div class="line">				<span class="function">(<span class="params">entries</span>) =&gt;</span> &#123;</div><div class="line">			  		<span class="built_in">console</span>.log(entries);</div><div class="line">			  &#125;, &#123;</div><div class="line">			  	<span class="attr">threshold</span>: [<span class="number">0</span>, <span class="number">0.5</span>, <span class="number">1.0</span>]</div><div class="line">			  &#125;</div><div class="line">			);</div><div class="line"></div><div class="line">			<span class="keyword">let</span> img = <span class="built_in">document</span>.createElement(<span class="string">'div'</span>);</div><div class="line">			ele.observe(img);</div><div class="line">			setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</div><div class="line">				<span class="built_in">document</span>.body.appendChild(img);</div><div class="line">			&#125;, <span class="number">5000</span>);</div><div class="line">		<span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure>
<p>同理，如果目标元素与根元素处于相交状态，但是在一段时间后目标元素不存在了(比如remove，或者display:none)了，那么此时依然会触发一次回调。但是如果本身就不处于相交状态，然后消失掉了，因为0-&gt;0没有变化，所以不会触发回调，具体如下面的栗子所示：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line">&lt;!DOCTYPE html&gt;</div><div class="line"><span class="xml"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span></div><div class="line">	<span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span> /&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">title</span>&gt;</span>intersectionObserve<span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">"text/css"</span>&gt;</span><span class="undefined"></span></div><div class="line">			#target &#123;</div><div class="line">			   position: relative;</div><div class="line">			   top: calc(100vh + 500px);</div><div class="line">			   width: 100px;</div><div class="line">			   height: 100px;</div><div class="line">			   background: red;</div><div class="line">			&#125;</div><div class="line">		<span class="tag">&lt;/<span class="name">style</span>&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"target"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="javascript"></span></div><div class="line">			<span class="keyword">let</span> ele = <span class="keyword">new</span> IntersectionObserver(</div><div class="line">				<span class="function">(<span class="params">entries</span>) =&gt;</span> &#123;</div><div class="line">			  		<span class="built_in">console</span>.log(entries);</div><div class="line">			  &#125;</div><div class="line">			);</div><div class="line"></div><div class="line">			ele.observe(target);</div><div class="line">			setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</div><div class="line">				<span class="built_in">document</span>.body.removeChild(target);</div><div class="line">			&#125;, <span class="number">5000</span>);</div><div class="line">		<span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure>
<h4 id="IntersectionObserver-API与iframe"><a href="#IntersectionObserver-API与iframe" class="headerlink" title="IntersectionObserver API与iframe"></a>IntersectionObserver API与iframe</h4><p>互联网上的很多小广告都是通过iframe嵌入的，而上面我们也说了现有的情况下很难获取iframe在顶层视窗内的曝光，但是使用IntersectionObserver API我们却可以做到这点。下面举个栗子：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div></pre></td><td class="code"><pre><div class="line">&lt;!DOCTYPE html&gt;</div><div class="line"><span class="xml"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span></div><div class="line">	<span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span> /&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">title</span>&gt;</span>intersectionObserve<span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">"text/css"</span>&gt;</span><span class="undefined"></span></div><div class="line">			#root &#123;</div><div class="line">			   position: relative;</div><div class="line">			   top: calc(100vh + 800px);</div><div class="line">			   width: 100px;</div><div class="line">			   height: 100px;</div><div class="line">			&#125;</div><div class="line">			#iframe &#123;</div><div class="line">				width: 600px;</div><div class="line">				height: 600px;</div><div class="line">				margin-bottom: 300px;</div><div class="line">			&#125;</div><div class="line">		<span class="tag">&lt;/<span class="name">style</span>&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"root"</span>&gt;</span></div><div class="line">  			<span class="tag">&lt;<span class="name">iframe</span> <span class="attr">id</span>=<span class="string">"iframe"</span>&gt;</span><span class="tag">&lt;/<span class="name">iframe</span>&gt;</span></div><div class="line">		<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="xml"></span></div><div class="line">		  let iframeTemplate = `</div><div class="line">		    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"target"</span>&gt;</span><span class="tag">&lt;<span class="name">p</span>&gt;</span>i am iframe<span class="tag">&lt;/<span class="name">p</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">		    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="undefined"></span></div><div class="line">		      #target &#123;</div><div class="line">		        width: 500px;</div><div class="line">		        height: 500px;</div><div class="line">		        background: red;</div><div class="line">		      &#125;</div><div class="line">		      #target p &#123;</div><div class="line">		      	font-size: 90px;</div><div class="line">		      &#125;</div><div class="line">		    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></div><div class="line">		    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></div><div class="line">		      <span class="keyword">let</span> observer = <span class="keyword">new</span> IntersectionObserver(<span class="function">(<span class="params">entries</span>) =&gt;</span> &#123;</div><div class="line">		        <span class="built_in">console</span>.log(entries)</div><div class="line">		      &#125;, &#123;</div><div class="line">		      	<span class="attr">threshold</span>: [<span class="number">0</span>,<span class="number">0.5</span>,<span class="number">1.0</span>]</div><div class="line">		      &#125;)</div><div class="line">		      observer.observe(target)</div><div class="line">		    &lt;\/script&gt;<span class="string">`</span></div><div class="line"></div><div class="line">		  iframe.src = URL.createObjectURL(new Blob([iframeTemplate], &#123;"type": "text/html"&#125;))</div><div class="line">		<span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure>
<p>从上面的栗子可以看出，使用此API不仅能够使iframe在视窗内出现时触发回调，而且threshold值同样能够起作用。这样一来，大大简化了此类情况下获取曝光的难度。</p>
<h4 id="延迟加载与无限滚动"><a href="#延迟加载与无限滚动" class="headerlink" title="延迟加载与无限滚动"></a>延迟加载与无限滚动</h4><p>上面我们关于配置参数已经提到了root和threshold，实际上还有一个值：rootMargin。这个值实际就是给根元素添加了一个假想的margin值。其使用场景最普遍的是用于延迟加载。因为如果真的等目标元素与根元素相交的时候再进行加载图片等功能就已经晚了，所以有一个rootMargin值，这样等于根元素延伸开去了，目标元素只要与延伸部分相交就会触发回调，下面我们来继续举个栗子:</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div></pre></td><td class="code"><pre><div class="line">&lt;!DOCTYPE html&gt;</div><div class="line"><span class="xml"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span></div><div class="line">	<span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span> /&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">title</span>&gt;</span>intersectionObserve<span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">"text/css"</span>&gt;</span><span class="undefined"></span></div><div class="line">			#root &#123;</div><div class="line">				width: 500px;</div><div class="line">				height: 800px;</div><div class="line">				overflow: scroll;</div><div class="line">				background-color: pink;</div><div class="line">			&#125;</div><div class="line">			#target &#123;</div><div class="line">			   position: relative;</div><div class="line">			   top: calc(100vh + 500px);</div><div class="line">			   width: 100px;</div><div class="line">			   height: 100px;</div><div class="line">			   background: red;</div><div class="line">			&#125;</div><div class="line">		<span class="tag">&lt;/<span class="name">style</span>&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"root"</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"target"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">		<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="javascript"></span></div><div class="line">			<span class="keyword">let</span> ele = <span class="keyword">new</span> IntersectionObserver(</div><div class="line">				<span class="function">(<span class="params">entries</span>) =&gt;</span> &#123;</div><div class="line">			  		<span class="built_in">console</span>.log(entries);</div><div class="line">			  &#125;, &#123;</div><div class="line">			  	<span class="attr">rootMargin</span>: <span class="string">'100px'</span>,</div><div class="line">			  	<span class="attr">root</span>: root</div><div class="line">			  &#125;</div><div class="line">			);</div><div class="line"></div><div class="line">			ele.observe(target);</div><div class="line">		<span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure>
<p>很明显，在上面的栗子中，目标元素并没有出现在根元素的视窗里的时候就已经触发回调了。</p>
<p>整个API可以用来实现无限滚动和延迟加载，下面就分别举出两个简单的栗子来启发思路，更完善健壮的功能就交给看官自己去尝试了哦：<br>延迟加载的栗子：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div></pre></td><td class="code"><pre><div class="line">&lt;!DOCTYPE html&gt;</div><div class="line">&lt;html lang="en"&gt;</div><div class="line">	&lt;head&gt;</div><div class="line">		&lt;meta charset="utf-8" /&gt;</div><div class="line">		&lt;title&gt;intersectionObserve&lt;/title&gt;</div><div class="line">		&lt;style type="text/css"&gt;</div><div class="line">			.img &#123;</div><div class="line">				height: 1000px;</div><div class="line">				overflow-y: hidden;</div><div class="line">			&#125;</div><div class="line">		&lt;/style&gt;</div><div class="line">	&lt;/head&gt;</div><div class="line">	&lt;body&gt;</div><div class="line">		&lt;ul&gt;</div><div class="line">			&lt;li class="img"&gt;</div><div class="line">				&lt;img src="" class="img-item" data-src="http://okzzg7ifm.bkt.clouddn.com/cat.png"/&gt;</div><div class="line">			&lt;/li&gt;</div><div class="line">			&lt;li class="img"&gt;</div><div class="line">				&lt;img src="" class="img-item" data-src="http://okzzg7ifm.bkt.clouddn.com/01.png"/&gt;</div><div class="line">			&lt;/li&gt;</div><div class="line">			&lt;li class="img"&gt;</div><div class="line">				&lt;img src="" class="img-item" data-src="http://okzzg7ifm.bkt.clouddn.com/virtualdom.png"/&gt;</div><div class="line">			&lt;/li&gt;</div><div class="line">			&lt;li class="img"&gt;</div><div class="line">				&lt;img src="" class="img-item" data-src="http://okzzg7ifm.bkt.clouddn.com/reactlife.png"/&gt;</div><div class="line">			&lt;/li&gt;</div><div class="line">		&lt;/ul&gt;</div><div class="line">		&lt;script type="text/javascript"&gt;</div><div class="line">			let ele = new IntersectionObserver(</div><div class="line">				(entries) =&gt; &#123;</div><div class="line">			  		entries.forEach((entry) =&gt; &#123;</div><div class="line">			  			if (entry.intersectionRatio &gt; 0) &#123;</div><div class="line">			  				entry.target.src = entry.target.dataset.src;</div><div class="line">			  			&#125;</div><div class="line">			  		&#125;)</div><div class="line">			  &#125;, &#123;</div><div class="line">			  	rootMargin: '100px',</div><div class="line">			  	threshold: [0.000001]</div><div class="line">			  &#125;</div><div class="line">			);</div><div class="line">			let eleArray = Array.from(document.getElementsByClassName('img-item'));</div><div class="line">			eleArray.forEach((item) =&gt; &#123;</div><div class="line">				ele.observe(item);</div><div class="line">			&#125;)</div><div class="line">		&lt;/script&gt;</div><div class="line">	&lt;/body&gt;</div><div class="line">&lt;/html&gt;</div></pre></td></tr></table></figure>
<p>无限滚动的栗子:</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div></pre></td><td class="code"><pre><div class="line">&lt;!DOCTYPE html&gt;</div><div class="line">&lt;html lang="en"&gt;</div><div class="line">	&lt;head&gt;</div><div class="line">		&lt;meta charset="utf-8" /&gt;</div><div class="line">		&lt;title&gt;intersectionObserve&lt;/title&gt;</div><div class="line">		&lt;style type="text/css"&gt;</div><div class="line">			.img &#123;</div><div class="line">				height: 1200px;</div><div class="line">				overflow: hidden;</div><div class="line">			&#125;</div><div class="line">			#flag &#123;</div><div class="line">				height: 20px;</div><div class="line">				background-color: pink;</div><div class="line">			&#125;</div><div class="line">		&lt;/style&gt;</div><div class="line">	&lt;/head&gt;</div><div class="line">	&lt;body&gt;</div><div class="line">		&lt;ul id="imgContainer"&gt;</div><div class="line">			&lt;li class="img"&gt;</div><div class="line">				&lt;img src="http://okzzg7ifm.bkt.clouddn.com/cat.png"/&gt;</div><div class="line">			&lt;/li&gt;</div><div class="line">			&lt;li class="img"&gt;</div><div class="line">				&lt;img src="http://okzzg7ifm.bkt.clouddn.com/01.png"/&gt;</div><div class="line">			&lt;/li&gt;</div><div class="line">			&lt;li class="img"&gt;</div><div class="line">				&lt;img src="http://okzzg7ifm.bkt.clouddn.com/virtualdom.png"/&gt;</div><div class="line">			&lt;/li&gt;</div><div class="line">			&lt;li class="img"&gt;</div><div class="line">				&lt;img src="http://okzzg7ifm.bkt.clouddn.com/reactlife.png"/&gt;</div><div class="line">			&lt;/li&gt;</div><div class="line">		&lt;/ul&gt;</div><div class="line">		&lt;div id="flag"&gt;&lt;/div&gt;</div><div class="line">		&lt;script type="text/javascript"&gt;</div><div class="line">			let imgList = [</div><div class="line">				'http://okzzg7ifm.bkt.clouddn.com/immutable-coperation.png',</div><div class="line">				'http://okzzg7ifm.bkt.clouddn.com/flexdirection.png',</div><div class="line">				'http://okzzg7ifm.bkt.clouddn.com/immutable-exampleLayout.png'</div><div class="line">			]</div><div class="line">			let ele = new IntersectionObserver(</div><div class="line">				(entries) =&gt; &#123;</div><div class="line">					if (entries[0].intersectionRatio &gt; 0) &#123;</div><div class="line">						if (imgList.length) &#123;</div><div class="line">							let newImgli = document.createElement('li');</div><div class="line">							newImgli.setAttribute("class", "img");</div><div class="line">							let newImg = document.createElement('img');</div><div class="line">							newImg.setAttribute("src", imgList[0]);</div><div class="line">							newImgli.appendChild(newImg);</div><div class="line">							document.getElementById('imgContainer').appendChild(newImgli);</div><div class="line">							imgList.shift();</div><div class="line">						&#125;</div><div class="line">					&#125;</div><div class="line"></div><div class="line">			  &#125;, &#123;</div><div class="line">			  	rootMargin: '100px',</div><div class="line">			  	threshold: [0.000001]</div><div class="line">			  &#125;</div><div class="line">			);</div><div class="line">			ele.observe(flag);</div><div class="line">		&lt;/script&gt;</div><div class="line">	&lt;/body&gt;</div><div class="line">&lt;/html&gt;</div></pre></td></tr></table></figure>
<p>通篇看下来大家是不是感觉这个API还是很好玩的，然而因为其兼容性，所以使用区域还是受限的。基于此，规范制订者在github上发布了其<a href="https://github.com/w3c/IntersectionObserver" target="_blank" rel="external">Polyfill</a>，不过因为是Polyfill，所以在实现性能上肯定是比不上原生的。而且就其github来看，待解决的issue数量还是比较多的。</p>
<h4 id="具体集成到项目中【项目本身基于vue】"><a href="#具体集成到项目中【项目本身基于vue】" class="headerlink" title="具体集成到项目中【项目本身基于vue】"></a>具体集成到项目中【项目本身基于vue】</h4><p>实际项目里面可能需要使用到曝光的地方相当的多，这里我们就首页进行了尝试，主要有以下几个问题需要解决：</p>
<ul>
<li>实例的创建时间</li>
<li>observe()调用的时机</li>
<li>dom元素与埋点数据的关联</li>
</ul>
<p>针对实例的创建时间，因为首页上需要划分区域进行曝光报告，因此我选择在整个页面的初始化的时候就进行实例的创建。同时，因为希望整个埋点的处理逻辑一致，在实例的回调里面进行了统一处理。具体如下：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">......</div><div class="line">   this.ele = <span class="keyword">new</span> IntersectionObserver(<span class="function">(<span class="params">entries</span>) =&gt;</span> &#123;</div><div class="line">          entries.forEach(<span class="function">(<span class="params">item</span>) =&gt;</span> &#123;</div><div class="line">            <span class="keyword">if</span> (item.intersectionRatio &gt; <span class="number">0</span>) &#123;</div><div class="line">              <span class="keyword">let</span> node = item.target.querySelector(<span class="string">'.need-data'</span>);</div><div class="line">              <span class="built_in">console</span>.log(node.attributes[<span class="string">'code'</span>].value);</div><div class="line">            &#125;</div><div class="line">          &#125;)</div><div class="line">        &#125;, &#123;</div><div class="line">          <span class="attr">threshold</span>: [<span class="number">0.000001</span>]</div><div class="line">        &#125;);</div></pre></td></tr></table></figure>
<p>observe()调用的时机，因为页面采用组件化的方式，在最初进行实例化的时候，需要的dom结构都是没有的。之后通过与后端进行数据，采用数据驱动进行页面渲染。因此在数据获取后在下一次DOM循环更新之后才进行observe()的调用。此时所需的dom结构都有了。</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">this</span>.$nextTick(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</div><div class="line">            <span class="keyword">let</span> newArray = <span class="built_in">Array</span>.from(<span class="built_in">document</span>.getElementsByClassName(<span class="string">'need-data'</span>));</div><div class="line">            newArray.forEach(<span class="function">(<span class="params">newItem</span>) =&gt;</span> &#123;</div><div class="line">              <span class="keyword">this</span>.ele.observe(newItem);</div><div class="line">            &#125;)</div><div class="line">          &#125;)</div></pre></td></tr></table></figure>
<p>dom元素与埋点数据的关联，因为之前的逻辑中我们的dom与业务数据耦合度不大，因此获取单纯的dom后无法获取需要上报的数据。同时我们希望这一块对于大部分的曝光需求能够进行逻辑统一。因此我们采取了最简单的方法，将需要上报的数据直接放在dom的一个属性中。因为这部分dom是组件化生成的一部分，所以逻辑上也是一致的。</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"item-content clearfix"</span> :<span class="class"><span class="keyword">class</span></span>=<span class="string">"'item-wrapper-type'+type"</span> :code=<span class="string">"needData.code"</span>&gt;</div><div class="line">....</div><div class="line">&lt;<span class="regexp">/div&gt;</span></div></pre></td></tr></table></figure>
<p>基本进行这三个地方的改动后就能满足我们的大部分类型的需求了。其最后的结果如下:<br><img src="http://okzzg7ifm.bkt.clouddn.com/dataResult.png" alt="结果图"></p>
<h4 id="利弊介绍"><a href="#利弊介绍" class="headerlink" title="利弊介绍"></a>利弊介绍</h4><ul>
<li>优<ul>
<li>性能比直接的监听scroll事件或者设置timer都好</li>
<li>使用简单</li>
<li>利用它的功能组合可以实现很多其他效果，比如无限滚动等</li>
<li>对iframe的支持好</li>
</ul>
</li>
<li>缺<ul>
<li>兼容性不好</li>
<li>它不是完美像素与无延迟的，毕竟根本上是异步的。因此不适合做滚动动画</li>
</ul>
</li>
</ul>
<h4 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h4><ul>
<li><a href="http://www.cnblogs.com/ziyunfei/p/5558712.html" target="_blank" rel="external">IntersectionObserver API</a>: 强烈推荐这篇文章，干货满满</li>
<li><a href="https://w3c.github.io/IntersectionObserver/#intersection-observer-processing-model" target="_blank" rel="external">Intersection Observer</a></li>
<li><a href="https://developer.mozilla.org/en-US/docs/Web/API/Intersection_Observer_API" target="_blank" rel="external">Intersection Observer API</a></li>
<li><a href="https://developer.mozilla.org/en-US/docs/Web/API/Intersection_Observer_API/Timing_element_visibility" target="_blank" rel="external">Timing element visibility with the Intersection Observer API</a></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本文主要介绍了IntersectionObserver API，并且就如何将其用于数据埋点给出了尝试。&lt;/p&gt;
    
    </summary>
    
      <category term="lulutia" scheme="http://xgfe.github.io/categories/lulutia/"/>
    
    
      <category term="data" scheme="http://xgfe.github.io/tags/data/"/>
    
  </entry>
  
  <entry>
    <title>关于富文本AttributedString的使用总结</title>
    <link href="http://xgfe.github.io/2017/09/22/Sudaxi/attributeStr1/"/>
    <id>http://xgfe.github.io/2017/09/22/Sudaxi/attributeStr1/</id>
    <published>2017-09-22T08:00:00.000Z</published>
    <updated>2017-09-27T09:59:20.000Z</updated>
    
    <content type="html"><![CDATA[<p>本文主要分析了富文本常用的属性设置，平时工作过程经常遇到一些有特殊需求的label、UITextField、UITextView。一般情况下，大家都喜欢直接用多个label来实现其不同的属性，很多人忽略了label本身的富文本属性。本文针对富文本进行了详细的介绍。<br><a id="more"></a></p>
<p>首先先大概了解一下NSAttributedString 的21个属性。<br>常见的属性大概如下：<br><img src="http://p0.meituan.net/xgfe/8ac5ef6b34677319cfc020c8a1406681105850.jpg" width="600" height="600" alt="常见属性"></p>
<p>API: Character Attributes , NSAttributedString 共有21个属性</p>
<pre><code>1. NSFontAttributeName -&gt;设置字体属性，默认值：字体：Helvetica(Neue) 字号：12
2. NSParagraphStyleAttributeName -&gt;设置文本段落排版格式，取值为 NSParagraphStyle 对象
3. NSForegroundColorAttributeName -&gt;设置字体颜色，取值为 UIColor对象，默认值为黑色
4. NSBackgroundColorAttributeName -&gt;设置字体所在区域背景颜色，取值为 UIColor对象，默认值为nil, 透明色
5. NSLigatureAttributeName -&gt;设置连体属性，取值为NSNumber 对象(整数)，0 表示没有连体字符，1 表示使用默认的连体字符
6. NSKernAttributeName -&gt;设置字符间距，取值为 NSNumber 对象（整数），正值间距加宽，负值间距变窄
7. NSStrikethroughStyleAttributeName -&gt;设置删除线，取值为 NSNumber 对象（整数）
8. NSStrikethroughColorAttributeName -&gt;设置删除线颜色，取值为 UIColor 对象，默认值为黑色
9. NSUnderlineStyleAttributeName -&gt;设置下划线，取值为 NSNumber 对象（整数），枚举常量 NSUnderlineStyle中的值，与删除线类似
10. NSUnderlineColorAttributeName -&gt;设置下划线颜色，取值为 UIColor 对象，默认值为黑色
11. NSStrokeWidthAttributeName -&gt;设置笔画宽度(粗细)，取值为 NSNumber 对象（整数），负值填充效果，正值中空效果
12. NSStrokeColorAttributeName -&gt;填充部分颜色，不是字体颜色，取值为 UIColor 对象
13. NSShadowAttributeName -&gt;设置阴影属性，取值为 NSShadow 对象
14. NSTextEffectAttributeName -&gt;设置文本特殊效果，取值为 NSString 对象，目前只有图版印刷效果可用
15. NSBaselineOffsetAttributeName -&gt;设置基线偏移值，取值为 NSNumber （float）,正值上偏，负值下偏
16. NSObliquenessAttributeName -&gt;设置字形倾斜度，取值为 NSNumber （float）,正值右倾，负值左倾
17. NSExpansionAttributeName -&gt;设置文本横向拉伸属性，取值为 NSNumber （float）,正值横向拉伸文本，负值横向压缩文本
18. NSWritingDirectionAttributeName -&gt;设置文字书写方向，从左向右书写或者从右向左书写
19. NSVerticalGlyphFormAttributeName -&gt;设置文字排版方向，取值为 NSNumber 对象(整数)，0 表示横排文本，1 表示竖排文本
20. NSLinkAttributeName -&gt;设置链接属性，点击后调用浏览器打开指定URL地址
21.NSAttachmentAttributeName -&gt;设置文本附件,取值为NSTextAttachment对象,常用于文字图片混排
</code></pre><p>下面分别详细介绍整段文字不同属性的两种使用方式：</p>
<p>1、对一整段文字进行初始化，分范围（range主要是NSMakeRange(NSUInteger loc, NSUInteger len)）下标和长度进行属性化。实现不同的文字样式，再进行控件赋值。</p>
<pre><code>//其中\n可以达到分行的效果
NSString *str = @&quot;鲁班七号\n啦哈哈哈哈，不得了了。\n有人需要技术支持吗？\n鲁班大师，智商二百五，膜拜，极度膜拜。\n正在思考，如何攻克地心引力。\n请你们绕行，见识新发明的威力。\n不得不承认，有时候肌肉比头脑管用。\n检测了对面的智商，嘿嘿嘿，看来无法发挥全部实力啦。\n漏漏漏漏漏漏油啦。\n看，天上的飞机。\n相信科学。\n刮风了，吓到了。\n我想静～静～～&quot;;
NSMutableAttributedString *attributedStr = [[NSMutableAttributedString alloc] initWithString:str];
//改变某个范围的文字颜色
[attributedStr addAttribute:NSForegroundColorAttributeName value:[UIColor magentaColor] range:NSMakeRange(16, 10)];
//设置特殊字体
[attributedStr addAttribute:NSFontAttributeName value:[UIFont boldSystemFontOfSize:20] range:NSMakeRange(27, 4)];

[attributedStr addAttributes:@{NSFontAttributeName:[UIFont boldSystemFontOfSize:17],
                               NSUnderlineStyleAttributeName:@1,
                               NSUnderlineColorAttributeName:[UIColor redColor]
                               } range:NSMakeRange(32, 5)];

[attributedStr addAttributes:@{NSFontAttributeName:[UIFont boldSystemFontOfSize:30],
                               NSForegroundColorAttributeName:[UIColor brownColor],
                               NSBackgroundColorAttributeName:[UIColor yellowColor]
                               } range:NSMakeRange(0, 4)];
//给控件赋值
self.showLa.attributedText = attributedStr;
</code></pre><p> 运行效果如下：<br> <img src="http://p0.meituan.net/xgfe/c2aebeaf980a1a784389fa2c4afa2efa113929.jpg" width="300" height="300" alt=""></p>
<p> 2、整段文字，根据不同的需求，拆分成n个string。创建字典，将每个string的属性初始化。然后通过拼接string将文字串起来。再给控件的赋值</p>
<pre><code> NSMutableAttributedString *muAttributedStr = [[NSMutableAttributedString alloc] init];
 NSString *titleStr = @&quot;王昭君。\n&quot;;
 NSDictionary *titleDict = @{
                             NSFontAttributeName:[UIFont boldSystemFontOfSize:30],
                             NSForegroundColorAttributeName:[UIColor brownColor],
                             NSBackgroundColorAttributeName:[UIColor yellowColor]
                             };
 NSAttributedString *attStr = [[NSAttributedString alloc] initWithString:titleStr attributes:titleDict];
 [muAttributedStr appendAttributedString:attStr];

 NSShadow *shadow = [[NSShadow alloc] init];
 shadow.shadowColor = [UIColor purpleColor];
 shadow.shadowOffset = CGSizeMake(5, 5);
 shadow.shadowBlurRadius = 3.0; 
NSString *str1 = @&quot;凛冬已至，故乡的梅花开了吗。\n心已经融化。\n身躯已然冰封，灵魂仍旧火热。\n寒梅，无处不在。\n&quot;;
NSDictionary *dict1 = @{
                         NSKernAttributeName:@5,//字符间距
                         NSShadowAttributeName:shadow,//阴影
                         NSStrikethroughStyleAttributeName:@2,
                         NSStrikethroughColorAttributeName:[UIColor redColor]
                         };
 NSAttributedString *attStr1 = [[NSAttributedString alloc] initWithString:str1 attributes:dict1];
 [muAttributedStr appendAttributedString:attStr1];


 NSString *str2 = @&quot;凛寒梅，无处不在。\n替你们消消火。\n&quot;;
 NSDictionary *dict2 = @{
                         NSKernAttributeName:@5,//字符间距
                         NSShadowAttributeName:shadow,//阴影
                         NSStrikethroughStyleAttributeName:@2,
                         NSStrikethroughColorAttributeName:[UIColor redColor]
                         };
 NSAttributedString *attStr2 = [[NSAttributedString alloc] initWithString:str2 attributes:dict2];
 [muAttributedStr appendAttributedString:attStr2];

 NSString *str3 = @&quot;百梅落下之日，归去故里之时。\n&quot;;
 NSDictionary *dict3 = @{
                         NSBaselineOffsetAttributeName:@5,
                         NSUnderlineStyleAttributeName:@1,
                         NSUnderlineColorAttributeName:[UIColor redColor],
                         NSObliquenessAttributeName:@1
                         };
 NSAttributedString *attStr3 = [[NSAttributedString alloc] initWithString:str3 attributes:dict3];
 [muAttributedStr appendAttributedString:attStr3];

 NSString *str31 = @&quot;美貌是种罪孽，暴雪也无法掩埋。\n&quot;;
 NSDictionary *dict31 = @{
                         NSBaselineOffsetAttributeName:@2,
                         NSUnderlineStyleAttributeName:@3,
                         NSUnderlineColorAttributeName:[UIColor yellowColor],
                         NSObliquenessAttributeName:@0
                         };
 NSAttributedString *attStr31 = [[NSAttributedString alloc] initWithString:str31 attributes:dict31];
 [muAttributedStr appendAttributedString:attStr31];

 NSString *str32 = @&quot;看见了.....故乡的.......春天。\n&quot;;
 NSDictionary *dict32 = @{
                          NSBaselineOffsetAttributeName:@24,
                          NSUnderlineStyleAttributeName:@2,
                          NSUnderlineColorAttributeName:[UIColor greenColor],
                          NSObliquenessAttributeName:@(-1),
                          NSExpansionAttributeName:@(-0.5)
                          };
 NSAttributedString *attStr32 = [[NSAttributedString alloc] initWithString:str32 attributes:dict32];
 [muAttributedStr appendAttributedString:attStr32];
</code></pre><p>其中需要注意的是：<br>NSStrikethroughStyleAttributeName（删除线）、NSUnderlineStyleAttributeName的value（下划线）: 1~7单线,依次加粗  9~15:双线,依次加粗<br>NSObliquenessAttributeName（倾斜）：正值右倾,负值左倾<br> 运行效果如下：<br> <img src="http://p1.meituan.net/xgfe/9da9d0eeed5b545b73b8e7d14e2b3afe99240.jpg" width="300" height="300" alt=""></p>
<p>图文混排的使用：<br>一、将图片和文字分别初始化成不同的NSAttributedString，然后拼接到NSMutableAttributedString，赋值到控件上。</p>
<pre><code>NSString *str1= @&quot;刻骨铭心~霸王！明媚如风，轻盈似箭！啊~已经放弃了做个淑女~&quot;;
NSString *str2= @&quot;净化森林，净化污秽，净化心灵，净化自己。风会带走你曾经存在过的证明。&quot;;

NSMutableAttributedString *muAttributedStr = [[NSMutableAttributedString alloc] init];

NSAttributedString *attStr = [[NSAttributedString alloc] initWithString:str1 attributes:@{NSFontAttributeName:[UIFont systemFontOfSize:16],
                                                                                          NSForegroundColorAttributeName:[UIColor magentaColor]
                                                                                          }];
NSTextAttachment *attachment = [[NSTextAttachment alloc]init];
attachment.image = [UIImage imageNamed:@&quot;yujiphoto&quot;];
attachment.bounds = CGRectMake(0, 0, 110, 70);

NSAttributedString *attStr1 = [NSAttributedString attributedStringWithAttachment:attachment];

NSAttributedString *attStr2= [[NSAttributedString alloc] initWithString:str2 attributes:@{NSFontAttributeName:[UIFont systemFontOfSize:14],
                                                                                          NSBackgroundColorAttributeName:[UIColor clearColor]}];

 [muAttributedStr appendAttributedString:attStr];
 [muAttributedStr appendAttributedString:attStr1];
 [muAttributedStr appendAttributedString:attStr2];
</code></pre><p>二、使用insertAttributedString将图片插入到文字中。</p>
<pre><code>NSString *str3 = @&quot;一点疼痛能让偷窥者牢记我的魅力！不为所爱之人哭泣，只因从未离去。想和风比赛脚力吗？弱小，并非服从恐惧的理由！&quot;;
NSMutableAttributedString *mustr = [[NSMutableAttributedString alloc] initWithString:str3];
NSTextAttachment *attachMent1 = [[NSTextAttachment alloc] init];
attachMent1.image = [UIImage imageNamed:@&quot;photo23&quot;];
attachMent1.bounds = CGRectMake(0, 0, 110, 70);
[mustr addAttributes:@{NSFontAttributeName:[UIFont systemFontOfSize:20],
                         NSForegroundColorAttributeName:[UIColor greenColor]
                         } range:NSMakeRange(0, 8)];
NSAttributedString *att = [NSAttributedString attributedStringWithAttachment:attachMent1];
[mustr insertAttributedString:att atIndex:6];
[muAttributedStr appendAttributedString:mustr];
使用
self.showLa.attributedText = muAttributedStr;
</code></pre><p> 运行效果如下：<br>  <img src="http://p0.meituan.net/xgfe/dccd36a6ac1a8845cbad513316355332110431.jpg" width="300" height="300" alt=""></p>
<p>介绍了富文本的常用属性，并且介绍了一些常用的场景后，安利一个富文本第三方库—YYText（github的地址—<a href="https://github.com/ibireme/YYText）。详细的使用可以参考一下github上面的介绍。" target="_blank" rel="external">https://github.com/ibireme/YYText）。详细的使用可以参考一下github上面的介绍。</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本文主要分析了富文本常用的属性设置，平时工作过程经常遇到一些有特殊需求的label、UITextField、UITextView。一般情况下，大家都喜欢直接用多个label来实现其不同的属性，很多人忽略了label本身的富文本属性。本文针对富文本进行了详细的介绍。&lt;br&gt;
    
    </summary>
    
      <category term="Sudaxi" scheme="http://xgfe.github.io/categories/Sudaxi/"/>
    
    
      <category term="iOS" scheme="http://xgfe.github.io/tags/iOS/"/>
    
  </entry>
  
  <entry>
    <title>由一个表格需求引发的blog-DOM中的尺寸属性</title>
    <link href="http://xgfe.github.io/2017/09/20/Young/DOM-size/"/>
    <id>http://xgfe.github.io/2017/09/20/Young/DOM-size/</id>
    <published>2017-09-20T08:37:00.000Z</published>
    <updated>2017-09-27T09:59:20.000Z</updated>
    
    <content type="html"><![CDATA[<p>最近数据平台有一个需求，页面滚动的时候，表格的表头悬停在页面顶部，实现的时候遇到了不少问题，也尝试了几种方案，下一篇blog会尝试分享一下，由于涉及到较多的DOM操作，尤其是各种尺寸位置属性，所以对这些尺寸属性的含义做了一些总结。</p>
<a id="more"></a>
<h2 id="偏移量相关属性"><a href="#偏移量相关属性" class="headerlink" title="偏移量相关属性"></a>偏移量相关属性</h2><p>偏移量相关属性包括偏移量尺寸和位置属性，其中偏移量尺寸指的是元素在屏幕上占用的所有可见空间，包括其内容区的空间，内边距，边框以及滚动条占用的空间（不包括外边距）。偏移量位置属性是一个相对的概念，其偏移量是参照最近的定位（display值非none或static）祖先元素计算的。以像素作为单位。</p>
<ol>
<li><p>偏移量尺寸</p>
<ul>
<li>offsetWidth:元素在水平方向占用的空间大小，包括元素内容区的宽度，左右内边距的宽度，垂直滚动条的宽度，左右边框的宽度。</li>
<li>offsetHeight:元素在垂直方向占用的空间大小，包括元素内容区高度，上下内边距的高度，水平滚动条的高度，上下边框的高度。</li>
</ul>
</li>
<li><p>偏移量位置</p>
<ul>
<li>offsetParent:返回被引用元素最近的定位过的祖先元素。如果没有定位过的祖先元素，则返回body。</li>
<li>offsetTop:被引用元素上边框的外边缘与其offsetParent上边框的内边缘之间像素距离。</li>
<li>offsetLeft:被引用元素左边框的外边缘与其offsetParent左边框的内边缘之间的像素距离。</li>
</ul>
</li>
</ol>
<p><strong>用法：</strong>通常，如果想要获取某个元素在页面上的偏移量，将这个元素的offsetLeft或offsetTop与其offsetParent的相同属性相加，递归的计算直到根元素，就可以得到一个比较准确的结果。需要注意上述属性都是只读的，每次访问都需要重新计算。</p>
<h2 id="客户区尺寸"><a href="#客户区尺寸" class="headerlink" title="客户区尺寸"></a>客户区尺寸</h2><p>客户区尺寸只与元素自身所占区域大小有关，相关的属性如下。</p>
<ul>
<li>clientWidth:元素内容区宽度加上左右内边距的宽度。</li>
<li>clientHeight:元素内容区高度加上上下内边距的高度。</li>
<li>clientTop:元素上边框的宽度。</li>
<li>clientLeft:元素左边框的宽度。</li>
</ul>
<p><strong>用法：</strong>最常见的用途之一是用来确定浏览器视口的尺寸，根据浏览器的支持情况，使用document.documentElement或者document.body的相应尺寸来获取视口宽高信息。</p>
<h2 id="滚动元素相关属性"><a href="#滚动元素相关属性" class="headerlink" title="滚动元素相关属性"></a>滚动元素相关属性</h2><p>滚动元素是包含滚动条的元素，相关属性如下。</p>
<ol>
<li><p>滚动尺寸</p>
<ul>
<li>scrollWidth:元素内容的实际宽度（包含左右内边距），即在没有滚动条的情况下，元素内容的总宽度。</li>
<li>scrollHeight:元素内容的实际高度（包含上下内边距），即在没有滚动条的情况下，元素内容的总高度。</li>
</ul>
</li>
<li><p>滚动位置</p>
<ul>
<li>scrollTop:被隐藏在内容区域上方的像素数，这个属性和scrollLeft均是可配置的，可以通过设置这个属性的值来改变元素滚动的位置。</li>
<li>scrollLeft:被隐藏在内容区域左侧的像素数。</li>
</ul>
</li>
</ol>
<p><strong>用法：</strong>滚动尺寸主要用来确定元素内容的实际大小，滚动位置既可以用来确定当前滚动的状态也可以设置滚动位置。一个很常见的使用场景就是判断页面的滚动情况，不同的浏览器的获取scrollTop方法不同，document.documentElement返回的是文档的根节点即<html>，document.body返回的是body，在chrome中，获取页面scrollTop只能通过document.body.scrollTop来获取，document.documentElement获取相同属性始终返回0，而在FF下（只测试了chrome和FF）正好相反。</html></p>
<h2 id="无图无真相"><a href="#无图无真相" class="headerlink" title="无图无真相"></a>无图无真相</h2><p>作为一个斗图新人，没有图没有底气，所以虽然手残，我还是画了一个图，首先我们就假装图中那个灰色的东西是滚动条，然后看图对应上述属性吧~</p>
<p><img src="http://p1.meituan.net/xgfe/447fe588baa4cd81ed6e3cd6fc38b55d85970.png" alt=""></p>
<h2 id="事件event位置"><a href="#事件event位置" class="headerlink" title="事件event位置"></a>事件event位置</h2><p>对于页面中发生的事件，获取点击事件鼠标的位置信息在应用中很常见，以垂直位置为例，常用相关属性有三个：pageY, clientY, screenY。</p>
<ul>
<li>pageY:鼠标在页面上的文档坐标，以文档为参照，距离文档左上角的垂直像素距离，所以这个属性和页面是否滚动无关。</li>
<li>clientY:以视口为参照，鼠标距离视口左上角的垂直像素距离。</li>
<li>screenY:以浏览器为参照，鼠标距离浏览器左上角的垂直像素距离，包含工具栏之类。</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;最近数据平台有一个需求，页面滚动的时候，表格的表头悬停在页面顶部，实现的时候遇到了不少问题，也尝试了几种方案，下一篇blog会尝试分享一下，由于涉及到较多的DOM操作，尤其是各种尺寸位置属性，所以对这些尺寸属性的含义做了一些总结。&lt;/p&gt;
    
    </summary>
    
      <category term="Young" scheme="http://xgfe.github.io/categories/Young/"/>
    
    
      <category term="DOM" scheme="http://xgfe.github.io/tags/DOM/"/>
    
      <category term="跨浏览器属性" scheme="http://xgfe.github.io/tags/%E8%B7%A8%E6%B5%8F%E8%A7%88%E5%99%A8%E5%B1%9E%E6%80%A7/"/>
    
  </entry>
  
  <entry>
    <title>ConstraintLayout 采用代码方式布局用法简介</title>
    <link href="http://xgfe.github.io/2017/09/17/ivanchou/layout-with-constraintlayout-by-programming/"/>
    <id>http://xgfe.github.io/2017/09/17/ivanchou/layout-with-constraintlayout-by-programming/</id>
    <published>2017-09-16T16:00:00.000Z</published>
    <updated>2017-09-22T03:58:49.000Z</updated>
    
    <content type="html"><![CDATA[<p>关于 ConstraintLayout 的 xml 方式布局的介绍有很多，但是你知道 ConstraintSet 吗？<br>本文对于 ConstraintLayout 采用代码进行布局的方式进行了介绍。</p>
<a id="more"></a>
<h2 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h2><p>我们知道，Android 界面的布局按照传统方式是通过编写 xml 代码去实现的。虽然 Android Studio 提供可视化的方式去编写界面，但是并没有编写 xml 代码好用。为了解决这一问题 ConstraintLayout 诞生了，这是 Google 在 I/O 2016 推出的用可视化的方式编写界面的布局。（注：从 Android Studio 2.2 开始提供支持）</p>
<p>ConstraintLayout 的优点在于使用扁平的层次结构创建出复杂的布局，类似于 RelativeLayout 通过定义自身与其他 View 或者 Parent 之间的关系实现布局，ConstraintLayout 比 RelativeLayout 更加灵活。同时，在 Android Studio 中可以且推荐使用可视化的方式去编写界面。</p>
<ul>
<li><p>在 xml 中使用</p>
<p>  关于 xml 方式进行布局的资料有很多，就不再赘述了。</p>
</li>
<li><p>通过编程的方式布局</p>
<p>  android.support.constraint 包下有四个类，分别是 ConstraintLayout、ConstraintLayout.LayoutParams、ConstraintSet 与 Guideline。官方文档对它们的说明如下表，</p>
</li>
</ul>
<blockquote>
<table>
<thead>
<tr>
<th>类名</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td>ConstraintLayout</td>
<td>A ConstraintLayout is a ViewGroup which allows you to position and size widgets in a flexible way.</td>
</tr>
<tr>
<td>ConstraintLayout.LayoutParams</td>
<td>This class contains the different attributes specifying how a view want to be laid out inside a ConstraintLayout.</td>
</tr>
<tr>
<td>ConstraintSet</td>
<td>This class allows you to define programmatically a set of constraints to be used with ConstraintLayout.</td>
</tr>
<tr>
<td>Guideline</td>
<td>Utility class representing a Guideline helper object for ConstraintLayout.</td>
</tr>
</tbody>
</table>
</blockquote>
<p>   对于 ConstraintSet 的描述是可以通过编程的方式定义一系列约束，本文的主题就是围绕着 ConstraintSet 来进行的。</p>
<h2 id="编程实现约束布局"><a href="#编程实现约束布局" class="headerlink" title="编程实现约束布局"></a>编程实现约束布局</h2><p>要通过编程的方式实现约束布局，分为以下几个步骤：</p>
<ul>
<li><p>添加 View 到 Activity 中</p>
<p>  在 onCreate() 方法中创建 ConstraintLayout，并添加两个按钮到布局上，通过 setContentView() 设置 Activity 的布局。</p>
  <figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> <span class="keyword">extends</span> <span class="title">AppCompatActivity</span> </span>&#123;</div><div class="line"></div><div class="line">    Button mOkBtn;</div><div class="line">    Button mCancelBtn;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</div><div class="line"></div><div class="line">        ConstraintLayout cl = <span class="keyword">new</span> ConstraintLayout(<span class="keyword">this</span>);</div><div class="line"></div><div class="line">        mOkBtn = <span class="keyword">new</span> Button(<span class="keyword">this</span>);</div><div class="line">        mOkBtn.setText(<span class="string">"OK"</span>);</div><div class="line">        cl.addView(mOkBtn);</div><div class="line"></div><div class="line">        mCancelBtn = <span class="keyword">new</span> Button(<span class="keyword">this</span>);</div><div class="line">        mCancelBtn.setText(<span class="string">"Cancel"</span>);</div><div class="line">        cl.addView(mCancelBtn);</div><div class="line"></div><div class="line">        setContentView(cl);</div><div class="line"></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>给 View 设置 id</p>
<p>  通常在 xml 中添加 View 时，Android SDK 会自动帮我们生成资源文件的 id，存储在 R.java 中。但是通过代码的方式并不会触发生成 id，所以需要进行手动绑定。</p>
<p>  首先，在 res/values 目录中新建一个资源文件 ids.xml，</p>
  <figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version="1.0" encoding="utf-8"?&gt;</div><div class="line"><span class="tag">&lt;<span class="name">resources</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">item</span> <span class="attr">name</span>=<span class="string">"btnCancel"</span> <span class="attr">type</span>=<span class="string">"id"</span>/&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">item</span> <span class="attr">name</span>=<span class="string">"btnOk"</span> <span class="attr">type</span>=<span class="string">"id"</span>/&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">resources</span>&gt;</span></div></pre></td></tr></table></figure>
<p>  然后在代码中进行绑定，</p>
  <figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">mOkBtn.setId(R.id.btnOk);</div><div class="line">mCancelBtn.setId(R.id.btnCancel);</div></pre></td></tr></table></figure>
<p>  这时候之后设置的相关约束才会真正生效。</p>
</li>
<li><p>设置 View 的属性</p>
<p>  必须设置的属性除了 view id 还有宽高，宽高属性是通过 ConstraintSet 来设置的，通过指定 view id 及可选的有水平方向的依赖以及垂直方向的依赖。</p>
<p>  我们知道采用 xml 进行布局的时候对于宽高的设置有三种选项，分别是 wrap_content、match constraints(0dp) 以及 fixed ，而通过代码的方式只有前面两种，没有 fiexd 这个选项。</p>
</li>
</ul>
<blockquote>
<table>
<thead>
<tr>
<th style="text-align:left">常量值</th>
<th style="text-align:center">描述</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">ConstraintSet.WRAP_CONTENT</td>
<td style="text-align:center">WRAP_CONTENT</td>
</tr>
<tr>
<td style="text-align:left">ConstraintSet.MATCH_CONSTRAINT</td>
<td style="text-align:center">0 dp</td>
</tr>
</tbody>
</table>
</blockquote>
<p>设置 view 宽高的方法如下，</p>
<blockquote>
<table>
<thead>
<tr>
<th>xml 属性</th>
<th>对应方法</th>
</tr>
</thead>
<tbody>
<tr>
<td>android:layout_height</td>
<td>ConstraintSet.constrainHeight(int viewId, int height)</td>
</tr>
<tr>
<td>android:layout_width</td>
<td>ConstraintSet.constrainWidth(int viewId, int width)</td>
</tr>
</tbody>
</table>
</blockquote>
<ul>
<li><p>配置依赖关系 ConstraintSet</p>
<p>  官方推荐使用 ConstraintSet 来进行约束配置，这里很奇怪为什么不能通过 LayoutParams 来配置依赖关系。ConstraintSet 可以用来通过编程的方式定义一系列用在 ConstraintLayout 上的约束，可以用来创建、保存约束，并且可以将其应用在已有的 ConstraintLayout 上，可以通过以下 3 种方式来获取 ConstraintSet。</p>
<ol>
<li><p>手动</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">c = <span class="keyword">new</span> ConstraintSet(); c.connect(....);</div></pre></td></tr></table></figure>
</li>
<li><p>读取 xml 文件中的约束</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">c.clone(context, R.layout.layout1);</div></pre></td></tr></table></figure>
</li>
<li><p>从其他 ConstraintLayout 复制</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">c.clone(clayout);</div></pre></td></tr></table></figure>
<p>第2、3两种方法具体使用参见官方文档说明，这篇文章主要介绍手动编码的方式，我们重点来看 connect 方法。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">connect</span><span class="params">(<span class="keyword">int</span> startID, <span class="keyword">int</span> startSide, <span class="keyword">int</span> endID, <span class="keyword">int</span> endSide, <span class="keyword">int</span> margin)</span></span></div></pre></td></tr></table></figure>
<p>connect 方法需要四个参数，可以理解为连线的起始 view 的边与终止 view 的边，描述一个 view 的边需要通过 view id 与 side 来确定，对应到 xml 中则是 layout_constraint{$startSide}_to{$endSide}Of = “endID” 属性。这里的 view id 非常重要，在没有设置 view id 的情况下会导致无法找到正确的 view，也就无法正确应用约束设置。</p>
<p>尝试在代码中打印出 view id 的值，可以发现通过 new 方式得到的 view 的 id 默认为 -1，也正是因为这个原因，你会发现没有设置 view id 的情况下布局并没有生效。ConstraintSet 中用来描述约束特征的常量有如下几种，</p>
</li>
</ol>
</li>
</ul>
<blockquote>
<table>
<thead>
<tr>
<th>常量值</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td>ConstraintSet.LEFT</td>
<td>View 的左边界</td>
</tr>
<tr>
<td>ConstraintSet.RIGHT</td>
<td>View 的右边界</td>
</tr>
<tr>
<td>ConstraintSet.TOP</td>
<td>View 的顶部</td>
</tr>
<tr>
<td>ConstraintSet.BOTTOM</td>
<td>View 的底部</td>
</tr>
<tr>
<td>ConstraintSet.BASELINE</td>
<td>View 中 text 的基线</td>
</tr>
<tr>
<td>ConstraintSet.PARENT_ID</td>
<td>父控件的 id，通常情况下为 ConstraintLayout</td>
</tr>
</tbody>
</table>
</blockquote>
<ul>
<li><p>dpTopx</p>
<p>  通常我们在 xml 中可以直接输入具体的 dp 值，但是在代码中具体的数值代表的是 px，所以需要根据屏幕具体的分辨率进行转换。</p>
  <figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">dpToPx</span><span class="params">(<span class="keyword">int</span> dp)</span> </span>&#123;</div><div class="line">    DisplayMetrics displayMetrics = getContext().getResources().getDisplayMetrics();</div><div class="line">    <span class="keyword">return</span> Math.round(dp * (displayMetrics.xdpi / DisplayMetrics.DENSITY_DEFAULT));     </div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ul>
<h2 id="案例"><a href="#案例" class="headerlink" title="案例"></a>案例</h2><p>接下来我们通过一个简单的 demo 来了解一下 ConstraintSet 的用法。编写一个只包含确定、取消按钮的界面，采用 xml 的方式配置的代码如下，</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">Button</span></span></div><div class="line">    <span class="attr">android:id</span>=<span class="string">"@+id/btnCancel"</span></div><div class="line">    <span class="attr">android:layout_width</span>=<span class="string">"wrap_content"</span></div><div class="line">    <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></div><div class="line">    <span class="attr">android:layout_marginBottom</span>=<span class="string">"8dp"</span></div><div class="line">    <span class="attr">android:layout_marginLeft</span>=<span class="string">"8dp"</span></div><div class="line">    <span class="attr">android:text</span>=<span class="string">"Cancel"</span></div><div class="line">    <span class="attr">app:layout_constraintBottom_toBottomOf</span>=<span class="string">"parent"</span></div><div class="line">    <span class="attr">app:layout_constraintLeft_toLeftOf</span>=<span class="string">"parent"</span> /&gt;</div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">Button</span></span></div><div class="line">    <span class="attr">android:id</span>=<span class="string">"@+id/btnOK"</span></div><div class="line">    <span class="attr">android:layout_width</span>=<span class="string">"wrap_content"</span></div><div class="line">    <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></div><div class="line">    <span class="attr">android:layout_marginBottom</span>=<span class="string">"8dp"</span></div><div class="line">    <span class="attr">android:layout_marginRight</span>=<span class="string">"8dp"</span></div><div class="line">    <span class="attr">android:text</span>=<span class="string">"OK"</span></div><div class="line">    <span class="attr">app:layout_constraintBottom_toBottomOf</span>=<span class="string">"parent"</span></div><div class="line">    <span class="attr">app:layout_constraintRight_toRightOf</span>=<span class="string">"parent"</span> /&gt;</div></pre></td></tr></table></figure>
<p>将其转换成对应的 Java code，</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> <span class="keyword">extends</span> <span class="title">AppCompatActivity</span> </span>&#123;</div><div class="line"></div><div class="line">    Button mOkBtn;</div><div class="line">    Button mCancelBtn;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</div><div class="line"></div><div class="line">        ConstraintLayout cl = <span class="keyword">new</span> ConstraintLayout(<span class="keyword">this</span>);</div><div class="line"></div><div class="line">        mOkBtn = <span class="keyword">new</span> Button(<span class="keyword">this</span>);</div><div class="line">        mOkBtn.setText(<span class="string">"OK"</span>);</div><div class="line">        cl.addView(mOkBtn);</div><div class="line"></div><div class="line">        mCancelBtn = <span class="keyword">new</span> Button(<span class="keyword">this</span>);</div><div class="line">        mCancelBtn.setText(<span class="string">"Cancel"</span>);</div><div class="line">        cl.addView(mCancelBtn);</div><div class="line"></div><div class="line">        ConstraintSet set = <span class="keyword">new</span> ConstraintSet();</div><div class="line"></div><div class="line">        set.connect(mCancelBtn.getId(), ConstraintSet.BOTTOM, ConstraintSet.PARENT_ID, ConstraintSet.BOTTOM, dpTopx(<span class="number">8</span>));</div><div class="line">        set.connect(mCancelBtn.getId(), ConstraintSet.LEFT, ConstraintSet.PARENT_ID, ConstraintSet.LEFT, dpTopx(<span class="number">8</span>));</div><div class="line">        set.constrainHeight(mCancelBtn.getId(), ConstraintSet.WRAP_CONTENT);</div><div class="line">        set.constrainWidth(mCancelBtn.getId(), ConstraintSet.WRAP_CONTENT);</div><div class="line">        </div><div class="line">        set.connect(mOkBtn.getId(), ConstraintSet.BOTTOM, ConstraintSet.PARENT_ID, ConstraintSet.BOTTOM, dpTopx(<span class="number">8</span>));</div><div class="line">        set.connect(mOkBtn.getId(), ConstraintSet.RIGHT, ConstraintSet.PARENT_ID, ConstraintSet.RIGHT, dpTopx(<span class="number">8</span>));</div><div class="line">        set.constrainHeight(mOkBtn.getId(), ConstraintSet.WRAP_CONTENT);</div><div class="line">        set.constrainWidth(mOkBtn.getId(), ConstraintSet.WRAP_CONTENT);</div><div class="line">        </div><div class="line">        set.applyTo(cl);</div><div class="line">        setContentView(cl);</div><div class="line"></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>可以看到相比于 xml 代码，Java 代码既繁琐又长，更何况 ConstraintLayout 的出现本来就不推荐手写 xml，在 Android Stuidio 中以直接拖动的方式进行布局操作最少只需要 3 步：</p>
<ul>
<li>拖动控件到界面上</li>
<li>设置 id（可省略）</li>
<li>选中控件，将控件左边界连接到父空间的左边</li>
<li>选中控件，将控件下边界连接到父空间的底部</li>
</ul>
<p>所以采用代码的方式进行布局，效率反而进一步降低了。除非必要，这并不是一种值的推荐的方式。</p>
<h2 id="存在的问题"><a href="#存在的问题" class="headerlink" title="存在的问题"></a>存在的问题</h2><p>在进行代码布局的过程中，发现对 view 设置的与父控件的左／右间隔并没有生效，不知道是不是一个已知的 bug，有待进一步深入。</p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>初次接触到 ConstraintLayout 时被这种快速便捷的操作方式吸引，意味着可以不用为了实现复杂的布局而进行多层嵌套。顺理成章，当我在自定义控件时第一时刻便想到了它，也就有了这篇简介。其实后来仔细一想这种需求还是比较奇怪，本身 ConstraintLayout 的出现是为了解决 Android 开发中可视化编辑界面的不便，然而偏要选择写 xml 的方式去布局，甚至是 Java code，那就是自找麻烦了。这可能也是为什么官方没有在 Tutorial 中提及而只是在 API Doc 中一笔带过的原因吧。</p>
<h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ol>
<li><a href="https://developer.android.com/training/constraint-layout/index.html" target="_blank" rel="external">Build a Responsive UI with ConstraintLayout | Android Developers</a></li>
<li><a href="http://blog.csdn.net/guolin_blog/article/details/53122387" target="_blank" rel="external">Android新特性介绍，ConstraintLayout完全解析</a></li>
<li><a href="https://developer.android.com/reference/android/support/constraint/package-summary.html" target="_blank" rel="external">ConstraintLayout | Android Developers</a></li>
<li><a href="http://www.techotopia.com/index.php/An_Android_ConstraintSet_Tutorial" target="_blank" rel="external">An Android ConstraintSet Tutorial</a></li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;关于 ConstraintLayout 的 xml 方式布局的介绍有很多，但是你知道 ConstraintSet 吗？&lt;br&gt;本文对于 ConstraintLayout 采用代码进行布局的方式进行了介绍。&lt;/p&gt;
    
    </summary>
    
      <category term="ivanchou" scheme="http://xgfe.github.io/categories/ivanchou/"/>
    
    
      <category term="Android" scheme="http://xgfe.github.io/tags/Android/"/>
    
      <category term="布局" scheme="http://xgfe.github.io/tags/%E5%B8%83%E5%B1%80/"/>
    
  </entry>
  
  <entry>
    <title>HTML解析和资源加载</title>
    <link href="http://xgfe.github.io/2017/09/07/felix/html-parsing-and-resources-load/"/>
    <id>http://xgfe.github.io/2017/09/07/felix/html-parsing-and-resources-load/</id>
    <published>2017-09-07T03:00:00.000Z</published>
    <updated>2017-09-12T08:43:59.000Z</updated>
    
    <content type="html"><![CDATA[<p>学习浏览器的内部工作原理将有助于您作出更明智的决策，并理解那些最佳开发实践的个中缘由。</p>
<p>本文主要针对WebKit内核的浏览器。</p>
<a id="more"></a>
<h2 id="渲染引擎工作流"><a href="#渲染引擎工作流" class="headerlink" title="渲染引擎工作流"></a>渲染引擎工作流</h2><p><img src="http://p1.meituan.net/xgfe/6112586223b0a8894049a9ece14c0201173121.png" alt=""></p>
<h2 id="HTML并行加载和解析"><a href="#HTML并行加载和解析" class="headerlink" title="HTML并行加载和解析"></a>HTML并行加载和解析</h2><ul>
<li>js是单线程的，浏览器是多线程的，chrome是多进程的</li>
<li>浏览器的多线程：<ul>
<li>GUI渲染线程</li>
<li>javascript引擎线程</li>
<li>定时器触发器线程</li>
<li>事件触发线程</li>
<li>异步http请求线程</li>
<li>js引擎线程和GUI渲染线程互斥</li>
</ul>
</li>
<li>浏览器加载、解析和渲染同时进行</li>
</ul>
<h2 id="浏览器并发请求限制"><a href="#浏览器并发请求限制" class="headerlink" title="浏览器并发请求限制"></a>浏览器并发请求限制</h2><ul>
<li>webkit 同域并发请求限制为6</li>
</ul>
<h2 id="外部资源的加载规则"><a href="#外部资源的加载规则" class="headerlink" title="外部资源的加载规则"></a>外部资源的加载规则</h2><ol>
<li>HTML【highest】：iframe，非阻塞</li>
<li>css【highest】<ul>
<li>css文件异步加载和解析，不影响HTML文档的解析和DOMContentLoaded事件，但是会阻塞<strong>整个</strong>DOM的渲染</li>
<li>css文件的加载和解析会阻塞后续js文件的执行</li>
<li>内部import的css文件，立即加入请求队伍并继续阻塞后续js文件的执行</li>
</ul>
</li>
<li>javascript<ul>
<li>js文件的加载和解析会阻塞<strong>后续</strong>DOM的解析和渲染[阻塞主线程]</li>
<li>head里面的js文件【high】</li>
<li>body末尾的js文件【medium】</li>
<li>async和defer的js文件不阻塞主线程【low】</li>
</ul>
</li>
<li>图片【low】:非阻塞</li>
<li>字体文件【highest】:非阻塞</li>
<li>其他资源基本都是非阻塞且低优先级的</li>
<li>preload和prefetch(可能被浏览器忽略)不改变优先级</li>
</ol>
<p><strong>【预解析】当主线程被阻碍时，WebKit会启动另外一个线程去遍历后面的HTML网页，收集需要的资源URL，然后发送请求，这样就可以避免被阻碍。实现资源的并发下载，包括js文件。</strong></p>
<h2 id="DOMContentLoaded-和-load事件"><a href="#DOMContentLoaded-和-load事件" class="headerlink" title="DOMContentLoaded 和 load事件"></a><a href="https://developer.mozilla.org/zh-CN/docs/Web/Events/DOMContentLoaded" target="_blank" rel="external">DOMContentLoaded</a> 和 <a href="https://developer.mozilla.org/en-US/docs/Web/Events/load" target="_blank" rel="external">load</a>事件</h2><ul>
<li>初始HTML文档被完全加载和解析完成之后，DOMContentLoaded 事件被触发，而无需等待<strong>样式表</strong>、<strong>图像</strong>和<strong>子框架</strong>完成加载；[完成DOMTree]</li>
<li>当一个资源及其依赖资源已完成加载时，将触发load事件。</li>
</ul>
<h2 id="js文件非阻塞加载"><a href="#js文件非阻塞加载" class="headerlink" title="js文件非阻塞加载"></a>js文件非阻塞加载</h2><ul>
<li>script[async]<ul>
<li>js文件异步加载，不阻塞主线程(HTML解析，其他js执行)</li>
<li>js文件的执行时间不可预期，不对其它流程产生影响</li>
</ul>
</li>
<li>script[defer]<ul>
<li>js文件异步加载，不阻塞主线程(HTML解析，其他js执行)</li>
<li>js文件的执行在HTML解析完成之后，所有defer js文件按顺序先后执行<ul>
<li>FF在DOMContentLoaded事件之前（defer的js文件会延迟DOMContentLoaded事件）</li>
<li>WebKit内核中不影响DOMContentLoaded事件</li>
</ul>
</li>
</ul>
</li>
<li>XHR异步请求然后eval()执行</li>
<li>动态插入script标签<ul>
<li>document.write()：同script标签，但不会阻塞当前脚本后续执行</li>
<li>动态创建script标签，再append到DOM中：同script[async]</li>
</ul>
</li>
</ul>
<h2 id="扩展阅读"><a href="#扩展阅读" class="headerlink" title="扩展阅读"></a>扩展阅读</h2><ul>
<li><a href="https://www.html5rocks.com/zh/tutorials/internals/howbrowserswork/" target="_blank" rel="external">浏览器的工作原理：新式网络浏览器幕后揭秘</a></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;学习浏览器的内部工作原理将有助于您作出更明智的决策，并理解那些最佳开发实践的个中缘由。&lt;/p&gt;
&lt;p&gt;本文主要针对WebKit内核的浏览器。&lt;/p&gt;
    
    </summary>
    
      <category term="felix" scheme="http://xgfe.github.io/categories/felix/"/>
    
    
      <category term="html" scheme="http://xgfe.github.io/tags/html/"/>
    
  </entry>
  
  <entry>
    <title>如何将html保存成图片</title>
    <link href="http://xgfe.github.io/2017/09/07/huanglifen/html2image/"/>
    <id>http://xgfe.github.io/2017/09/07/huanglifen/html2image/</id>
    <published>2017-09-06T16:00:00.000Z</published>
    <updated>2017-09-12T08:43:59.000Z</updated>
    
    <content type="html"><![CDATA[<p>如何将HTML保存成高清图片？本文带你一探究竟。<br><a id="more"></a></p>
<h2 id="使用场景"><a href="#使用场景" class="headerlink" title="使用场景"></a>使用场景</h2><p>现在流行于朋友圈分享的一些活动页，经常会玩这样的一个功能：将诸如测试之类的结果页保存成图片分享至朋友圈，以此来吸引用户参与，提高活动的pv和uv。</p>
<h2 id="如何做"><a href="#如何做" class="headerlink" title="如何做"></a>如何做</h2><p>一般来说有这两个技术步骤：</p>
<ul>
<li>html2canvas</li>
<li>canvas2image</li>
</ul>
<p>当需要连同html中跨域的图片一起转换时，需要增加一个base步骤：</p>
<ul>
<li>image proxy（因为canvas2image不支持跨域的图片, 本篇只是点到，不做展开）</li>
<li>html2canvas</li>
<li>canvas2image</li>
</ul>
<p>首先需要将html转成canvas， 再接着将canvas转为图片，至此，用户用手机自带的功能长按就可以保存，当然你也可以自己做长按保存的功能，canvas2image 提供了保存成图片的api。</p>
<h2 id="html2canvas"><a href="#html2canvas" class="headerlink" title="html2canvas"></a>html2canvas</h2><h3 id="如何转换的"><a href="#如何转换的" class="headerlink" title="如何转换的"></a>如何转换的</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">The script traverses through the DOM of the page it is loaded on. </div><div class="line">It gathers information on all the elements there, which it then uses to build a representation of the page. </div><div class="line">In other words, it does not actually take a screenshot of the page, </div><div class="line">but builds a representation of it based on the properties it reads from the DOM.</div><div class="line">As a result, it is only able to render correctly properties that it understands, </div><div class="line">meaning there are many CSS properties which do not work.</div></pre></td></tr></table></figure>
<p>翻译过来就是：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">通过脚本去遍历页面加载的DOM元素，收集所有元素的有关信息，然后用收集到的信息来构建页面的表示。</div><div class="line">换句话说，它实际上并不是页面的屏幕截图，而是基于从DOM读取的属性来构建页面的表示。</div><div class="line">因此，它只能够正确地呈现其理解的属性，这就意味着有许多CSS属性不起作用。</div></pre></td></tr></table></figure></p>
<h3 id="制约点"><a href="#制约点" class="headerlink" title="制约点"></a>制约点</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">All the images that the script uses need to reside under the same origin </div><div class="line">for it to be able to read them without the assistance of a proxy. </div><div class="line">Similarly, if you have other canvas elements on the page, which have been </div><div class="line">tainted with cross-origin content, they will become dirty and no longer readable by html2canvas.</div><div class="line">The script doesn&apos;t render plugin content such as Flash or Java applets.</div><div class="line">It doesn&apos;t render iframe content either.</div></pre></td></tr></table></figure>
<p>翻译过来就是：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">脚本使用的所有图像都必须位于相同的起源点，以便脚本不需要代理协助就可以读取它们的信息。</div><div class="line">类似地，如果页面上有其他canvas元素，这些元素已经被不是同源的内容所污染，就不能被html2canvas读取。</div><div class="line">简单来说就两点：</div><div class="line">- 不支持跨域</div><div class="line">- 不支持HTML中包含canvas</div></pre></td></tr></table></figure></p>
<p>参数说明</p>
<table>
<thead>
<tr>
<th>Name</th>
<th style="text-align:center">Type</th>
<th style="text-align:center">Default</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td>allowTaint</td>
<td style="text-align:center">boolean</td>
<td style="text-align:center">false</td>
<td>是否允许图片跨域</td>
</tr>
<tr>
<td>background</td>
<td style="text-align:center">string</td>
<td style="text-align:center">#fff</td>
<td>画布背景颜色，如果DOM中未指定，值为透明</td>
</tr>
<tr>
<td>height</td>
<td style="text-align:center">number</td>
<td style="text-align:center">null</td>
<td>以像素为单位定义画布的高度。 如果为空，则按窗口的高度来渲染</td>
</tr>
<tr>
<td>width</td>
<td style="text-align:center">number</td>
<td style="text-align:center">null</td>
<td>以像素为单位定义画布的宽度。 如果为空，则按窗口的宽度来渲染</td>
</tr>
<tr>
<td>letterRendering</td>
<td style="text-align:center">boolean</td>
<td style="text-align:center">false</td>
<td>是否分别渲染每一个字符，必要时使用letter-spacing</td>
</tr>
<tr>
<td>logging</td>
<td style="text-align:center">boolean</td>
<td style="text-align:center">false</td>
<td>是否开启控制台日志</td>
</tr>
<tr>
<td>proxy</td>
<td style="text-align:center">string</td>
<td style="text-align:center">undefined</td>
<td>设置用于加载跨域图片的代理域名，如果为空，跨域的图片不会被加载</td>
</tr>
<tr>
<td>taintTest</td>
<td style="text-align:center">boolean</td>
<td style="text-align:center">true</td>
<td>设置是否在渲染前检测每张图片加载完</td>
</tr>
<tr>
<td>timeout</td>
<td style="text-align:center">number</td>
<td style="text-align:center">0</td>
<td>设置超时加载图片，毫秒为单位，设置为0则无超时</td>
</tr>
<tr>
<td>useCORS</td>
<td style="text-align:center">boolean</td>
<td style="text-align:center">false</td>
<td>是否在还原到代理服务器之前尝试将跨域的图像加载为CORS</td>
</tr>
<tr>
<td>scale</td>
<td style="text-align:center">number</td>
<td style="text-align:center">1</td>
<td>转换时放大的倍数，可以通过获取设备的像素密度来定义，也可以自定义</td>
</tr>
</tbody>
</table>
<h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><p>转换后的canvas会传递到回调函数中<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">html2canvas(element, &#123;</div><div class="line">    <span class="attr">onrendered</span>: <span class="function"><span class="keyword">function</span>(<span class="params">canvas</span>) </span>&#123;</div><div class="line">        <span class="comment">// canvas is the final rendered &lt;canvas&gt; element</span></div><div class="line">    &#125;</div><div class="line">&#125;);</div><div class="line"></div><div class="line">或者</div><div class="line"></div><div class="line">html2canvas(element, options).then(<span class="function"><span class="keyword">function</span> (<span class="params">canvas</span>) </span>&#123;</div><div class="line">    <span class="comment">// canvas is the final rendered &lt;canvas&gt; element</span></div><div class="line">&#125;);</div></pre></td></tr></table></figure></p>
<p>想要了解更多信息，请前往官网地址：<a href="http://html2canvas.hertzen.com/" target="_blank" rel="external">http://html2canvas.hertzen.com/</a></p>
<h2 id="canvas2image"><a href="#canvas2image" class="headerlink" title="canvas2image"></a>canvas2image</h2><p>你可以使用的API:<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">Canvas2Image.saveAsImage(canvasObj, width, height, type)</div><div class="line">Canvas2Image.saveAsPNG(canvasObj, width, height)</div><div class="line">Canvas2Image.saveAsJPEG(canvasObj, width, height)</div><div class="line">Canvas2Image.saveAsGIF(canvasObj, width, height)</div><div class="line">Canvas2Image.saveAsBMP(canvasObj, width, height)</div><div class="line"></div><div class="line">Canvas2Image.convertToImage(canvasObj, width, height, type)</div><div class="line">Canvas2Image.convertToPNG(canvasObj, width, height)</div><div class="line">Canvas2Image.convertToJPEG(canvasObj, width, height)</div><div class="line">Canvas2Image.convertToGIF(canvasObj, width, height)</div><div class="line">Canvas2Image.convertToBMP(canvasObj, width, height)</div></pre></td></tr></table></figure></p>
<h2 id="举个栗子"><a href="#举个栗子" class="headerlink" title="举个栗子"></a>举个栗子</h2><p>html：<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"main"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"html-source width-6 fl"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"img/timg.jpeg"</span> <span class="attr">class</span>=<span class="string">"width-6"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>图片描述文字<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"option-content width-4 fl"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">"button start-to-do"</span>&gt;</span>转换成图片<span class="tag">&lt;/<span class="name">button</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">"button"</span>&gt;</span>下载图片<span class="tag">&lt;/<span class="name">button</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"png-content width-6 fl"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>核心js：为获得高清的图片，先以N倍的尺寸转换成canvas, 再1：1转换成png, 最后通过样式去控制最后生成的图片展示尺寸。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> me = <span class="keyword">this</span>;</div><div class="line"><span class="keyword">var</span> sourceContent = me.$el.$htmlSource;</div><div class="line"><span class="keyword">var</span> width = sourceContent.width();</div><div class="line"><span class="keyword">var</span> height = sourceContent.height();</div><div class="line"><span class="keyword">var</span> offsetTop = sourceContent.offset().top;</div><div class="line"><span class="keyword">var</span> offsetLeft = sourceContent.offset().left;</div><div class="line"><span class="keyword">var</span> canvas = <span class="built_in">document</span>.createElement(<span class="string">"canvas"</span>);</div><div class="line"><span class="keyword">var</span> canvas2D = canvas.getContext(<span class="string">"2d"</span>);</div><div class="line"></div><div class="line"><span class="comment">// 不能小于1，否则图片不完整，通过获取设备的像素密度不能统一得到清晰的图片，建议写固定值</span></div><div class="line"><span class="keyword">var</span> scale = N;</div><div class="line">canvas.width = (width + offsetLeft) * scale;</div><div class="line">canvas.height = (height + offsetTop) * scale;</div><div class="line">canvas2D.scale(scale, scale);</div><div class="line">canvas2D.font = <span class="string">"Microsoft YaHei"</span>;</div><div class="line"><span class="keyword">var</span> options = &#123;</div><div class="line"></div><div class="line">    <span class="comment">//检测每张图片都已经加载完成</span></div><div class="line">    tainttest:<span class="literal">true</span>,</div><div class="line">    <span class="attr">canvas</span>: canvas,</div><div class="line">    <span class="attr">scale</span>: scale,</div><div class="line"></div><div class="line">    <span class="comment">//dom 放大的宽度，放大倍数和清晰度在一定范围内成正相关</span></div><div class="line">    width: width + offsetLeft,</div><div class="line"></div><div class="line">    <span class="comment">// 开启日志，可以方便调试</span></div><div class="line">    logging: <span class="literal">true</span>,</div><div class="line"></div><div class="line">    <span class="comment">//dom 放大的宽度，放大倍数和清晰度在一定范围内成正相关</span></div><div class="line">    height: height + offsetTop</div><div class="line">&#125;;</div><div class="line">html2canvas(sourceContent, options).then(<span class="function"><span class="keyword">function</span> (<span class="params">canvas</span>) </span>&#123;</div><div class="line">    <span class="keyword">var</span> img = <span class="built_in">window</span>.Canvas2Image.convertToPNG(canvas, width * scale, height * scale);</div><div class="line">    me.$el.$pngContent.append(img);</div><div class="line"></div><div class="line">    <span class="comment">// 将图片恢复到原始大小</span></div><div class="line">    me.$el.$pngContent.find(<span class="string">'img'</span>).css(&#123;</div><div class="line">        <span class="attr">width</span>: width,</div><div class="line">        <span class="attr">height</span>: height</div><div class="line">    &#125;);</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p>下面是不同的倍数N，生成的不同清晰度的图片：<br><img src="http://p0.meituan.net/xgfe/9a8e54d6457a682eb167d77fd1d2d2ef594412.png" alt="效果图（倍数N: 1~3.5）"></p>
<p>之前做过一次项目，N设为3 可以满足多种主流手机的高清图片要求。</p>
<h3 id="附完整源代码"><a href="#附完整源代码" class="headerlink" title="附完整源代码"></a>附完整源代码</h3><p>需要说明的是： 页面需要运行于服务器中转换才能生效。</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">content</span>=<span class="string">"width=device-width,minimum-scale=1.0,maximum-scale=1.0,user-scalable=no"</span> <span class="attr">name</span>=<span class="string">"viewport"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="javascript"></span></div><div class="line">        (<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">            <span class="keyword">var</span> win = <span class="built_in">window</span>, html = <span class="built_in">document</span>.documentElement;</div><div class="line">            <span class="function"><span class="keyword">function</span> <span class="title">setRem</span>(<span class="params"></span>) </span>&#123;</div><div class="line">                <span class="keyword">var</span> width = html.getBoundingClientRect().width;</div><div class="line">                width = (width == <span class="number">980</span>) ? <span class="number">360</span> : width;</div><div class="line">                <span class="keyword">var</span> rem = width / <span class="number">20</span>;</div><div class="line">                win.rem = rem;</div><div class="line">                html.style.fontSize = rem + <span class="string">'px'</span>;</div><div class="line">            &#125;</div><div class="line">            setRem();</div><div class="line">        &#125;)();</div><div class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">"text/css"</span>&gt;</span><span class="undefined"></span></div><div class="line">        * &#123;</div><div class="line">            padding: 0;</div><div class="line">            margin: 0;</div><div class="line">        &#125;</div><div class="line">        .main &#123;</div><div class="line">            padding: 0.2rem;</div><div class="line">            background: #fafafa;</div><div class="line">            overflow: auto;</div><div class="line">        &#125;</div><div class="line">        .width-2 &#123;</div><div class="line">            width: 2rem;</div><div class="line">        &#125;</div><div class="line">        .fl &#123;</div><div class="line">            float: left;</div><div class="line">        &#125;</div><div class="line">        .html-source &#123;</div><div class="line">            height: 10rem;</div><div class="line">        &#125;</div><div class="line">        .html-text &#123;</div><div class="line">            font-size: 0.2rem;</div><div class="line">        &#125;</div><div class="line">        .png-content &#123;</div><div class="line">            height: 20rem;</div><div class="line">        &#125;</div><div class="line">        .png-content img &#123;</div><div class="line">            border: 0;</div><div class="line">            margin: 0 0.2rem;</div><div class="line">        &#125;</div><div class="line">        .button &#123;</div><div class="line">            color: #fff;</div><div class="line">            background-color: #23b7e5;</div><div class="line">            border-color: #23b7e5;</div><div class="line">            font-weight: 500;</div><div class="line">            border-radius: 0.1rem;</div><div class="line">            outline: 0;</div><div class="line">            font-size: 0.2rem;</div><div class="line">            margin: 0 0.5rem;</div><div class="line">        &#125;</div><div class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"main"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"html-source width-2 fl"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"img/timg.jpeg"</span> <span class="attr">class</span>=<span class="string">"width-2"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">"html-text"</span>&gt;</span>图片描述文字<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"option-content fl"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">"button start-to-do"</span>&gt;</span>转换<span class="tag">&lt;/<span class="name">button</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"png-content"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"js/jquery-3.2.1.min.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"js/html2canvas.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"js/canvas2image.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="javascript"></span></div><div class="line">    <span class="keyword">var</span> page = &#123;</div><div class="line">        <span class="attr">init</span>: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">            <span class="keyword">this</span>.initDom();</div><div class="line">            <span class="keyword">this</span>.initEvent();</div><div class="line">        &#125;,</div><div class="line">        <span class="attr">initDom</span>: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">            <span class="keyword">this</span>.$el = &#123;&#125;;</div><div class="line">            <span class="keyword">this</span>.$el.$startBtn = $(<span class="string">'.start-to-do'</span>);</div><div class="line">            <span class="keyword">this</span>.$el.$htmlSource = $(<span class="string">'.html-source'</span>);</div><div class="line">            <span class="keyword">this</span>.$el.$pngContent = $(<span class="string">'.png-content'</span>);</div><div class="line">        &#125;,</div><div class="line">        <span class="attr">initEvent</span>: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">            <span class="keyword">var</span> me = <span class="keyword">this</span>;</div><div class="line">            <span class="keyword">this</span>.$el.$startBtn.on(<span class="string">'click'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">                <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">2</span>; i &lt; <span class="number">8</span>; i++) &#123;</div><div class="line">                    me.initSavePng(i * <span class="number">0.5</span>);</div><div class="line">                &#125;</div><div class="line">            &#125;);</div><div class="line">        &#125;,</div><div class="line">        <span class="attr">initSavePng</span>: <span class="function"><span class="keyword">function</span>(<span class="params">N</span>) </span>&#123;</div><div class="line">            <span class="keyword">var</span> me = <span class="keyword">this</span>;</div><div class="line">            <span class="keyword">var</span> sourceContent = me.$el.$htmlSource;</div><div class="line">            <span class="keyword">var</span> width = sourceContent.width();</div><div class="line">            <span class="keyword">var</span> height = sourceContent.height();</div><div class="line">            <span class="keyword">var</span> offsetTop = sourceContent.offset().top;</div><div class="line">            <span class="keyword">var</span> offsetLeft = sourceContent.offset().left;</div><div class="line">            <span class="keyword">var</span> canvas = <span class="built_in">document</span>.createElement(<span class="string">"canvas"</span>);</div><div class="line">            <span class="keyword">var</span> canvas2D = canvas.getContext(<span class="string">"2d"</span>);</div><div class="line"></div><div class="line">            <span class="comment">// 不能小于1，否则图片不完整</span></div><div class="line">            <span class="keyword">var</span> scale = N;</div><div class="line">            canvas.width = (width + offsetLeft) * scale;</div><div class="line">            canvas.height = (height + offsetTop) * scale;</div><div class="line">            canvas2D.scale(scale, scale);</div><div class="line">            canvas2D.font = <span class="string">"Microsoft YaHei"</span>;</div><div class="line">            <span class="keyword">var</span> options = &#123;</div><div class="line"></div><div class="line">                <span class="comment">//检测每张图片都已经加载完成</span></div><div class="line">                tainttest:<span class="literal">true</span>,</div><div class="line">                <span class="attr">canvas</span>: canvas,</div><div class="line">                <span class="attr">scale</span>: scale,</div><div class="line"></div><div class="line">                <span class="comment">//dom 放大的宽度，放大倍数和清晰度在一定范围内成正相关</span></div><div class="line">                width: width + offsetLeft,</div><div class="line"></div><div class="line">                <span class="comment">// 开启日志，可以方便调试</span></div><div class="line">                logging: <span class="literal">true</span>,</div><div class="line"></div><div class="line">                <span class="comment">//dom 放大的宽度，放大倍数和清晰度在一定范围内成正相关</span></div><div class="line">                height: height + offsetTop</div><div class="line">            &#125;;</div><div class="line">            html2canvas(sourceContent, options).then(<span class="function"><span class="keyword">function</span> (<span class="params">canvas</span>) </span>&#123;</div><div class="line">                <span class="keyword">var</span> img = <span class="built_in">window</span>.Canvas2Image.convertToPNG(canvas, width * scale, height * scale);</div><div class="line">                me.$el.$pngContent.append(img);</div><div class="line"></div><div class="line">                <span class="comment">// 将图片恢复到原始大小</span></div><div class="line">                me.$el.$pngContent.find(<span class="string">'img'</span>).css(&#123;</div><div class="line">                    <span class="attr">width</span>: width,</div><div class="line">                    <span class="attr">height</span>: height</div><div class="line">                &#125;);</div><div class="line">            &#125;);</div><div class="line">        &#125;</div><div class="line">    &#125;;</div><div class="line"></div><div class="line">    page.init();</div><div class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure>
<p>完整示例代码git地址：<a href="https://github.com/huanlifen/html2image" target="_blank" rel="external">https://github.com/huanlifen/html2image</a></p>
<h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><p>1.<a href="https://github.com/niklasvh/html2canvas" target="_blank" rel="external">原版html2canvas</a><br>2.<a href="https://github.com/omwteam/html2canvas" target="_blank" rel="external">优化版html2canvas 0.5.0-beta4</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;如何将HTML保存成高清图片？本文带你一探究竟。&lt;br&gt;
    
    </summary>
    
      <category term="huanglifen" scheme="http://xgfe.github.io/categories/huanglifen/"/>
    
    
      <category term="html2canvas" scheme="http://xgfe.github.io/tags/html2canvas/"/>
    
      <category term="canvas2image" scheme="http://xgfe.github.io/tags/canvas2image/"/>
    
      <category term="html2image" scheme="http://xgfe.github.io/tags/html2image/"/>
    
  </entry>
  
  <entry>
    <title>ES6项目构建</title>
    <link href="http://xgfe.github.io/2017/08/28/DaisyXL/ES6/"/>
    <id>http://xgfe.github.io/2017/08/28/DaisyXL/ES6/</id>
    <published>2017-08-27T16:00:00.000Z</published>
    <updated>2017-09-22T03:58:49.000Z</updated>
    
    <content type="html"><![CDATA[<p>本文主要结合自己学习ES6的过程，说明了如何从零开始搭建一个ES6前端框架，并在大家都很关注的彩票业务中进行应用。</p>
<a id="more"></a>
<h1 id="前言：为什么要使用ES6？"><a href="#前言：为什么要使用ES6？" class="headerlink" title="前言：为什么要使用ES6？"></a>前言：为什么要使用ES6？</h1><p>ECMAScript6，又叫ECMAScript 2015，和ES3以及ES5的区别大概就像下面这个图一样，ES6相对早先几个版本有更加强大的生产力，能够提高开发效率。<br><img src="https://p0.meituan.net/dpnewvc/98edd093d4e832cd1c7bcfdfd2f699d8277917.png" width="1000px" height="300px"></p>
<h1 id="ES6一些比较好的特性"><a href="#ES6一些比较好的特性" class="headerlink" title="ES6一些比较好的特性"></a>ES6一些比较好的特性</h1><p><strong>1.默认参数</strong><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//ES5</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">hello</span>(<span class="params">txt</span>) </span>&#123;</div><div class="line">    txt = txt || <span class="string">'hello world'</span>;</div><div class="line">&#125;</div><div class="line"><span class="comment">//ES6</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">hello</span>(<span class="params">txt = <span class="string">'hello'</span></span>) </span>&#123;</div><div class="line">    <span class="comment">//减少了代码冗余</span></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p><strong>2.字符串模版</strong><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//ES5-引用underscore这个第三方库实现</span></div><div class="line"><span class="keyword">var</span> compiled = _.template(<span class="string">"hello: &lt;%= name %&gt;"</span>);</div><div class="line">compiled(&#123;<span class="attr">name</span>: <span class="string">'xueningjiejie'</span>&#125;);</div><div class="line"><span class="comment">//ES6</span></div><div class="line"><span class="keyword">var</span> name = <span class="string">'xnjj'</span>;</div><div class="line"><span class="keyword">var</span> txt = <span class="string">`hello <span class="subst">$&#123;name&#125;</span>`</span>;</div></pre></td></tr></table></figure></p>
<p>当然，这篇文章不是一篇讲解ES6特性的文章，因此不会一一陈述，那么ES6还有哪些特性呢？<br>1.解构赋值： 改变了参数赋值和变量赋值的形式，使赋值方式更加多样。<br>2.箭头函数<br>3.Set和Map<br>4.异步操作，如Promise()<br>5.类和对象<br>6.模块化<br>…<br>想要了解更多具体特性，请认真研读阮一峰的<a href="http://es6.ruanyifeng.com/" target="_blank" rel="external">ECMAScript 6入门</a> </p>
<h1 id="项目构建"><a href="#项目构建" class="headerlink" title="项目构建"></a>项目构建</h1><p>ES6是无法直接在浏览器中运行的，因此想要实现一个ES6工程并在浏览器中看到实现效果，需要先进行项目构建。</p>
<p><strong>1 基础架构</strong><br><img src="https://p1.meituan.net/dpnewvc/dcb6af4925ecdda34fa5ab6452b969ad99150.png" width="800px" height="350px"></p>
<p>模块说明：</p>
<ul>
<li>业务逻辑<br>  写页面，表现为html,js,css，通过js实现和服务器端进行交互</li>
<li>自动构建-编译<br>  把ES6的代码根据需要编译成ES5或ES3（需要兼容IE8以下低级浏览器的时候）的代码。         </li>
<li>自动构建-辅助<br>  实现修改代码自动刷新网页（livereload）  文件合并资源压缩（js,css,图片→base64编码）</li>
<li>服务接口<br>  后端服务器提供数据和接口</li>
<li>mock接口<br>  用于开发阶段纯前端的交互测试</li>
</ul>
<p><strong>2 任务自动化（gulp）</strong><br>定义：减少人工操作，让电脑自动监听操作，记性响应，提高效率。<br>作用：自动化处理sass／less转化为css的编译过程，文件合并，模块依赖，文件压缩。<br>gulp：自动化工具，替代之前流行grant，通过stream流操作使得级联操作非常块，完成任务自动化，顺畅工作流，由nodejs开发。</p>
<p><strong>gulp</strong> 使用说明</p>
<pre>(全局安装）<code>$ npm instal --global gulp</code></pre>
<pre>(项目安装）<code>$ npm install --save-dev gulp</code></pre>
<pre>(根目录创建gulpfile.js/gulpfile.babel.js）<code>$ touch gulpfile.js</code></pre>

<p>gulpfile.js文件内容<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> gulp = <span class="built_in">require</span>(<span class="string">'gulp'</span>);</div><div class="line">gulp.task(<span class="string">'default'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line"></div><div class="line">&#125;);</div></pre></td></tr></table></figure></p>
<pre>(运行）<code>$ gulp</code></pre>
<pre>(运行并监听）<code>$ gulp --watch</code></pre>

<p>具体使用说明可以阅读<a href="http://www.gulpjs.com.cn/" target="_blank" rel="external">gulp中文文档</a></p>
<p><strong>3 编译工具（ babel, webpack ）</strong> </p>
<p>babel：js编译器，把ES6代码编译成ES5代码。<br>webpack：处理模块化，项目依赖的关系，import实现。<br>webpack-stream—webpack：对gulp对支持。</p>
<p><strong>4 代码实现</strong> </p>
<p>1.创建ES6前端工程,并创建三个并行模块：</p>
<ul>
<li><strong>app</strong></li>
<li><strong>server</strong></li>
<li><strong>tasks</strong></li>
</ul>
<p>2.app目录为前端项目代码，包含<strong>html</strong>（模板页面）,<strong>js</strong>（交互实现）,<strong>css</strong>（样式）<br><em>ps.1:这里的模版页面创建的不是html页面，而是ejs文件，是因为实战工程的服务器端代码是通过express这个nodejs框架创建的。</em><br><em>ps.2:js目录下的index.js文件为入口脚本文件，同样的views目录下的index.ejs为入口模板文件。</em></p>
<p>3.server为服务器端目录，这里面我们使用<strong>nodejs</strong>来写服务器端代码。<br>在server目录下执行下面命令,在当前目录使用ejs模板引擎,如果执行express出错，先检查下是否已经安装nodejs，并install了express脚手架。</p>
<pre><code>express -e .
npm install
</code></pre>

<p>4.task为构建工具目录</p>
<ul>
<li>util–放置常见脚本的目录<br>   args.js–定义gulp命令行脚本 .option就是定义gulp -<em>*</em>中对内容  .argv表示输入对命令行以字符串形式进行解析</li>
<li>scripts.js–构建脚本，通过gulp对js文件进行重命名，压缩和存放  脚本服务文件</li>
<li>pages.js–模板脚本</li>
<li>server.js–服务器脚本</li>
<li>css.js–监听样式脚本</li>
<li>browser.js–浏览器自动监听变化并编译到指定文件夹</li>
<li>clean.js–编译前情况文件夹</li>
<li>build.js–把所有脚本关联起来，编排执行顺序</li>
<li>default.js–默认执行的任务</li>
</ul>
<p>5.使用npm自动生成package.json文件，有这个文件就可以使用npm来获取依赖包了</p>
<pre><code>npm init</code></pre>

<p>6.创建设置babel编译工具的文件.babelrc</p>
<p>7.创建gulp的配置文件gulpfile.babel.js</p>
<p><em>ps.2:官网上给的是创建gulpfile.js,是ES5使用的，但是当前工程是ES6工程，使用官网给出的文件名运行gulp命令会报错。</em></p>
<figure class="highlight md"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="strong">**最终目录结构**</span></div><div class="line">app</div><div class="line"><span class="code">    js--交互实现</span></div><div class="line"><span class="code">        class--类</span></div><div class="line"><span class="code">            test.js</span></div><div class="line"><span class="code">        index.js</span></div><div class="line"><span class="code">    css--样式</span></div><div class="line"><span class="code">    views--模板页面</span></div><div class="line"><span class="code">        error.ejs</span></div><div class="line"><span class="code">        index.ejs</span></div><div class="line">server</div><div class="line">tasks</div><div class="line"><span class="code">    util</span></div><div class="line"><span class="code">        args.js</span></div><div class="line"><span class="code">    scripts.js</span></div><div class="line"><span class="code">    pages.js</span></div><div class="line"><span class="code">    server.js</span></div><div class="line"><span class="code">    css.js</span></div><div class="line"><span class="code">    browser.js</span></div><div class="line"><span class="code">    clean.js</span></div><div class="line"><span class="code">    build.js</span></div><div class="line"><span class="code">    default.js</span></div><div class="line">package.json</div><div class="line">.babelrc</div><div class="line">gulpfile.babel.js</div></pre></td></tr></table></figure>
<p>这里没有粘贴每个配置文件的内容，若需要可以克隆<a href="https://github.com/DaisyGXL/Lemmon-tree.git" target="_blank" rel="external">https://github.com/DaisyGXL/Lemmon-tree.git</a> 仓库的地址获取搭建好的工程es6-project查看具体配置文件，其中我对每个文件的配置和依赖包的用处进行了注释说明。</p>
<p>8.通过<code>npm install <em>*</em> –save-dev</code>命令把涉及到的依赖包依赖到本地，并添加到package.json文件中，可以通过<code>gulp</code>命令检查是否有使用的依赖包没有更新到本地,直到命令行输出下面内容为止，ES6工程基本搭建完成。</p>
<p><pre><code>➜  es6 git:(master) gulp<br>[16:53:30] Requiring external module babel-register<br>[16:53:31] Using gulpfile ~/works/es6/gulpfile.babel.js<br>[16:53:31] Starting ‘build’…<br>[16:53:31] Starting ‘clean’…<br>[16:53:31] Finished ‘clean’ after 10 ms<br>[16:53:31] Starting ‘css’…<br>[16:53:31] Finished ‘css’ after 16 ms<br>[16:53:31] Starting ‘pages’…<br>[16:53:31] Finished ‘pages’ after 17 ms<br>[16:53:31] Starting ‘scripts’…<br>[16:53:31] Version: webpack 3.5.5<br>   Asset     Size  Chunks             Chunk Names<br>index.js  2.94 kB       0  [emitted]  index<br>[16:53:31] Finished ‘scripts’ after 290 ms<br>[16:53:31] Starting ‘browser’…<br>[16:53:31] Finished ‘browser’ after 92 μs<br>[16:53:31] Starting ‘serve’…<br>[16:53:31] Finished ‘serve’ after 77 μs<br>[16:53:31] Finished ‘build’ after 338 ms<br>[16:53:31] Starting ‘default’…<br>[16:53:31] Finished ‘default’ after 25 μs</code></pre><br>从输出可以看出，gulp执行的顺序，build –&gt; clean –&gt; css –&gt; pages –&gt; scripts，那么为什么会按照这样的顺序执行呢？<br>我们前面创建了一个gulpfile.babel.js，在文件中指定了gulp运行时，先进入task目录。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">requireDir(<span class="string">'./tasks'</span>);</div></pre></td></tr></table></figure></p>
<p>那么，gulp 会进入task目录寻找一个叫做default.js的文件,该文件中指定了启动时默认要执行的脚本build，也就是编译脚本。在build.js这个文件中，我们来编排编译步骤，即是上面运行的这种步骤。<br><img src="https://p1.meituan.net/dpnewvc/ba5a70a25d75752961db41f1b315cb7627416.png" width="520px" height="260px"><br>9.无报错后，通过gulp –watch使服务处于监听状态,运行出现最后一行，则启动并监听成功。</p>
<p><pre><code>➜  es6 git:(master) gulp –watch<br>[17:02:49] Requiring external module babel-register<br>[17:02:50] Using gulpfile ~/works/es6/gulpfile.babel.js<br>[17:02:50] Starting ‘build’…<br>[17:02:50] Starting ‘clean’…<br>[17:02:50] Finished ‘clean’ after 9.31 ms<br>[17:02:50] Starting ‘css’…<br>[17:02:50] Finished ‘css’ after 16 ms<br>[17:02:50] Starting ‘pages’…<br>[17:02:50] Finished ‘pages’ after 16 ms<br>[17:02:50] Starting ‘scripts’…<br>[17:02:50] Version: webpack 3.5.5<br>   Asset     Size  Chunks             Chunk Names<br>index.js  2.94 kB       0  [emitted]  index<br>[17:02:50] Finished ‘scripts’ after 281 ms<br>[17:02:50] Starting ‘browser’…<br>[17:02:50] Starting ‘serve’…<br>livereload[tiny-lr] listening on 35729 …</code></pre></p>
<p>至此，前端开发框架已经搭建好了，编辑index.ejs模板页面显示内容，通过localhost：3000访问</p>
<p>然而，我们发现，有一些ES6的项目网页依赖了livereload包却并不能自动进行刷新，仍然需要手动去刷新，也就是自动构建中的辅助功能未得到实现。<br>那么检查一下在server目录中的app.js中是否缺少这样一行代码：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">app.use(<span class="built_in">require</span>(<span class="string">'connect-livereload'</span>)());</div></pre></td></tr></table></figure></p>
<p>最后，因为学习那段时间身边的小伙伴们都很沉迷彩票，就简单做了个彩票业务的demo，有些逻辑还没有写完，后面会不断完善。<br>git仓库地址：<a href="https://github.com/DaisyGXL/Lemmon-tree.git" target="_blank" rel="external">https://github.com/DaisyGXL/Lemmon-tree.git</a>  工程名：cp-project</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本文主要结合自己学习ES6的过程，说明了如何从零开始搭建一个ES6前端框架，并在大家都很关注的彩票业务中进行应用。&lt;/p&gt;
    
    </summary>
    
      <category term="DaisyXL" scheme="http://xgfe.github.io/categories/DaisyXL/"/>
    
    
      <category term="javascript" scheme="http://xgfe.github.io/tags/javascript/"/>
    
      <category term="ES6" scheme="http://xgfe.github.io/tags/ES6/"/>
    
  </entry>
  
  <entry>
    <title>基于React-Native及Redux的Immutable.js引入</title>
    <link href="http://xgfe.github.io/2017/07/10/lulutia/immutable-RN-Redux/"/>
    <id>http://xgfe.github.io/2017/07/10/lulutia/immutable-RN-Redux/</id>
    <published>2017-07-10T12:07:00.000Z</published>
    <updated>2017-09-22T06:11:01.000Z</updated>
    
    <content type="html"><![CDATA[<p>本文主要介绍了如何对RN项目进行render count的优化，着重介绍了Immutable.js及其如何与Redux和React Native融合。</p>
<a id="more"></a>
<h4 id="前菜之背景介绍"><a href="#前菜之背景介绍" class="headerlink" title="前菜之背景介绍"></a>前菜之背景介绍</h4><p>话说某天，楼主吃着火锅唱着歌，逛到了React的Performance Tools版块，心血来潮，放到了手上的项目里面玩了玩，看完后整个人都不太好了，数据如下(我一页屏幕都截不完……)：<br><img src="http://okzzg7ifm.bkt.clouddn.com/immutable-oldPref.png?" alt="性能图"><br>但实际上我所执行的操作仅仅只是为颜色外观打了个分，如下所示：<br><img src="http://okzzg7ifm.bkt.clouddn.com/immutable-coperation.png" alt="操作图"></p>
<p>根据上面的统计数据，初略计算了下，一个打分操作render count为293。一个页面必填5个打分项，如此一来总共render count  &gt;= 1465，其中还排除了用户打分完毕后继续修改的情况。不用我说，大家也能看出这是一个相当不合理的数字。因为就理想状况而言，打分操作最多只影响当前的打分项，一个打分组件五颗星，其具体结构如下所示:</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">&lt;View key=&#123;i&#125;&gt;</div><div class="line">      <span class="xml"><span class="tag">&lt;<span class="name">TouchableOpacity</span></span></span></div><div class="line">        <span class="attr">style</span>=<span class="string">&#123;&#123;marginTop:</span> <span class="attr">5</span>, <span class="attr">marginRight:</span> <span class="attr">5</span>&#125;&#125;</div><div class="line">        <span class="attr">onPress</span>=<span class="string">&#123;()</span> =&gt;&#123;......&#125;</div><div class="line">        &gt;</div><div class="line">        <span class="tag">&lt;<span class="name">IconFont</span> <span class="attr">name</span>=<span class="string">"star"</span> <span class="attr">size</span>=<span class="string">&#123;StyleSheet.r(22)&#125;</span> <span class="attr">color</span>=<span class="string">&#123;color&#125;/</span>&gt;</span></div><div class="line">      <span class="tag">&lt;/<span class="name">TouchableOpacity</span>&gt;</span></div><div class="line"> <span class="tag">&lt;/<span class="name">View</span>&gt;</span></div></pre></td></tr></table></figure>
<p>因此直接改变量为3*5=15是比较合理，再加上全局的Navar以及connect等操作，render count达到293也是绝对不合理且，通过分析，我们可以看到有很多数据根本没改变的组件也被重新渲染了的，这部分开销完全是不必要且有相当大的改进空间的。既然如此，我们来改进下吧~</p>
<p>为了减少环境变量且便于修改与测试，我们基于种子项目来模拟当前的状况。种子项目在React Native官方项目基础上集成了Redux进行数据处理，除此之外还提供了一些基本的工具函数及路由封装。<br>我们构造了两个页面，点击第一个页面的button会跳转到第二个页面，在第二个页面会从服务器端获取数据，渲染成列表形式，除此之外在列表上方有一个button，它会记录点击次数并且展示出来。大概布局如下：<br><img src="http://okzzg7ifm.bkt.clouddn.com/immutable-exampleLayout.png?imageView2/2/w/500/h/500/q/100|watermark/2/text/bHVsdXRpYQ==/font/5a6L5L2T/fontsize/240/fill/IzAwMDAwMA==/dissolve/20/gravity/SouthEast/dx/10/dy/10|imageslim" alt="demo图"></p>
<p>既然是模拟前文的情况，那我们可以预测点击addCount button后，整个列表应该是被重新渲染了的，虽然他的数据实际上并没有变化，讲道理是不应该重新渲染的。实际结果如下图所示，的确和我们的预测一样，List下的Text render count是不必要的。<br><img src="http://okzzg7ifm.bkt.clouddn.com/immutable-examplePref.png?" alt="demo性能图"></p>
<p>这里有一个点要注意，所谓的重新渲染指的是在virtual dom层面的。下图是整个渲染过程开始到结束的主要流程，而本文关心的是下图黄色框中的部分，而重中之重是黄色框中的第三部: 其后代组件执行Update。<br><img src="http://okzzg7ifm.bkt.clouddn.com/immutable-setstate.png?" alt="渲染过程"></p>
<p>因为我们采用Redux进行数据处理，每个页面的initailState为一个对象，而从不直接修改state 是Redux 的核心理念之一，所以触发action后reducer返回的是一个新的对象。这一流程相当于执行了setState操作，因此整个页面开始执行dirty的标记，因为是新对象，所以几乎所有与state相关的组件及其后代组件都要执行Update的流程，如果我们不对Update的流程进行特殊定制，则shouldComponentUpdate默认返回true，之后执行render函数。因此，出现了上述中多次不必要render的情况。<br>所以，首要任务是添加shouldComponentUpdate函数进行处理。但是这里会有两个明显的问题：</p>
<ul>
<li>每个页面，甚至每个组件的state，props结构不一样，很难有统一的对比函数</li>
<li>state，props的结构可能很复杂，一步步的循环迭代对比对性能的消耗可能很大</li>
</ul>
<p>针对shouldComponentUpdate，React提供了PureRenderMixin的方式来进行处理，但是这种方式其进行的只是浅对比，如果是复杂数据结构的深层次不一样，它也可能返回false。因此只能处理简单的数据结构，或者针对开发者对整个state层次有完全的把握，能够在深层次变化后显示调用this.forceUpdate()的情况。显然与我们的需求不符。此时，本文的主题Immutable.js终于要出场了。</p>
<h4 id="主菜之Immutable-js介绍"><a href="#主菜之Immutable-js介绍" class="headerlink" title="主菜之Immutable.js介绍"></a>主菜之Immutable.js介绍</h4><p>讨论Immutable.js之前，我们首先看看啥叫Immutable。来，看看维基百科的定义：</p>
<blockquote>
<p>In object-oriented and functional programming, an immutable object is an object whose state cannot be modified after it is created.This is in contrast to a mutable object (changeable object), which can be modified after it is created.</p>
</blockquote>
<ul>
<li><p>需要解决的问题</p>
<ul>
<li><p>减少复杂性，增加代码的可控性</p>
<p>  对于immutable object在创建后就再也不能修改了，而mutable object却可以修改，举个很简单的栗子：</p>
  <figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> fruit = &#123;<span class="attr">apple</span>: <span class="number">1</span>&#125;;</div><div class="line">friuit.apple = <span class="number">2</span>;</div><div class="line">fruit; <span class="comment">// &#123;apple: 2&#125;</span></div></pre></td></tr></table></figure>
<p>  上面这种特性在频繁需要修改原对象的时候特别好用，可以节约内存。但是这种灵活性往往以可控性为代价，多处使用中的任意一处修改都会影响所有的使用，比如下面的栗子：</p>
  <figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> animal = &#123;<span class="attr">dog</span>: <span class="number">1</span>&#125;;</div><div class="line">changeAnimalCount(animal);</div><div class="line">animal; <span class="comment">// ?</span></div></pre></td></tr></table></figure>
<p>  经过函数调用后，我们谁都不知道animal变成了啥样 = =。处理这种情况，我们往往需要执行深拷贝，然后在拷贝出的对象上执行操作，这样可以保证数据的可控性，但这个又往往以内存的大量使用为代价。特别不巧的是，我们的项目中还真的有很多地方用到了深拷贝，并且为了这个操作引入了extend库。因此，如何在花费很少的情况下对state的状态做一个很好的记录成为了一个问题。</p>
</li>
<li><p>减少UI框架中View层与Model层的耦合</p>
<p>  在我们进行应用交互时，我们相当关注状态的改变，因为状态的改变意味着我们需要做哪些UI层面的变动，这部分是数据驱动的。简单的说，我们可能实现下面的代码：</p>
  <figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> storeData = &#123;<span class="attr">key</span>: <span class="string">'before'</span>&#125;;</div><div class="line">renderUI(storeData);</div><div class="line">getDataFromServer(url, ()=&gt;&#123;</div><div class="line">	renderUI(storeData);</div><div class="line">&#125;)</div></pre></td></tr></table></figure>
<p>  但是上面这种情况造成的问题是，也许和服务器交互后的数据根本没有改变，然而我们要执行UI渲染。或者的确执行了UI渲染，但是我们并不知道是具体的哪块数据进行了变动。因此我们可能改良出下面的代码：</p>
  <figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> storeData = &#123;<span class="attr">key</span>: <span class="string">'before'</span>&#125;;</div><div class="line">renderUI(storeData);</div><div class="line"><span class="built_in">Object</span>.observer(storeData, (changes) =&gt; &#123;</div><div class="line">	renderUI(storeData, changes);</div><div class="line">&#125;)</div><div class="line">getDataFromServer(url);</div></pre></td></tr></table></figure>
<p>  这种情况下，我们通过Object.observer()来对数据进行监听，这样至少我们知道哪些数据进行了变化。但是这种情况下依然有问题，因为Object.observer()执行的只是第一层的比较，因此如果是深层次的变化它依然没法处理。同时，如果数据变化频繁的情况下，它也做了很多的无用功，毕竟我们只关心最后的状态。因此现在的做法基本是使用如下所示的：</p>
  <figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> data = &#123;</div><div class="line">	<span class="attr">dirty</span>: <span class="literal">false</span>,</div><div class="line">	<span class="attr">_raw</span>: &#123;<span class="attr">key</span>: <span class="string">'value'</span>&#125;,</div><div class="line">	<span class="attr">get</span>: <span class="function"><span class="keyword">function</span> (<span class="params">key</span>) </span>&#123;</div><div class="line">		...</div><div class="line">	&#125;,</div><div class="line">	<span class="attr">set</span>: <span class="function"><span class="keyword">function</span> (<span class="params">key, newValue</span>) </span>&#123;</div><div class="line">		...</div><div class="line">		this.dirty = <span class="literal">true</span>;</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">renderUI</span>(<span class="params">data</span>) </span>&#123;</div><div class="line">	<span class="keyword">if</span> (!data.dirty) &#123;<span class="keyword">return</span>;&#125;</div><div class="line">	data.dirty = <span class="literal">false</span>;</div><div class="line">	...</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>  但是这种情况如果同时对一个状态进行多种渲染，因为在第一个渲染中已经改变了dirty的状态，这样并不会调用第二个渲染，如下：</p>
  <figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">...</div><div class="line">renderTop(data);</div><div class="line">renderBottom(data);</div></pre></td></tr></table></figure>
<p>  因此，既然每一个render都要执行dirty状态的检测，所以可以建立一个UI框架，将这层检测包裹进去，而不用使用者自己来做。但这样一来Model层和View层就耦合了。因此，如何在不对MV进行强耦合的情况下对数据的变化进行监听成为了一个问题。</p>
</li>
<li><p>处理缓存</p>
<p>  当我们在处理一些消耗很大的操作时，我们可能希望将之前的结果存储起来而不是每一次都重新计算。比如像下面这样：</p>
  <figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">expensiveCoperation</span>(<span class="params"></span>) </span>&#123;</div><div class="line">	...</div><div class="line">&#125;</div><div class="line"><span class="keyword">let</span> data = memorize(expensiveCoperation);</div><div class="line"><span class="keyword">let</span> initialData = ...;</div><div class="line">data(initialData);</div></pre></td></tr></table></figure>
<p>  市面上有很多对于memorize的实现，比如下面这个：</p>
  <figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">memorize</span>(<span class="params">fn</span>) </span>&#123;</div><div class="line">	<span class="keyword">let</span> cache = &#123;&#125;;</div><div class="line">	<span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params">arg</span>) </span>&#123;</div><div class="line">		<span class="keyword">let</span> hash = arg === <span class="built_in">Object</span>(arg) ? <span class="built_in">JSON</span>.stringify(arg) : currentArg;</div><div class="line">		<span class="keyword">return</span> hash <span class="keyword">in</span> cache ? cache[hash] : (cache[hash] = fn.call(<span class="keyword">this</span>, arg));</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>  但是上面这种实现里面的JSON.stringify()是一个O(n)的操作，当数据量够大时，执行这个函数的操作说不定还没有不执行的快。在具体实现中也许我们可以简化这个操作，只对比前一次的输入和这一次的输入，只关心前一次的结果和这一次的结果。此时我们便可以不必使用JSON.stringify了。实际上React中的shouldComponentUpdate就是只对前一次状态和这一次状态进行对比。但对比时我们其实进行的是值的对比而不是引用的对比。所以缓存性能的提高最后落脚点到如何快速进行值的比较。因此，如何对复杂结构的值进行对比成为了一个问题。</p>
</li>
</ul>
</li>
<li><p>解决办法</p>
<p>  针对以上问题，Immutable.js提出了一下几个解决方案：</p>
<ul>
<li><p>持久化结构数据</p>
<p>所谓持久化结构数据即Persistent data structire，我们来看维基百科的定义：</p>
<blockquote>
<p>In computing, a persistent data structure is a data structure that always preserves the previous version of itself when it is modified. Such data structures are effectively immutable, as their operations do not (visibly) update the structure in-place, but instead always yield a new updated structure.</p>
</blockquote>
<p>我们如果用时间流的概念来看这个问题，即每一次改变都保存了一个类似快照的东西，之后的改变并不会影响之前的快照。这样我们就能够对state的变化做一个很好的记录，解决了上面的第一个问题。但是你可能会担心这样等于说是进行拷贝，会耗费很多内存，因此请看下面的解决方案。</p>
</li>
<li><p>结构共享</p>
<p>当我们使用一个新的值时，我们希望能够尽量复用老值不变的部分，因为这样意味着少量的copy操作和少量的内存使用。数据结构中的有向无环图可以实现这个需求。但是JS中基本的数据结构Array和Object显然都不是用DAG[Directed Acyclic Graph]实现的。因此Immutable.js等于用Trie自己实现了一套数据结构。基本的思路如下：</p>
<p><img src="http://okzzg7ifm.bkt.clouddn.com/immutable-share.png" alt="结构共享"><br>每个节点都有自己的hashCode，因此比较两个对象时，实际就是比较其hashCode，这样就避免了深度遍历。</p>
</li>
<li><p>惰性加载</p>
<p>在Immutable.js中提供了Seq来执行惰性加载。Seq执行最小的工作来对任何方法作出反应。比如：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> oddSquares = Seq([ <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span> ])</div><div class="line">  .filter(<span class="function"><span class="params">x</span> =&gt;</span> x % <span class="number">2</span>)</div><div class="line">  .map(<span class="function"><span class="params">x</span> =&gt;</span> x * x)</div><div class="line">  <span class="built_in">console</span>.log(oddSquares.get(<span class="number">1</span>)); <span class="comment">//9</span></div></pre></td></tr></table></figure>
<p>上面这个例子filter将只会执行三次，而map只会执行一次。这种特性对于处理大型数据相当有用。</p>
</li>
<li><p>其他</p>
<p>  Immutable的特性意味着它特别适合用于多线程开发，它避免了很多不必要的锁的存在。虽然这点对于现在的JS没啥作用，但谁知道未来呢，毕竟多核已经越来越普遍。</p>
</li>
</ul>
</li>
<li><p>基本API</p>
<p>  Immutable.js主要提供了下面几种数据类型：</p>
<ul>
<li>List：类似Array</li>
<li>Map：类似Object</li>
<li>OrderedMap：在Map的基础上根据set顺序进行排序</li>
<li>Set： 类似ES6中的Set</li>
<li>OrderedSet：在Set的基础上根据add顺序进行排序</li>
<li>Stack：有序集合，进行unshift和shift的操作复杂度为O(1)</li>
<li>Range(start, end, step)：返回Seq.Indexed类型数据的集合</li>
<li>Repeat(value, times)：返回Seq.Indexed类型的数据集合，重复times生成value值</li>
<li>Record：；类似ES6中的Class，细节上不同</li>
<li>Seq：序列</li>
<li>Iterable：可以被迭代的key，value集合，是其他所有集合的基类</li>
<li><p>Collection：抽象类，无法直接构建此类型</p>
<p>其中最常用的是List和Map。</p>
</li>
<li><p>常用API：</p>
<ul>
<li><p>fromJS(): 最常用的将原生JS数据转换为Immutable数据的转换方法</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> data = Immutable.from(&#123;<span class="attr">a</span>: &#123;<span class="attr">b</span>: [<span class="number">10</span>, <span class="number">11</span>]&#125;&#125;);</div></pre></td></tr></table></figure>
</li>
<li><p>toJS(): 将Immutable数据转换为原生JS</p>
</li>
<li><p>set()</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> originalList = List([ <span class="number">0</span> ]);</div><div class="line"><span class="comment">// List [ 0 ]</span></div><div class="line">originalList.set(<span class="number">1</span>, <span class="number">1</span>);</div><div class="line"><span class="comment">// List [ 0, 1 ]		</span></div><div class="line">List().set(<span class="number">50000</span>, <span class="string">'value'</span>).size;</div><div class="line"><span class="comment">// 50001</span></div></pre></td></tr></table></figure>
</li>
<li><p>setIn(): 进行深度赋值</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> list = List([ <span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, List([ <span class="number">3</span>, <span class="number">4</span> ])])</div><div class="line">list.setIn([<span class="number">3</span>, <span class="number">0</span>], <span class="number">999</span>);</div><div class="line"><span class="comment">// List [ 0, 1, 2, List [ 999, 4 ] ]</span></div></pre></td></tr></table></figure>
</li>
<li><p>get()</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> list = List([ <span class="number">0</span> ]);</div><div class="line"><span class="keyword">let</span> value = list.get(<span class="number">0</span>); <span class="comment">// 0</span></div></pre></td></tr></table></figure>
</li>
<li><p>getIn(): 进行深度取值</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> list = List([ <span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, List([ <span class="number">3</span>, <span class="number">4</span> ])]);</div><div class="line"><span class="keyword">let</span> value = list.getIn([<span class="number">3</span>, <span class="number">0</span>]); <span class="comment">// 3</span></div></pre></td></tr></table></figure>
</li>
<li><p>is(): 进行值对比[对于复杂对象其实是hashCode的对比]</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> map1 = <span class="built_in">Map</span>(&#123; <span class="attr">a</span>: <span class="number">1</span>, <span class="attr">b</span>: <span class="number">1</span>, <span class="attr">c</span>: <span class="number">1</span> &#125;)</div><div class="line"><span class="keyword">const</span> map2 = <span class="built_in">Map</span>(&#123; <span class="attr">a</span>: <span class="number">1</span>, <span class="attr">b</span>: <span class="number">1</span>, <span class="attr">c</span>: <span class="number">1</span> &#125;)</div><div class="line">assert(map1 !== map2)</div><div class="line">assert(<span class="built_in">Object</span>.is(map1, map2) === <span class="literal">false</span>)</div><div class="line">assert(is(map1, map2) === <span class="literal">true</span>)</div></pre></td></tr></table></figure>
<p>除了上面这些，Immutable.js基本提供了所有的对应原生操作的方法，具体见<a href="https://facebook.github.io/immutable-js/docs/#/List/getIn" target="_blank" rel="external">这里</a></p>
</li>
</ul>
</li>
</ul>
</li>
</ul>
<h4 id="甜点之具体集成到RN-Redux的项目中"><a href="#甜点之具体集成到RN-Redux的项目中" class="headerlink" title="甜点之具体集成到RN+Redux的项目中"></a>甜点之具体集成到RN+Redux的项目中</h4><p>在第一点中我们分析了遇到的优化点，在第二点中我们讲解了能进行优化的工具，现在我们来进行具体的优化。</p>
<ul>
<li><p>combineReducers的切换<br>  我们之前combineReducers用的是Redux提供的，但是它只能处理原生JS，所以我们需要引入redux-immutable，它提供的combineReducers可以处理Immutable数据</p>
  <figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> &#123;createStore, applyMiddleware, compose&#125; <span class="keyword">from</span> <span class="string">'redux'</span>;</div><div class="line"><span class="keyword">import</span> &#123;combineReducers&#125; <span class="keyword">from</span> <span class="string">'redux-immutable'</span>;</div><div class="line">...</div><div class="line">export <span class="keyword">default</span> (data = Immutable.Map(&#123;&#125;)) =&gt; &#123;</div><div class="line">  <span class="keyword">const</span> rootReducer = combineReducers(&#123;</div><div class="line">    <span class="attr">route</span>: routeReducer,</div><div class="line">    <span class="attr">modules</span>: combineReducers(reducers)</div><div class="line">  &#125;);</div><div class="line"></div><div class="line">  <span class="keyword">return</span> createStore(rootReducer, data, middleware);</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
</li>
<li><p>每个Reducer的初始化数据也应该采用Immutable数据</p>
  <figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> initialState = Immutable.Map(&#123;</div><div class="line">  <span class="attr">dataList</span>: Immutable.List([]),</div><div class="line">  <span class="attr">count1</span>: <span class="number">0</span></div><div class="line">&#125;);</div></pre></td></tr></table></figure>
</li>
<li><p>与服务端数据的交互在第获取一时间转换为Immutable数据，在发送第一时间转化为原生数据</p>
  <figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">return</span> fetch(url).then(<span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</div><div class="line">     <span class="keyword">return</span> res.json();</div><div class="line">   &#125;, (er) =&gt; &#123;<span class="built_in">console</span>.log(er);&#125;).then(<span class="function">(<span class="params">data</span>) =&gt;</span> &#123;</div><div class="line">     data = Immutable.fromJS(data || &#123;&#125;);</div><div class="line">     dispatch(&#123;</div><div class="line">       <span class="attr">type</span>: GETDATA_END,</div><div class="line">       <span class="attr">payload</span>: &#123;</div><div class="line">         <span class="attr">dataList</span>: data.get(<span class="string">'data'</span>)</div><div class="line">       &#125;</div><div class="line">     &#125;);</div><div class="line">   &#125;, (error) =&gt; &#123;</div><div class="line">     <span class="built_in">console</span>.log(error);</div><div class="line">     dispatch(&#123;</div><div class="line">       <span class="attr">type</span>: GETDATA_BEGIN</div><div class="line">     &#125;);</div><div class="line">   &#125;);</div></pre></td></tr></table></figure>
<p>  这里需要注意以下两点：</p>
<ul>
<li>如果使用安卓模拟器，且使用localhost的数据，需要直接填写localhost的ip地址。因为模拟器有自己的localhost ip，如果直接用localhost就指向了它提供的地址，而不是本机的地址了</li>
<li><p>如果使用iOS模拟器，其请求的是http协议的地址，需要在info.plist开启对http的支持，如下：</p>
  <figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">&lt;key&gt;NSAppTransportSecurity&lt;/key&gt;</div><div class="line">    &lt;dict&gt;</div><div class="line">      &lt;key&gt;NSAllowsArbitraryLoads&lt;/key&gt;</div><div class="line">      &lt;true/&gt;</div><div class="line">     &lt;/dict&gt;</div></pre></td></tr></table></figure>
</li>
</ul>
</li>
<li><p>因为Persistent data structire，Reducer返回的数据不用新建一个对象了</p>
  <figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">[GETDATA_END]: <span class="function">(<span class="params">state, action</span>) =&gt;</span> &#123;</div><div class="line">   <span class="keyword">const</span> &#123;dataList&#125; = action.payload;</div><div class="line">   <span class="keyword">return</span> state.set(<span class="string">'dataList'</span>, dataList);</div><div class="line"> &#125;,</div></pre></td></tr></table></figure>
</li>
<li><p>shouldComponentUpdate可以进行统一处理了</p>
</li>
</ul>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line">shouldComponentUpdate(nextProps, nextState) &#123;</div><div class="line">  <span class="keyword">const</span> thisProps = <span class="keyword">this</span>.props || &#123;&#125;;</div><div class="line">  <span class="keyword">const</span> thisState = <span class="keyword">this</span>.state || &#123;&#125;;</div><div class="line">  nextState = nextState || &#123;&#125;;</div><div class="line">  nextProps = nextProps || &#123;&#125;;</div><div class="line"></div><div class="line">  <span class="keyword">if</span> (<span class="built_in">Object</span>.keys(thisProps).length !== <span class="built_in">Object</span>.keys(nextProps).length ||</div><div class="line">    <span class="built_in">Object</span>.keys(thisState).length !== <span class="built_in">Object</span>.keys(nextState).length) &#123;</div><div class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="keyword">for</span> (<span class="keyword">const</span> key <span class="keyword">in</span> nextProps) &#123;</div><div class="line">    <span class="keyword">if</span> (!Immutable.is(thisProps[key], nextProps[key])) &#123;</div><div class="line">      <span class="keyword">return</span> <span class="literal">true</span>;</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="keyword">for</span> (<span class="keyword">const</span> key <span class="keyword">in</span> nextState) &#123;</div><div class="line">    <span class="keyword">if</span> (!Immutable.is(thisState[key], nextState[key])) &#123;</div><div class="line">      <span class="keyword">return</span> <span class="literal">true</span>;</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">  <span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li><p>函数的传递方式需要注意</p>
<p>  如果每次render时都是重新声明的函数，则其对比会有问题，因为is()内部对函数的对比是基于ValueOf的，所以将下面的第一种方式改为第二种方式：</p>
  <figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&lt;TouchableOpacity onPress=&#123;() =&gt; <span class="keyword">this</span>.addCount()&#125; style=&#123;Style.btnContainer&#125;&gt;</div><div class="line">     <span class="xml"><span class="tag">&lt;<span class="name">Text</span> <span class="attr">style</span>=<span class="string">&#123;Style.btnWord&#125;</span>&gt;</span>addCount<span class="tag">&lt;/<span class="name">Text</span>&gt;</span></span></div><div class="line"> &lt;<span class="regexp">/TouchableOpacity&gt;</span></div></pre></td></tr></table></figure>
  <figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&lt;TouchableOpacity onPress=&#123;<span class="keyword">this</span>.addCount&#125; style=&#123;Style.btnContainer&#125;&gt;</div><div class="line">      <span class="xml"><span class="tag">&lt;<span class="name">Text</span> <span class="attr">style</span>=<span class="string">&#123;Style.btnWord&#125;</span>&gt;</span>addCount<span class="tag">&lt;/<span class="name">Text</span>&gt;</span></span></div><div class="line">  &lt;<span class="regexp">/TouchableOpacity&gt;</span></div></pre></td></tr></table></figure>
</li>
</ul>
<p>经过上面这些改造后，我们的demo文件Render count如下所示，很好，楼主又可以欢快的吃火锅啦：<br><img src="http://okzzg7ifm.bkt.clouddn.com/immutable-after.png?" alt="优化之后"></p>
<h4 id="酒水之利弊介绍"><a href="#酒水之利弊介绍" class="headerlink" title="酒水之利弊介绍"></a>酒水之利弊介绍</h4><ul>
<li>优<ul>
<li>能便利的进行时间溯洄，便于状态的把控与调试</li>
<li>结构共享，节约内存</li>
<li>并发安全</li>
<li>能抽象出统一的对比函数</li>
<li>Model与View耦合度不高</li>
</ul>
</li>
<li>缺<ul>
<li>有学习成本</li>
<li>容易与原生函数混淆，并且原生函数一旦重写可能会导致问题</li>
<li>资源大小增加</li>
<li>跨页面数据同步方式会有变动，之前页面间进行引用传递，在B页面进行的修改会自动呈现到A页面，但是现在是Persistent data structire，因此B页面的改动A页面无感，需要特殊的触发机制来进行状态同步</li>
<li>因为并非原生的数据结构，所以像解构这种用法需要引入特殊的库后才能使用</li>
</ul>
</li>
</ul>
<h4 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h4><ul>
<li><a href="https://www.youtube.com/watch?v=I7IdS-PbEgI&amp;feature=youtu.be" target="_blank" rel="external">React.js Conf 2015 - Immutable Data and React</a></li>
<li><a href="https://facebook.github.io/react/docs/optimizing-performance.html" target="_blank" rel="external">Optimizing Performance</a></li>
<li><a href="http://facebook.github.io/immutable-js/" target="_blank" rel="external">Immutable.js</a></li>
<li><a href="https://juejin.im/post/5948985ea0bb9f006bed7472" target="_blank" rel="external">Immutable.js 以及在 react+redux 项目中的实践</a></li>
<li><a href="https://zhuanlan.zhihu.com/p/20295971?columnSlug=purerender" target="_blank" rel="external">Immutable 详解及 React 中实践</a></li>
<li><a href="http://stylechen.com/react-and-immutable.html" target="_blank" rel="external">从 React 的组件更新谈 Immutable 的应用</a></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本文主要介绍了如何对RN项目进行render count的优化，着重介绍了Immutable.js及其如何与Redux和React Native融合。&lt;/p&gt;
    
    </summary>
    
      <category term="lulutia" scheme="http://xgfe.github.io/categories/lulutia/"/>
    
    
      <category term="React Native" scheme="http://xgfe.github.io/tags/React-Native/"/>
    
      <category term="React" scheme="http://xgfe.github.io/tags/React/"/>
    
      <category term="optimization" scheme="http://xgfe.github.io/tags/optimization/"/>
    
  </entry>
  
  <entry>
    <title>React Native 学习系列二</title>
    <link href="http://xgfe.github.io/2017/06/28/lulutia/reactnative02/"/>
    <id>http://xgfe.github.io/2017/06/28/lulutia/reactnative02/</id>
    <published>2017-06-28T14:03:12.000Z</published>
    <updated>2017-09-22T06:11:01.000Z</updated>
    
    <content type="html"><![CDATA[<p>本文是React Native学习系列的第二篇，主要介绍了JSX、生命周期、以ScrollView为例讲解了官方组件、以BackHandler为例讲解了官方API。</p>
<a id="more"></a>
<h3 id="JSX"><a href="#JSX" class="headerlink" title="JSX"></a>JSX</h3><ul>
<li><p>什么是JSX</p>
<blockquote>
<p>It is called JSX, and it is a syntax extension to JavaScript. We recommend using it with React to describe what the UI should look like. JSX may remind you of a template language, but it comes with the full power of JavaScript.JSX produces React “elements”.</p>
</blockquote>
<ul>
<li>我们可以看见两个关键点：<ol>
<li>它是JS的语法扩展(我们可以理解我为它就是一个比较高级的语法糖)</li>
<li>与模板语言不一样，它能利用JS自带的语法和特性。因此基本会写JS就能写JSX，学习成本低，并且能利用JS本身的语法</li>
<li>React基于Virtual DOM创造的JSX，JSX创造的是React element，它不是真正的DOM，因此也意味着在没有真正DOM的情况下，它也能模拟DOM的行为(React-Native中实际也没有真正的DOM)</li>
</ol>
</li>
<li><p>具体行为</p>
<ul>
<li><p>以react举例下面两段代码完全一致：</p>
  <figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> p1 = React.createElement(<span class="string">'p'</span>, <span class="literal">null</span>, <span class="string">'my test'</span>)</div><div class="line"><span class="keyword">var</span> root = React.createElement(<span class="string">'div'</span>, &#123; <span class="attr">className</span>: <span class="string">'root-div'</span> &#125;, p1);</div></pre></td></tr></table></figure>
  <figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> root = (</div><div class="line">	<span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">'root-div'</span>&gt;</span></span></div><div class="line">		<span class="tag">&lt;<span class="name">p</span>&gt;</span>my test<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">)</div></pre></td></tr></table></figure>
</li>
<li><p>JSX之后会被专门的解释器解释为JS(在打包阶段就完成了，因此不会有性能上的问题)再执行</p>
</li>
</ul>
</li>
</ul>
</li>
<li><p>JSX语法</p>
<ul>
<li><p>在JSX中你可以使用{}来包裹JS表达式，下面以RN来举例</p>
  <figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&#123;refundDetailData.return.returnPics &amp;&amp; <span class="xml"><span class="tag">&lt;<span class="name">View</span> <span class="attr">style</span>=<span class="string">&#123;[Style.basicLayout,</span> <span class="attr">Style.image</span>]&#125;&gt;</span></span></div><div class="line">   	<span class="tag">&lt;<span class="name">Text</span> <span class="attr">style</span>=<span class="string">&#123;[Style.textColor,</span> <span class="attr">Style.navTitle</span>]&#125;&gt;</span>图片信息:<span class="tag">&lt;/<span class="name">Text</span>&gt;</span></div><div class="line">   	<span class="tag">&lt;<span class="name">ImageShow</span> <span class="attr">picUrls</span>=<span class="string">&#123;refundDetailData.return.returnPics&#125;/</span>&gt;</span></div><div class="line"> 	<span class="tag">&lt;/<span class="name">View</span>&gt;</span>&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>JSX本身也是一种表达式，因此可以在if语句，for循环等各种场合中使用</p>
  <figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">dataList.map(<span class="function">(<span class="params">item, index</span>) =&gt;</span> (</div><div class="line">  <span class="xml"><span class="tag">&lt;<span class="name">TouchableHighlight</span> <span class="attr">key</span>=<span class="string">&#123;index&#125;</span>&gt;</span></span></div><div class="line">    <span class="tag">&lt;<span class="name">View</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">Text</span>&gt;</span>&#123;item.contactName&#125;<span class="tag">&lt;/<span class="name">Text</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">Text</span>&gt;</span>&#123;item.contactTel&#125;<span class="tag">&lt;/<span class="name">Text</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">View</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">TouchableHighlight</span>&gt;</span></div><div class="line">));</div></pre></td></tr></table></figure>
</li>
<li><p>JSX可以定义属性，一般每个组件都会接受一组属性(props)</p>
<ul>
<li>属性的名字可以自定义</li>
<li>属性的值能够是变量，当属性值是变量时需要通过{}包裹起来，此时注意如果在这个大括号外层用双引号包裹，则此时整条语句会作为字符串进行解析，而不是变量了</li>
<li>虽然JSX与HTML有很多类似处，但是其最后还是编译为JS的，因此，在React DOM中的属性名是遵循驼峰命名法的</li>
<li><p>当忽略属性的值时，JSX会按照true来对待它。而不使用属性时，其对应的值与组件实现内部默认值有关</p>
  <figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">&#123;<span class="comment">/*下面两条代码实现的效果一样*/</span>&#125;</div><div class="line">&lt;Input type=<span class="string">"button"</span> disabled /&gt;;</div><div class="line">&lt;Input type="button" disabled=&#123;true&#125; /&gt;;</div><div class="line"></div><div class="line">&#123;/*下面两条代码实现的效果一样*/&#125;</div><div class="line">&lt;Input type="button" /&gt;;</div><div class="line">&lt;Input type="button" disabled=&#123;false&#125; /&gt;;</div></pre></td></tr></table></figure>
</li>
</ul>
</li>
<li><p>JSX标签能够包含子元素就如HTML一样，而且其子元素也可以运用JS的语法进行构建</p>
</li>
<li><p>JSX中的注释就如JS类似，但是需要注意当在子元素中进行注释时，需要用{}将注释包裹起来</p>
  <figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">&lt;Nav&gt;</div><div class="line">   &#123;<span class="comment">/* child comment, put &#123;&#125; around */</span>&#125;</div><div class="line">   &lt;Person</div><div class="line">     <span class="comment">/* multi</span></div><div class="line">        line</div><div class="line">        comment */</div><div class="line">     name=&#123;<span class="built_in">window</span>.isLoggedIn ? <span class="built_in">window</span>.name : <span class="string">''</span>&#125; <span class="comment">// end of line comment</span></div><div class="line">   /&gt;</div><div class="line"> <span class="xml"><span class="tag">&lt;/<span class="name">Nav</span>&gt;</span></span></div></pre></td></tr></table></figure>
</li>
<li><p>JSX中的事件处理是直接绑定在组件上的，下面以RN为例</p>
  <figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&lt;TouchableHighlight style=&#123;Style.tabBtn&#125; underlayColor=&#123;Colors.yellowLighten&#125;onPress=&#123;<span class="keyword">this</span>.goToReturnList&#125;&gt;</div><div class="line">  <span class="xml"><span class="tag">&lt;<span class="name">Text</span> <span class="attr">style</span>=<span class="string">&#123;Style.tabBtnText&#125;</span>&gt;</span>退货单<span class="tag">&lt;/<span class="name">Text</span>&gt;</span></span></div><div class="line">&lt;<span class="regexp">/TouchableHighlight&gt;</span></div></pre></td></tr></table></figure>
<ul>
<li><p>相比于使用下面这种方式，界面元素和业务逻辑的耦合会更加明显</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$(<span class="string">'#my-button'</span>).on(<span class="string">'click'</span>, <span class="keyword">this</span>.checkAndSubmit.bind(<span class="keyword">this</span>));</div></pre></td></tr></table></figure>
</li>
<li><p>在JSX中，需要注意事件名依然按照驼峰命名法来进行，而大括号中就是事件触发时返回的事件处理函数。JSX中绑定的事件自动进行了解绑处理，当对应的DOM不存在时，其绑定的事件就自动解绑了。</p>
</li>
<li>React有一个模拟事件系统。它并不会将事件绑定到真正的节点上，当React启动时，他开始在顶层用一个单独的事件监听器来监听所有的事件。当一个组件加载或者移除时，它绑定的事件将在一个内置的映射上被添加或者移除。当事件真正触发时，React知道如何运用这个映射来dispatch这个事件。</li>
<li>虽然整个事件系统由React来管理了，但是其API和使用方法与原生事件一致。因此做到了浏览器的兼容。</li>
</ul>
</li>
</ul>
</li>
</ul>
<h3 id="生命周期"><a href="#生命周期" class="headerlink" title="生命周期"></a>生命周期</h3><ul>
<li>在React中，组件只是一种状态机，整个UI的渲染可以算做是状态驱动的。你更新一个组件的状态，然后根据新的状态渲染UI，React会以一种最效率的方式来更新DOM</li>
<li>大多数组件只需要根据传入的props里面的数据进行渲染，属性是在组件初始化之后就从父级组件带入到组件内部。我们无法在使用的过程中对组件的属性进行修改。但是当需要对用户输入，时间的流逝，服务端请求作出反应时，需要用state来进行状态记录，state是实际上组件中使用的数据，它可以被修改</li>
<li>在React中，通过调用setState(data, callback)来告诉它数据变动了，这个方法将data合并进this.state，之后告诉组件状态变动了需要进行重新渲染，callback会在重新渲染完毕后被调用。注意setState()这个方法是异步的，同步的多个setState方法只会触发一次实际render</li>
<li><p>组件在实例化之后就开始了它的生命周期过程。它的整个生命周期主要由以下几个部分组成:</p>
<ul>
<li><p>getDefaultProps():在组件类创建的时候调用<strong>一次</strong>，然后返回值被缓存下来, 它返回的任何复杂对象用于设置默认的props, 并且这些将会在实例间共享，而不是每个实例拥有一份拷贝，具体使用见<a href="https://facebook.github.io/react/docs/react-without-es6.html#declaring-prop-types-and-default-props" target="_blank" rel="external">这里</a>。注意只能在子组件或组件树上调用setProps<a href="https://facebook.github.io/react/blog/2015/10/07/react-v0.14.html#new-deprecations-introduced-with-a-warning" target="_blank" rel="external">已经deprecated了</a>。别调用this.setProps或者直接修改this.props。可以通propTypes对props的类型进行验证</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">static</span> propTypes = &#123;</div><div class="line">   <span class="attr">data</span>: PropTypes.object,</div><div class="line">   <span class="attr">pickerNameStyle</span>: Text.propTypes.style</div><div class="line">  &#125;;</div></pre></td></tr></table></figure>
</li>
<li><p>getInitialState():在组件挂载之前调用<strong>一次</strong>。返回值将会作为 this.state的初始值。这个方法执行时已经可以访问组件的props。注意state是每个组件自带的，而props是所有实例共享的</p>
</li>
<li>componentWillMount():在初始化渲染执行之前立刻调用，且只调用一次，这是渲染前最后修改state的机会</li>
<li>render():render方法返回的结果并不是真正的DOM元素，而是一个虚拟的表现，类似于一个DOM tree的结构的对象。它是唯一一个必须的方法。在这个方法中，会检测this.props和this.state，返回一个单子级组件,当然也可以返回null或者false。render函数不应该修改state,操作DOM或者与浏览器交互</li>
<li><p>componentDidMount():在初始化渲染执行之后立刻调用一次,在生命周期中的这个时间点，组件拥有一个DOM展现[即虚拟DOM构建完毕]，你可以通过this.getDOMNode()来获取相应DOM节点。当需要从组件获取真实DOM的节点，可以使用ref属性。注意在RN中，是先调用子组件的componentDidMount()，然后调用父组件的函数。这个函数之后，就进入了稳定运行状态，等待事件触发</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">......</div><div class="line">return &lt;canvas ref=<span class="string">'mainCanvas'</span>&gt;</div><div class="line">......</div><div class="line">componentDidMount: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    <span class="keyword">var</span> canvas = <span class="keyword">this</span>.refs.mainCanvas.getDOMNode();</div><div class="line">    <span class="comment">//可以访问到 Canvas 节点</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>componentWillReceiveProps():用此函数可以作为react在props传入之后，render()渲染之前更新state的机会,新的props是传入的,老的props可以通过this.props来获取。注意在该函数中调用this.setState()将不会引起二次渲染</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">componentWillReceiveProps: <span class="function"><span class="keyword">function</span>(<span class="params">nextProps</span>) </span>&#123;</div><div class="line">	<span class="keyword">this</span>.setState(&#123;</div><div class="line">	    <span class="attr">likesIncreasing</span>: nextProps.likeCount &gt; <span class="keyword">this</span>.props.likeCount</div><div class="line">	&#125;);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>shouldComponentUpdate():在接收到新的props或者state,将要渲染之前调用。如果shouldComponentUpdate返回false,则render()将不会执行,直到下一次state改变。(通过此函数可以提高性能)</p>
</li>
<li>componentWillUpdate():和componentWillMount类似,在组件接收到了新的props或者state即将进行重新渲染前调用,注意你不能在该方法中使用this.setState()。如果需要更新state来响应某个prop的改变,请使用componentWillReceiveProps。紧接着这个函数，就会调用render()来更新界面了</li>
<li>componentDidUpdate():和componentDidMount类似,使用该方法可以在组件更新之后操作DOM元素</li>
<li><p>componentWillUnmount():当组件从DOM中移除的时候立刻调用来完成所有的清理和销毁工作,在conponentDidMount中添加的任务都需要再该方法中撤销,如创建的定时器或事件监听器</p>
<p><img src="http://okzzg7ifm.bkt.clouddn.com/reactlife.png" alt="lifeCycle"></p>
</li>
</ul>
</li>
</ul>
<h3 id="运行组件UI-example"><a href="#运行组件UI-example" class="headerlink" title="运行组件UI example"></a>运行组件UI example</h3><ul>
<li>运行官方案例(即在虚拟机上查看RN各个组件的实际效果)<ul>
<li><a href="https://github.com/facebook/react-native#examples" target="_blank" rel="external">运行方法</a></li>
<li>运行过程中可能出现的问题<ul>
<li>What went wrong: Execution failed for task ‘:ReactAndroid:buildReactNdkLib’. <ul>
<li><a href="http://stackoverflow.com/questions/36209774/unable-to-run-react-native-uiexplorer-example-project" target="_blank" rel="external">解决办法</a></li>
</ul>
</li>
<li>安卓新项目起不来<ul>
<li>解决办法: 注意下是不是老项目的shell还在运行，需要重新编译链接一次</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ul>
<h3 id="官方组件举例"><a href="#官方组件举例" class="headerlink" title="官方组件举例"></a>官方组件举例</h3><ul>
<li><p>ScrollView</p>
<ul>
<li>ScrollView是一个普通的可滚动容器，它能包含多个组件和View。</li>
<li>ScrollView能纵向滚动也能横向滚动</li>
<li>ScrollView一般用来展示限制尺寸的少量东西。因为所有ScrollView里面的元素和组件都会被渲染，不管它当前是否展示在屏幕上。</li>
<li>ScrollView必须有一个确定的高度才能正常工作，因为滚动的本质就是将一系列不确定高度的子组件装进一个确定高度的容器</li>
<li><p>属性</p>
<ul>
<li>contentContainerStyle：传入的样式属性，其作为样式会应用在包裹所有子元素的内容元素容器上</li>
<li><p>horizontal：确定横向还是纵向滚动，默认为false，即默认纵向滚动</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">&lt;ScrollView style=&#123;styles.listTab&#125; horizontal&gt; </div><div class="line">      &#123;<span class="keyword">this</span>.level.map(<span class="function">(<span class="params">item, index</span>) =&gt;</span> &#123;</div><div class="line">        <span class="keyword">return</span> (</div><div class="line">          <span class="xml"><span class="tag">&lt;<span class="name">View</span> <span class="attr">style</span>=<span class="string">&#123;styles.tabTextContainer&#125;</span> <span class="attr">key</span>=<span class="string">&#123;index&#125;</span>&gt;</span></span></div><div class="line">            <span class="tag">&lt;<span class="name">Text</span>&gt;</span>&#123;item&#125;<span class="tag">&lt;/<span class="name">Text</span>&gt;</span></div><div class="line">          <span class="tag">&lt;/<span class="name">View</span>&gt;</span></div><div class="line">          )</div><div class="line">      &#125;)&#125;         </div><div class="line">     &lt;<span class="regexp">/ScrollView&gt;</span></div></pre></td></tr></table></figure>
</li>
<li><p>keyboardDismissMode：决定当拖拽时，键盘是否消失</p>
<ul>
<li>none：默认，拖拽不会让键盘消失</li>
<li>on-drag：当拖拽开始时，键盘消失</li>
<li>interactive：安卓上不支持，键盘伴随拖拽操作同步地消失，并且如果往上滑动会恢复键盘</li>
</ul>
</li>
<li>keyboardShouldPersistTaps：决定当点击时，键盘是否可见。这个属性特别重要。比如ScrollView里面有很多输入框时，我们希望点击输入框是输入框本身拿到事件，而键盘并不会在切换时进行关闭再打开的操作。<ul>
<li>never：默认，当点击文本输入框之外时，如果键盘是打开的则关闭键盘。当这个发生时，子元素将不会接收到点击事件</li>
<li>always：键盘将不会自动关闭，并且scroll view不会捕捉到点击事件，但是子元素能够捕捉到点击事件</li>
<li>handle：键盘将不会自动关闭当点击是由子元素触发的</li>
<li>false：用never替代</li>
<li>true：用always替代</li>
</ul>
</li>
<li><p>onContentSizeChange：当滚动视图的内容尺寸大小发生变化的时候调用</p>
  <figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">this.level = ['我常买', '热卖', '一级类目', '鸡腿系列', '海鲜系列', '鸭制品系列'];</div><div class="line">...</div><div class="line">&lt;TouchableHighlight onPress=&#123;() =&gt; &#123;this.level.pop(); this.forceUpdate();&#125;&#125;&gt;</div><div class="line">     &lt;View style=&#123;styles.button&#125; &gt;</div><div class="line">       &lt;Text style=&#123;styles.add&#125;&gt;+&lt;/Text&gt;</div><div class="line">     &lt;/View&gt;</div><div class="line">   &lt;/TouchableHighlight&gt;</div><div class="line">   ...</div><div class="line">   &lt;ScrollView style=&#123;styles.listTab&#125; horizontal onContentSizeChange=&#123;(contentWidth, contentHeight) =&gt; &#123;console.debug(contentWidth, contentHeight);&#125;&#125;&gt; </div><div class="line">      &#123;this.level.map((item, index) =&gt; &#123;</div><div class="line">        return (</div><div class="line">          &lt;View style=&#123;styles.tabTextContainer&#125; key=&#123;index&#125;&gt;</div><div class="line">            &lt;Text&gt;&#123;item&#125;&lt;/Text&gt;</div><div class="line">          &lt;/View&gt;</div><div class="line">          )</div><div class="line">      &#125;)&#125;         </div><div class="line">      &lt;/ScrollView&gt;</div></pre></td></tr></table></figure>
<p>  <img src="http://okzzg7ifm.bkt.clouddn.com/contentSizechange.png" alt="life"></p>
</li>
<li>onScroll：该方法在滚动的时候每frame(帧)调用一次，调用的频率可以用scrollEventThrottle属性来控制。当滚动到边界后无法触发</li>
<li>refreshControl：一个refreshControl组件，主要在下拉刷新时使用</li>
<li>pagingEnabled：默认false，当为true时，scroll view会停留在其尺寸的倍数的位置。这个能够被用在在横向翻页。具体表现就是，超过Scroll View尺寸一点时页面会自动会回退回去，超过很多但是尚未到达其尺寸两倍的位置，则会向前到达其两倍尺寸的位置，之后如此类推</li>
<li>removeClippedSubviews：默认为true，在ScrollView视图之外的子视图(该视图的overflow属性值必须要为hidden)会被暂时移除，该设置可以提高滚动的性能</li>
<li>scrollEnabled：默认true，当为false时，内容不会滚动</li>
<li>showsHorizontalScrollIndicator：默认true，当为true时，横向滚动会展示滑条</li>
<li>showsVerticalScrollIndicator：默认true，当为true时，纵向滚动会展示滑条</li>
</ul>
</li>
<li>仅Android支持的属性:<ul>
<li>endFillColor：当滚动内容没填充满Scroll View时设定填充不满的区域</li>
<li>scrollPerfTag：在Scroll View上记录滚动性能的标签</li>
</ul>
</li>
<li>仅iOS支持的属性:<ul>
<li>alwaysBounceHorizontal：横向弹簧效果，当horizontal ={true}默认是true，horizontal={false}默认是false</li>
<li>alwaysBounceVertical：纵向弹簧效果，当horizontal ={true}默认是false，horizontal={false}默认是true</li>
<li>automaticallyAdjustContentInsets：默认true，自动调节内容内偏移，控制是否自动调节内容内偏移以便于一个navigation bar或者tab bar或者toolbar不挡住Scrollview中的内容</li>
<li>bounces：默认true，控制水平方向与垂直方向的弹簧效果，优先级比alwaysBounce* 属性高</li>
<li>bouncesZoom：控制拉近与缩小超过限制时是否有弹性动画，当为true时有</li>
<li>canCancelContentTouches：默认true，控制ScrollView是否可以拖动，如果为false不能拖动</li>
<li>centerContent：默认false，为true时如果ScrollView中内容小于ScrollView的边界，则它们自动居中，超过边界时无效</li>
<li>contentInset：内部内容距离ScrollView边界的内偏移量，默认为{top: 0, left: 0, bottom: 0, right: 0}</li>
<li>contentOffset：用来手动设置起始滚动偏移量。默认为 {x: 0,y: 0} </li>
<li>decelerationRate：指定手指抬起减速速率<ul>
<li>normal: 0.998，为默认</li>
<li>fast: 0.99</li>
<li>也可以指定一个浮点数，确定减速快慢</li>
</ul>
</li>
<li>directionalLockEnabled：默认false，为true时控制只有一个方向可以滚动当拖拽</li>
<li>indicatorStyle：指示器样式，default与black相同，black与白色背景搭配，white与黑色背景搭配</li>
<li>maximumZoomScale：默认是1.0，放大的最大系数</li>
<li>minimumZoomScale：默认是1.0，缩小的最大系数</li>
<li>onScrollAnimationEnd：滚动动画完成后触发</li>
<li>scrollEventThrottle：控制滚动时滚动事件触发频率</li>
<li>scrollIndicatorInsets： {top: number, left: number, bottom: number, right: number}，指定指示器内偏移量，应与contentInset值相同，默认{0, 0, 0, 0}</li>
<li>scrollsToTop：默认true，默认true时，Scroll View滚动到顶部当状态条被点击时</li>
<li>snapToAlignment：当snapToInterval指定时，这个属性定义这个停驻点相对于Scroll View的关系。<ul>
<li>start (默认) 会将停驻点对齐在左侧（水平）或顶部（垂直）</li>
<li>center 会将停驻点对齐到中间</li>
<li>end 会将停驻点对齐到右侧（水平）或底部（垂直）</li>
</ul>
</li>
<li>snapToInterval：当指定时，会导致Scroll View停留在这个参数的倍数的位置。这个属性一般与snapToAlignment一起用</li>
<li>stickyHeaderIndices：子元素索引构成的数组，用来指定滚动时这些元素停靠到界面的顶部，比如传递stickyHeaderIndices={[0]}将让第一个子元素固定到Scroll View的顶部。当horizontal={true}时，这个属性不支持</li>
<li>zoomScale：当前Scroll View内容的缩放比例</li>
</ul>
</li>
<li>方法<ul>
<li>scrollTo()：例如scrollTo({x: 0; y: 0; animated: true})，滚动到指定的x, y偏移处。第三个参数为是否启用平滑滚动动画</li>
<li>scrollToEnd()：如果是纵向的滚动，则滚动到底部，如果是横向，则滚动到右部</li>
</ul>
</li>
</ul>
</li>
</ul>
<h3 id="官方API举例"><a href="#官方API举例" class="headerlink" title="官方API举例"></a>官方API举例</h3><ul>
<li><p>BackHandler</p>
<ul>
<li><p>监听硬件的back键操作。如果没有任何监听函数，或者监听函数的返回值不是true，则会调用默认的back键功能来退出应用</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">this</span>.backAndroidListener = BackHandler.addEventListener(<span class="string">'hardwareBackPress'</span>, () =&gt; &#123;</div><div class="line">	<span class="keyword">if</span> (navigator.getCurrentRoutes().length &gt; <span class="number">1</span>) &#123;</div><div class="line">		navigator.pop();</div><div class="line">		<span class="keyword">return</span> <span class="literal">true</span>;</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">return</span> <span class="keyword">this</span>.onExitApp();</div><div class="line">   &#125;);</div></pre></td></tr></table></figure>
</li>
<li><p>方法：</p>
<ul>
<li>exitApp：当你在监听里面无法立刻判断是否要退出，比如你需要获取异步操作执行成功后再调用，此时可以用这个函数来退出</li>
<li>addEventListener：绑定监听函数</li>
<li>removeEventListener：移除监听函数</li>
</ul>
</li>
</ul>
</li>
</ul>
<h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><ul>
<li><a href="http://teropa.info/blog/2015/03/02/change-and-its-detection-in-javascript-frameworks.html" target="_blank" rel="external">Change And Its Detection In JavaScript Frameworks</a></li>
<li><a href="http://www.race604.com/react-native-component-lifecycle/" target="_blank" rel="external">React Native 中组件的生命周期</a></li>
<li><a href="https://davidwalsh.name/event-delegate" target="_blank" rel="external">How JavaScript Event Delegation Works</a></li>
<li><a href="http://www.infoq.com/cn/articles/react-jsx-and-component" target="_blank" rel="external">深入浅出React（三）：理解JSX和组件</a></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本文是React Native学习系列的第二篇，主要介绍了JSX、生命周期、以ScrollView为例讲解了官方组件、以BackHandler为例讲解了官方API。&lt;/p&gt;
    
    </summary>
    
      <category term="lulutia" scheme="http://xgfe.github.io/categories/lulutia/"/>
    
    
      <category term="React Native" scheme="http://xgfe.github.io/tags/React-Native/"/>
    
  </entry>
  
  <entry>
    <title>Looper和Handler和HandlerThread</title>
    <link href="http://xgfe.github.io/2017/06/26/zero/Looper%E5%92%8CHandler%E5%92%8CHandlerThread/"/>
    <id>http://xgfe.github.io/2017/06/26/zero/Looper和Handler和HandlerThread/</id>
    <published>2017-06-25T16:00:00.000Z</published>
    <updated>2017-09-12T08:43:59.000Z</updated>
    
    <content type="html"><![CDATA[<p>本文主要分析了Looper，Handler和HandlerThread的主要源码部分。</p>
<a id="more"></a>
<p>Looper主要成员变量是：<br>MessageQueue mQueue;<br>Thread mThread;<br>一个线程拥有一个Looper，一个Looper封装了MessageQueue和Thread，loop方法使消失队列循环起来了。loop中由Message关联的Handler执行对Message的处理,因为loop是执行在线程中的所以对消息的处理是在同一线程中执行的。  </p>
<pre><code class="java"><span class="function"><span class="keyword">private</span> <span class="title">Looper</span><span class="params">(<span class="keyword">boolean</span> quitAllowed)</span> </span>{
        mQueue = <span class="keyword">new</span> MessageQueue(quitAllowed);
        mThread = Thread.currentThread();
    }
<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">loop</span><span class="params">()</span> </span>{
        <span class="keyword">final</span> Looper me = myLooper();
        <span class="keyword">final</span> MessageQueue queue = me.mQueue;
            <span class="keyword">for</span> (;;) {
            Message msg = queue.next(); <span class="comment">// might block</span>
            <span class="keyword">if</span> (msg == <span class="keyword">null</span>) {
                <span class="comment">// No message indicates that the message queue is quitting.</span>
                <span class="keyword">return</span>;
            }
            msg.target.dispatchMessage(msg);
            msg.recycleUnchecked();
        }
</code></pre>
<h2 id="Handler"><a href="#Handler" class="headerlink" title="Handler"></a>Handler</h2><p>Handler执行对消息和Runnable的处理，如果post Runnable到队列中，是把Runnable赋值给Message的callback，然后直接执行它的run方法（参见handleCallback），如果sendMessage 到队列中，是先判断Handler的mCallback对消息的处理返回true时就不执行handleMessage，返回false时就执行handleMessage。Callback起到了对消息处理进行拦截的功能。<br>final MessageQueue mQueue;<br>final Looper mLooper;<br>public Handler(Looper looper)   </p>
<pre><code class="java"><span class="function"><span class="keyword">public</span> <span class="title">Handler</span><span class="params">(Looper looper, Callback callback, <span class="keyword">boolean</span> async)</span> </span>{
        mLooper = looper;
        mQueue = looper.mQueue;
        mCallback = callback;

<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">dispatchMessage</span><span class="params">(Message msg)</span> </span>{
        <span class="keyword">if</span> (msg.callback != <span class="keyword">null</span>) {
            handleCallback(msg);
        } <span class="keyword">else</span> {
            <span class="keyword">if</span> (mCallback != <span class="keyword">null</span>) {
                <span class="keyword">if</span> (mCallback.handleMessage(msg)) {
                    <span class="keyword">return</span>;
                }
            }
            handleMessage(msg);
        }
    }
<span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">boolean</span> <span class="title">post</span><span class="params">(Runnable r)</span>
    </span>{
       <span class="keyword">return</span>  sendMessageDelayed(getPostMessage(r), <span class="number">0</span>);
    }
<span class="function"><span class="keyword">private</span> <span class="keyword">static</span> Message <span class="title">getPostMessage</span><span class="params">(Runnable r)</span> </span>{
        Message m = Message.obtain();
        m.callback = r;
        <span class="keyword">return</span> m;
    }
<span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">handleCallback</span><span class="params">(Message message)</span> </span>{
        message.callback.run();
    }
</code></pre>
<h2 id="HandlerThread"><a href="#HandlerThread" class="headerlink" title="HandlerThread"></a>HandlerThread</h2><p>HandlerThread是一个封装了Looper的Thread。在消息循环前会先调用onLooperPrepared()。   </p>
<pre><code class="java"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>{
        mTid = Process.myTid();
        Looper.prepare();
        <span class="keyword">synchronized</span> (<span class="keyword">this</span>) {
            mLooper = Looper.myLooper();
            notifyAll();
        }
        Process.setThreadPriority(mPriority);
        onLooperPrepared();
        Looper.loop();
        mTid = -<span class="number">1</span>;
    }
</code></pre>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本文主要分析了Looper，Handler和HandlerThread的主要源码部分。&lt;/p&gt;
    
    </summary>
    
      <category term="zero" scheme="http://xgfe.github.io/categories/zero/"/>
    
    
      <category term="Android" scheme="http://xgfe.github.io/tags/Android/"/>
    
  </entry>
  
  <entry>
    <title>OKIO源码分析</title>
    <link href="http://xgfe.github.io/2017/06/26/zero/OKIO%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/"/>
    <id>http://xgfe.github.io/2017/06/26/zero/OKIO源码分析/</id>
    <published>2017-06-25T16:00:00.000Z</published>
    <updated>2017-09-12T08:43:59.000Z</updated>
    
    <content type="html"><![CDATA[<p>本文主要分析了OKIO源码中用到的Timeout，Buffer和设计模式。</p>
<a id="more"></a>
<h1 id="AsyncTimeout"><a href="#AsyncTimeout" class="headerlink" title="AsyncTimeout"></a>AsyncTimeout</h1><h2 id="AsyncTimeout源码"><a href="#AsyncTimeout源码" class="headerlink" title="AsyncTimeout源码"></a>AsyncTimeout源码</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Timeout</span> </span>&#123;</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title">waitUntilNotified</span><span class="params">(Object monitor)</span> <span class="keyword">throws</span> InterruptedIOException </span>&#123;</div><div class="line">    <span class="keyword">try</span> &#123;</div><div class="line">      <span class="keyword">boolean</span> hasDeadline = hasDeadline();</div><div class="line">      <span class="keyword">long</span> timeoutNanos = timeoutNanos();</div><div class="line"></div><div class="line">      <span class="keyword">if</span> (!hasDeadline &amp;&amp; timeoutNanos == <span class="number">0L</span>) &#123;</div><div class="line">        monitor.wait(); <span class="comment">// There is no timeout: wait forever.</span></div><div class="line">        <span class="keyword">return</span>;</div><div class="line">      &#125;</div><div class="line"></div><div class="line">      <span class="comment">// Compute how long we'll wait.</span></div><div class="line">      <span class="keyword">long</span> waitNanos;</div><div class="line">      <span class="keyword">long</span> start = System.nanoTime();</div><div class="line">      <span class="keyword">if</span> (hasDeadline &amp;&amp; timeoutNanos != <span class="number">0</span>) &#123;</div><div class="line">        <span class="keyword">long</span> deadlineNanos = deadlineNanoTime() - start;</div><div class="line">        waitNanos = Math.min(timeoutNanos, deadlineNanos);</div><div class="line">      &#125; <span class="keyword">else</span> <span class="keyword">if</span> (hasDeadline) &#123;</div><div class="line">        waitNanos = deadlineNanoTime() - start;</div><div class="line">      &#125; <span class="keyword">else</span> &#123;</div><div class="line">        waitNanos = timeoutNanos;</div><div class="line">      &#125;</div><div class="line"></div><div class="line">      <span class="comment">// Attempt to wait that long. This will break out early if the monitor is notified.</span></div><div class="line">      <span class="keyword">long</span> elapsedNanos = <span class="number">0L</span>;</div><div class="line">      <span class="keyword">if</span> (waitNanos &gt; <span class="number">0L</span>) &#123;</div><div class="line">        <span class="keyword">long</span> waitMillis = waitNanos / <span class="number">1000000L</span>;</div><div class="line">        monitor.wait(waitMillis, (<span class="keyword">int</span>) (waitNanos - waitMillis * <span class="number">1000000L</span>));</div><div class="line">        elapsedNanos = System.nanoTime() - start;</div><div class="line">      &#125;</div><div class="line"></div><div class="line">      <span class="comment">// Throw if the timeout elapsed before the monitor was notified.</span></div><div class="line">      <span class="keyword">if</span> (elapsedNanos &gt;= waitNanos) &#123;</div><div class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> InterruptedIOException(<span class="string">"timeout"</span>);</div><div class="line">      &#125;</div><div class="line">    &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</div><div class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> InterruptedIOException(<span class="string">"interrupted"</span>);</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">AsyncTimeout extends Timeout</div><div class="line"><span class="keyword">private</span> <span class="keyword">static</span> AsyncTimeout head</div><div class="line"><span class="keyword">private</span> <span class="keyword">boolean</span> inQueue;<span class="comment">//True if this node is currently in the queue</span></div><div class="line"><span class="keyword">private</span> AsyncTimeout next;</div><div class="line"><span class="keyword">private</span> <span class="keyword">long</span> timeoutAt;</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title">enter</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">if</span> (inQueue) <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(<span class="string">"Unbalanced enter/exit"</span>);</div><div class="line">    <span class="keyword">long</span> timeoutNanos = timeoutNanos();</div><div class="line">    <span class="keyword">boolean</span> hasDeadline = hasDeadline();</div><div class="line">    <span class="keyword">if</span> (timeoutNanos == <span class="number">0</span> &amp;&amp; !hasDeadline) &#123;</div><div class="line">      <span class="keyword">return</span>; <span class="comment">// No timeout and no deadline? Don't bother with the queue.</span></div><div class="line">    &#125;</div><div class="line">    inQueue = <span class="keyword">true</span>;</div><div class="line">    scheduleTimeout(<span class="keyword">this</span>, timeoutNanos, hasDeadline);</div><div class="line">  &#125;</div><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">scheduleTimeout</span><span class="params">(</span></span></div><div class="line">      AsyncTimeout node, <span class="keyword">long</span> timeoutNanos, <span class="keyword">boolean</span> hasDeadline)</div><div class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">boolean</span> <span class="title">exit</span><span class="params">()</span> &#123;</div><div class="line">    <span class="keyword">if</span> (!inQueue) <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">    inQueue = <span class="keyword">false</span>;</div><div class="line">    <span class="keyword">return</span> cancelScheduledTimeout(<span class="keyword">this</span>);</div><div class="line">  &#125;</div></pre></td></tr></table></figure>
<p>waitUntilNotified：等待Object monitor Timeout时间或者提前被唤醒。</p>
<h2 id="AsyncTimeout流程图"><a href="#AsyncTimeout流程图" class="headerlink" title="AsyncTimeout流程图"></a>AsyncTimeout流程图</h2><p><img src="https://raw.githubusercontent.com/zero21ke/pic/master/blog/okio/TimeOut.jpg" alt="AsyncTimeout流程图"></p>
<h1 id="Buffer"><a href="#Buffer" class="headerlink" title="Buffer"></a>Buffer</h1><h2 id="Segment和SegmentPool"><a href="#Segment和SegmentPool" class="headerlink" title="Segment和SegmentPool"></a>Segment和SegmentPool</h2><h3 id="Segment源码"><a href="#Segment源码" class="headerlink" title="Segment源码"></a>Segment源码</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">Segment</span> </span>&#123;</div><div class="line"><span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> SIZE = <span class="number">8192</span>;</div><div class="line"><span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> SHARE_MINIMUM = <span class="number">1024</span>;</div><div class="line"><span class="keyword">final</span> <span class="keyword">byte</span>[] data;</div><div class="line"><span class="keyword">int</span> pos;</div><div class="line"><span class="keyword">int</span> limit;</div><div class="line"><span class="keyword">boolean</span> shared;</div><div class="line"><span class="keyword">boolean</span> owner;</div><div class="line">Segment next;</div><div class="line">Segment prev;</div><div class="line">Segment(Segment shareFrom) &#123;</div><div class="line">    <span class="keyword">this</span>(shareFrom.data, shareFrom.pos, shareFrom.limit);</div><div class="line">    shareFrom.shared = <span class="keyword">true</span>;</div><div class="line">  &#125;</div><div class="line"><span class="function"><span class="keyword">public</span> Segment <span class="title">split</span><span class="params">(<span class="keyword">int</span> byteCount)</span> </span>&#123;</div><div class="line">    <span class="keyword">if</span> (byteCount &lt;= <span class="number">0</span> || byteCount &gt; limit - pos) <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException();</div><div class="line">    Segment prefix;</div><div class="line"></div><div class="line">    <span class="comment">// We have two competing performance goals:</span></div><div class="line">    <span class="comment">//  - Avoid copying data. We accomplish this by sharing segments.</span></div><div class="line">    <span class="comment">//  - Avoid short shared segments. These are bad for performance because they are readonly and</span></div><div class="line">    <span class="comment">//    may lead to long chains of short segments.</span></div><div class="line">    <span class="comment">// To balance these goals we only share segments when the copy will be large.</span></div><div class="line">    <span class="keyword">if</span> (byteCount &gt;= SHARE_MINIMUM) &#123;</div><div class="line">      prefix = <span class="keyword">new</span> Segment(<span class="keyword">this</span>);</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">      prefix = SegmentPool.take();</div><div class="line">      System.arraycopy(data, pos, prefix.data, <span class="number">0</span>, byteCount);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    prefix.limit = prefix.pos + byteCount;</div><div class="line">    pos += byteCount;</div><div class="line">    prev.push(prefix);</div><div class="line">    <span class="keyword">return</span> prefix;</div><div class="line">  &#125;</div></pre></td></tr></table></figure>
<p>Segment是一个双向链表，pos是读操作指针，limit是写操作指针，data是内存array，shared代表data是否与其他Segment共享，owner代表data是否归属于Segment。<br>split：分裂成两个Segment，一个是pos-pos+byteCount另一个是pos+byteCount-limit，分裂时如果byteCount &gt;= SHARE_MINIMUM即分裂生成的Segment的数据量比较大则共享被分裂Segment的data（prefix = new Segment(this)），prefix的limit等于被分裂Segment的pos+byteCount，被分裂Segment的pos=pos+byteCount，分裂生成的Segment插入被分裂Segment的前面。如果byteCount &lt; SHARE_MINIMUM即分裂生成的Segment的数据量比较小则内存copy的代价比较小，从pool中取一个Segment从被分裂Segment copy byteCount到此Segment中。</p>
<h3 id="SegmentPool源码"><a href="#SegmentPool源码" class="headerlink" title="SegmentPool源码"></a>SegmentPool源码</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">SegmentPool</span> </span>&#123;</div><div class="line"><span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> MAX_SIZE = <span class="number">64</span> * <span class="number">1024</span>; <span class="comment">// 64 KiB.</span></div><div class="line"><span class="keyword">static</span> Segment next;</div><div class="line"><span class="keyword">static</span> <span class="keyword">long</span> byteCount;</div><div class="line"><span class="function"><span class="keyword">static</span> Segment <span class="title">take</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">synchronized</span> (SegmentPool.class) &#123;</div><div class="line">      <span class="keyword">if</span> (next != <span class="keyword">null</span>) &#123;</div><div class="line">        Segment result = next;</div><div class="line">        next = result.next;</div><div class="line">        result.next = <span class="keyword">null</span>;</div><div class="line">        byteCount -= Segment.SIZE;</div><div class="line">        <span class="keyword">return</span> result;</div><div class="line">      &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">new</span> Segment(); <span class="comment">// Pool is empty. Don't zero-fill while holding a lock.</span></div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">recycle</span><span class="params">(Segment segment)</span> </span>&#123;</div><div class="line">    <span class="keyword">if</span> (segment.next != <span class="keyword">null</span> || segment.prev != <span class="keyword">null</span>) <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException();</div><div class="line">    <span class="keyword">if</span> (segment.shared) <span class="keyword">return</span>; <span class="comment">// This segment cannot be recycled.</span></div><div class="line">    <span class="keyword">synchronized</span> (SegmentPool.class) &#123;</div><div class="line">      <span class="keyword">if</span> (byteCount + Segment.SIZE &gt; MAX_SIZE) <span class="keyword">return</span>; <span class="comment">// Pool is full.</span></div><div class="line">      byteCount += Segment.SIZE;</div><div class="line">      segment.next = next;</div><div class="line">      segment.pos = segment.limit = <span class="number">0</span>;</div><div class="line">      next = segment;</div><div class="line">    &#125;</div><div class="line">  &#125;</div></pre></td></tr></table></figure>
<p>take从SegmentPool取Segment，recycle回收Segment到pool中，只有未被share过的（即shared == false）才可以被回收。<br>Segment A 被share后，Segment A的shared被赋值true，则即使与Segment A 共享data的Segment都被回收了，在Segment A被回收时，Segment A是不可以放到pool中的，可推断只有owner=true 且 shared=false时才可以放到pool中。   </p>
<h3 id="Buffer源码"><a href="#Buffer源码" class="headerlink" title="Buffer源码"></a>Buffer源码</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">Buffer</span> <span class="keyword">implements</span> <span class="title">BufferedSource</span>, <span class="title">BufferedSink</span>, <span class="title">Cloneable</span> </span>&#123;  </div><div class="line">Segment head; </div><div class="line"><span class="keyword">long</span> size;</div><div class="line"><span class="function">Segment <span class="title">writableSegment</span><span class="params">(<span class="keyword">int</span> minimumCapacity)</span> </span>&#123;</div><div class="line">    <span class="keyword">if</span> (minimumCapacity &lt; <span class="number">1</span> || minimumCapacity &gt; Segment.SIZE) <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException();</div><div class="line"></div><div class="line">    <span class="keyword">if</span> (head == <span class="keyword">null</span>) &#123;</div><div class="line">      head = SegmentPool.take(); <span class="comment">// Acquire a first segment.</span></div><div class="line">      <span class="keyword">return</span> head.next = head.prev = head;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    Segment tail = head.prev;</div><div class="line">    <span class="keyword">if</span> (tail.limit + minimumCapacity &gt; Segment.SIZE || !tail.owner) &#123;</div><div class="line">      tail = tail.push(SegmentPool.take()); <span class="comment">// Append a new empty segment to fill up.</span></div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> tail;</div><div class="line">  &#125;</div><div class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">byte</span> <span class="title">readByte</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">if</span> (size == <span class="number">0</span>) <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(<span class="string">"size == 0"</span>);</div><div class="line"></div><div class="line">    Segment segment = head;</div><div class="line">    <span class="keyword">int</span> pos = segment.pos;</div><div class="line">    <span class="keyword">int</span> limit = segment.limit;</div><div class="line"></div><div class="line">    <span class="keyword">byte</span>[] data = segment.data;</div><div class="line">    <span class="keyword">byte</span> b = data[pos++];</div><div class="line">    size -= <span class="number">1</span>;</div><div class="line"></div><div class="line">    <span class="keyword">if</span> (pos == limit) &#123;</div><div class="line">      head = segment.pop();</div><div class="line">      SegmentPool.recycle(segment);</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">      segment.pos = pos;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">return</span> b;</div><div class="line">  &#125;</div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">long</span> <span class="title">completeSegmentByteCount</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">long</span> result = size;</div><div class="line">    <span class="keyword">if</span> (result == <span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line"></div><div class="line">    <span class="comment">// Omit the tail if it's still writable.</span></div><div class="line">    Segment tail = head.prev;</div><div class="line">    <span class="keyword">if</span> (tail.limit &lt; Segment.SIZE &amp;&amp; tail.owner) &#123;</div><div class="line">      result -= tail.limit - tail.pos;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">return</span> result;</div><div class="line">  &#125;</div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">skip</span><span class="params">(<span class="keyword">long</span> byteCount)</span> <span class="keyword">throws</span> EOFException </span>&#123;</div><div class="line">    <span class="keyword">while</span> (byteCount &gt; <span class="number">0</span>) &#123;</div><div class="line">      <span class="keyword">if</span> (head == <span class="keyword">null</span>) <span class="keyword">throw</span> <span class="keyword">new</span> EOFException();</div><div class="line"></div><div class="line">      <span class="keyword">int</span> toSkip = (<span class="keyword">int</span>) Math.min(byteCount, head.limit - head.pos);</div><div class="line">      size -= toSkip;</div><div class="line">      byteCount -= toSkip;</div><div class="line">      head.pos += toSkip;</div><div class="line"></div><div class="line">      <span class="keyword">if</span> (head.pos == head.limit) &#123;</div><div class="line">        Segment toRecycle = head;</div><div class="line">        head = toRecycle.pop();</div><div class="line">        SegmentPool.recycle(toRecycle);</div><div class="line">      &#125;</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">write</span><span class="params">(Buffer source, <span class="keyword">long</span> byteCount)</span> </span>&#123;</div><div class="line">    <span class="keyword">if</span> (source == <span class="keyword">null</span>) <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"source == null"</span>);</div><div class="line">    <span class="keyword">if</span> (source == <span class="keyword">this</span>) <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"source == this"</span>);</div><div class="line">    checkOffsetAndCount(source.size, <span class="number">0</span>, byteCount);</div><div class="line"></div><div class="line">    <span class="keyword">while</span> (byteCount &gt; <span class="number">0</span>) &#123;</div><div class="line">      <span class="keyword">if</span> (byteCount &lt; (source.head.limit - source.head.pos)) &#123;</div><div class="line">        Segment tail = head != <span class="keyword">null</span> ? head.prev : <span class="keyword">null</span>;</div><div class="line">        <span class="keyword">if</span> (tail != <span class="keyword">null</span> &amp;&amp; tail.owner</div><div class="line">            &amp;&amp; (byteCount + tail.limit - (tail.shared ? <span class="number">0</span> : tail.pos) &lt;= Segment.SIZE)) &#123;</div><div class="line">          <span class="comment">// Our existing segments are sufficient. Move bytes from source's head to our tail.</span></div><div class="line">          source.head.writeTo(tail, (<span class="keyword">int</span>) byteCount);</div><div class="line">          source.size -= byteCount;</div><div class="line">          size += byteCount;</div><div class="line">          <span class="keyword">return</span>;</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">          <span class="comment">// We're going to need another segment. Split the source's head</span></div><div class="line">          <span class="comment">// segment in two, then move the first of those two to this buffer.</span></div><div class="line">          source.head = source.head.split((<span class="keyword">int</span>) byteCount);</div><div class="line">        &#125;</div><div class="line">      &#125;</div><div class="line"></div><div class="line">      <span class="comment">// Remove the source's head segment and append it to our tail.</span></div><div class="line">      Segment segmentToMove = source.head;</div><div class="line">      <span class="keyword">long</span> movedByteCount = segmentToMove.limit - segmentToMove.pos;</div><div class="line">      source.head = segmentToMove.pop();</div><div class="line">      <span class="keyword">if</span> (head == <span class="keyword">null</span>) &#123;</div><div class="line">        head = segmentToMove;</div><div class="line">        head.next = head.prev = head;</div><div class="line">      &#125; <span class="keyword">else</span> &#123;</div><div class="line">        Segment tail = head.prev;</div><div class="line">        tail = tail.push(segmentToMove);</div><div class="line">        tail.compact();</div><div class="line">      &#125;</div><div class="line">      source.size -= movedByteCount;</div><div class="line">      size += movedByteCount;</div><div class="line">      byteCount -= movedByteCount;</div><div class="line">    &#125;</div><div class="line">  &#125;</div></pre></td></tr></table></figure>
<h3 id="Buffer内存共享结构图"><a href="#Buffer内存共享结构图" class="headerlink" title="Buffer内存共享结构图"></a>Buffer内存共享结构图</h3><p><img src="https://raw.githubusercontent.com/zero21ke/pic/master/blog/okio/buffer.jpg" alt="Buffer内存共享结构图"></p>
<p>图中方框代表共享的内存byte[] data,不同的Segment共享可以共享data，但是每个Segment维护自己的pos和limit，buffer写操作时会先调用writableSegment。<br>writableSegment内部实现是，取队尾tail看剩余空间是否满足minimumCapacity：</p>
<ol>
<li>如果tail剩余空间不满足minimumCapacity，从SegmentPool take Segment插入tail之后</li>
<li>如果tail剩余空间满足minimumCapacity但是Segment底层的data不归Segment所有（tail.owner==false），从SegmentPool take Segment插入tail之后</li>
<li>如果tail剩余空间满足minimumCapacity且Segment底层的data归Segment所有（tail.owner==ture），直接写入tail剩余空间</li>
</ol>
<p>读操作时从head的pos读起，如果head被读取完了回收head。<br>completeSegmentByteCount:当前已complete的byte数，如果taile的data归taile所属，则很可能还会继续对tail进行写操作所以tail处于未 complete状态，tail前的Segment处于complete状态。<br>skip：从head开始跳过n个字节，跳过的Segment放到pool中。<br>write(Buffer source, long byteCount):从source的head摘取Segment连接到taile之后，当待写入的剩余字节小于source的head且taile不可写（owner==false）时，head做split操作。  </p>
<h3 id="RealBufferedSink"><a href="#RealBufferedSink" class="headerlink" title="RealBufferedSink"></a>RealBufferedSink</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">RealBufferedSink</span> <span class="keyword">implements</span> <span class="title">BufferedSink</span> </span>&#123;</div><div class="line">  <span class="keyword">public</span> <span class="keyword">final</span> Buffer buffer = <span class="keyword">new</span> Buffer();</div><div class="line">  <span class="keyword">public</span> <span class="keyword">final</span> Sink sink;</div><div class="line">  <span class="keyword">boolean</span> closed;</div><div class="line"><span class="function"><span class="keyword">public</span> BufferedSink <span class="title">emitCompleteSegments</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</div><div class="line">    <span class="keyword">if</span> (closed) <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(<span class="string">"closed"</span>);</div><div class="line">    <span class="keyword">long</span> byteCount = buffer.completeSegmentByteCount();</div><div class="line">    <span class="keyword">if</span> (byteCount &gt; <span class="number">0</span>) sink.write(buffer, byteCount);</div><div class="line">    <span class="keyword">return</span> <span class="keyword">this</span>;</div><div class="line">  &#125;</div><div class="line"><span class="function"><span class="keyword">public</span> BufferedSink <span class="title">writeByte</span><span class="params">(<span class="keyword">int</span> b)</span> <span class="keyword">throws</span> IOException </span>&#123;</div><div class="line">    <span class="keyword">if</span> (closed) <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(<span class="string">"closed"</span>);</div><div class="line">    buffer.writeByte(b);</div><div class="line">    <span class="keyword">return</span> emitCompleteSegments();</div><div class="line">  &#125;</div></pre></td></tr></table></figure>
<p>每个写操作都是先写入Buffer中，之后都调用emitCompleteSegments把Buffer中complete Segment写入Sink。</p>
<h3 id="Pipe"><a href="#Pipe" class="headerlink" title="Pipe"></a>Pipe</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">Pipe</span> </span>&#123;</div><div class="line">  <span class="keyword">final</span> <span class="keyword">long</span> maxBufferSize;</div><div class="line">  <span class="keyword">final</span> Buffer buffer = <span class="keyword">new</span> Buffer();</div><div class="line">  <span class="keyword">boolean</span> sinkClosed;</div><div class="line">  <span class="keyword">boolean</span> sourceClosed;</div><div class="line">  <span class="keyword">private</span> <span class="keyword">final</span> Sink sink = <span class="keyword">new</span> PipeSink();</div><div class="line">  <span class="keyword">private</span> <span class="keyword">final</span> Source source = <span class="keyword">new</span> PipeSource();</div><div class="line"><span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">PipeSink</span> <span class="keyword">implements</span> <span class="title">Sink</span> </span>&#123;</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">write</span><span class="params">(Buffer source, <span class="keyword">long</span> byteCount)</span> <span class="keyword">throws</span> IOException </span>&#123;</div><div class="line">      <span class="keyword">synchronized</span> (buffer) &#123;</div><div class="line">        <span class="keyword">if</span> (sinkClosed) <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(<span class="string">"closed"</span>);</div><div class="line"></div><div class="line">        <span class="keyword">while</span> (byteCount &gt; <span class="number">0</span>) &#123;</div><div class="line">          <span class="keyword">if</span> (sourceClosed) <span class="keyword">throw</span> <span class="keyword">new</span> IOException(<span class="string">"source is closed"</span>);</div><div class="line"></div><div class="line">          <span class="keyword">long</span> bufferSpaceAvailable = maxBufferSize - buffer.size();</div><div class="line">          <span class="keyword">if</span> (bufferSpaceAvailable == <span class="number">0</span>) &#123;</div><div class="line">            timeout.waitUntilNotified(buffer); <span class="comment">// Wait until the source drains the buffer.</span></div><div class="line">            <span class="keyword">continue</span>;</div><div class="line">          &#125;</div><div class="line"></div><div class="line">          <span class="keyword">long</span> bytesToWrite = Math.min(bufferSpaceAvailable, byteCount);</div><div class="line">          buffer.write(source, bytesToWrite);</div><div class="line">          byteCount -= bytesToWrite;</div><div class="line">          buffer.notifyAll(); <span class="comment">// Notify the source that it can resume reading.</span></div><div class="line">        &#125;</div><div class="line">      &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"><span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">PipeSource</span> <span class="keyword">implements</span> <span class="title">Source</span> </span>&#123;</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">long</span> <span class="title">read</span><span class="params">(Buffer sink, <span class="keyword">long</span> byteCount)</span> <span class="keyword">throws</span> IOException </span>&#123;</div><div class="line">      <span class="keyword">synchronized</span> (buffer) &#123;</div><div class="line">        <span class="keyword">if</span> (sourceClosed) <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(<span class="string">"closed"</span>);</div><div class="line"></div><div class="line">        <span class="keyword">while</span> (buffer.size() == <span class="number">0</span>) &#123;</div><div class="line">          <span class="keyword">if</span> (sinkClosed) <span class="keyword">return</span> -<span class="number">1L</span>;</div><div class="line">          timeout.waitUntilNotified(buffer); <span class="comment">// Wait until the sink fills the buffer.</span></div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">long</span> result = buffer.read(sink, byteCount);</div><div class="line">        buffer.notifyAll(); <span class="comment">// Notify the sink that it can resume writing.</span></div><div class="line">        <span class="keyword">return</span> result;</div><div class="line">      &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>PipeSink负责向Buffer写，PipeSource负责从Buffer读，读写操作需要用synchronized (buffer)进行同步，Pipe满时调用timeout.waitUntilNotified(buffer)，PipeSink写线程会等待buffer对象timeout设置的时间，如果timeout到时抛出InterruptedIOException，Pipe空时PipeSource读线程会调用timeout.waitUntilNotified(buffer)，读线程会等待buffer对象timeout设置的时间，如果timeout到时抛出InterruptedIOException。</p>
<h1 id="设计模式"><a href="#设计模式" class="headerlink" title="设计模式"></a>设计模式</h1><h2 id="装饰器模式"><a href="#装饰器模式" class="headerlink" title="装饰器模式"></a>装饰器模式</h2><p>为Sink增加压缩功能的DeflaterSink<br>为Sink增加Gzip压缩功能的GzipSink<br>为Sink增加hash计算功能的HashingSink<br>为Sink增加buffer功能的RealBufferedSink</p>
<h2 id="对象适配器模式"><a href="#对象适配器模式" class="headerlink" title="对象适配器模式"></a>对象适配器模式</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">RealBufferedSink</span> <span class="keyword">implements</span> <span class="title">BufferedSink</span> </span>&#123;</div><div class="line"><span class="function"><span class="keyword">public</span> OutputStream <span class="title">outputStream</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">new</span> OutputStream() &#123;</div><div class="line">      <span class="meta">@Override</span> <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">write</span><span class="params">(<span class="keyword">int</span> b)</span> <span class="keyword">throws</span> IOException </span>&#123;</div><div class="line">        <span class="keyword">if</span> (closed) <span class="keyword">throw</span> <span class="keyword">new</span> IOException(<span class="string">"closed"</span>);</div><div class="line">        buffer.writeByte((<span class="keyword">byte</span>) b);</div><div class="line">        emitCompleteSegments();</div><div class="line">      &#125;</div></pre></td></tr></table></figure>
<p>把RealBufferedSink对象适配成OutputStream</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本文主要分析了OKIO源码中用到的Timeout，Buffer和设计模式。&lt;/p&gt;
    
    </summary>
    
      <category term="zero" scheme="http://xgfe.github.io/categories/zero/"/>
    
    
      <category term="java" scheme="http://xgfe.github.io/tags/java/"/>
    
      <category term="IO" scheme="http://xgfe.github.io/tags/IO/"/>
    
  </entry>
  
  <entry>
    <title>React Native 学习系列一</title>
    <link href="http://xgfe.github.io/2017/06/22/lulutia/reactnative01/"/>
    <id>http://xgfe.github.io/2017/06/22/lulutia/reactnative01/</id>
    <published>2017-06-22T13:12:00.000Z</published>
    <updated>2017-09-22T06:11:01.000Z</updated>
    
    <content type="html"><![CDATA[<p>本文是React Native学习系列的第一篇，主要介绍了React Native产生的背景、环境搭建、文件结构及如何使用Flex布局进行样式搭建。</p>
<a id="more"></a>
<h4 id="背景介绍"><a href="#背景介绍" class="headerlink" title="背景介绍"></a>背景介绍</h4><ul>
<li>创造者: Facebook</li>
<li>时间: React.js Conf 2015 上发布，9月推出Android版本</li>
<li>使用范围: 用于开发<strong>iOS和Android</strong>原生应用</li>
<li>设计理念: 既拥有Native的<strong>用户体验</strong>、又保留React的<strong>开发效率</strong></li>
<li>产生原因:<ul>
<li>Native的原生控件有更好的体验，有更好的手势识别，有更合适的线程模型，能实现更精细的动画</li>
<li>Native开发成本高</li>
</ul>
</li>
<li>发展趋势: 开源不到1周github上star破万</li>
<li>基本特点:<ul>
<li>Learn once, write anywhere<ul>
<li>用React.js抽象操作系统的原生UI组件，继而代替DOM元素来渲染</li>
</ul>
</li>
<li>具备流畅和反应灵敏的优势<ul>
<li>在后台，React Native运行在主线程之外，而在另一个专门的后台线程里运行JavaScript引擎，两个线程之间通过异步消息协议来通信。</li>
</ul>
</li>
</ul>
</li>
<li>对应技术栈<ul>
<li>JSX vs HTML</li>
<li>CSS-layout vs css</li>
<li>ECMAScript 6 vs ECMAScript 5</li>
<li>React Native View vs DOM</li>
</ul>
</li>
</ul>
<h4 id="环境配置"><a href="#环境配置" class="headerlink" title="环境配置"></a>环境配置</h4><ul>
<li>按照React Native官方文档搭建环境<ul>
<li><a href="http://facebook.github.io/react-native/docs/getting-started.html" target="_blank" rel="external">英文版</a>搭建流程</li>
<li><a href="http://reactnative.cn/docs/0.46/getting-started.html" target="_blank" rel="external">中文版</a>搭建流程</li>
<li>模拟器推荐使用<a href="https://www.genymotion.com/" target="_blank" rel="external">Genymotion</a>。</li>
</ul>
</li>
<li>安装过程中可能出现的问题<ul>
<li>$ANDROIDNDK 和 $ANDROIDHOME 没有正确设置: <ul>
<li>解决办法：vi .bashrc和.bash_profile 加上 /usr/local/opt/android-ndk和/usr/local/opt/android-sdk,并且source一下这两个文件，然后eoch下上述两个变量是否已经存在。</li>
</ul>
</li>
</ul>
</li>
<li><a href="http://reactnative.cn/docs/0.41/running-on-device-android.html#content" target="_blank" rel="external">真机调试</a><ul>
<li>注意iOS系统真机调试需要有开发者账号</li>
<li>可能有些机型无法用这种方式进行(比如小米4C)，可以手动安装</li>
</ul>
</li>
</ul>
<h4 id="结构"><a href="#结构" class="headerlink" title="结构"></a>结构</h4><ul>
<li>文件结构</li>
</ul>
<p><img src="https://raw.githubusercontent.com/lulutia/images/master/ReactNative/one/structure.png" alt="文件结构"></p>
<ul>
<li>代码结构<ul>
<li>7-13: 引入需要用到的模块</li>
<li>15-32: 本组件的渲染逻辑</li>
<li>34-51: 样式定义</li>
<li>53: AppRegistry是JS运行所有React Native应用的入口，应用的根组件应当通过AppRegistry.registerComponent方法注册自己，然后原生系统才可以加载应用的代码包并且在启动完成之后通过调用AppRegistry.runApplication来真正运行应用</li>
<li>样式定义可以单独提出作为一个模块，甚至组件的具体实现也可以和应用注册分离开来</li>
</ul>
</li>
</ul>
<p><img src="https://raw.githubusercontent.com/lulutia/images/master/ReactNative/one/code.png" alt="代码结构"></p>
<h4 id="样式"><a href="#样式" class="headerlink" title="样式"></a>样式</h4><ul>
<li>React Native中用JS来写样式</li>
<li>所有的核心组件都接受名为style的属性。这些样式名基本上是遵循了web上的CSS的命名，只是按照JS的语法要求使用了驼峰命名法</li>
<li>style属性可以是一个普通的JavaScript对象，也可以是一个数组，在数组中位置居后的样式对象比居前的优先级更高</li>
<li><a href="http://reactnative.cn/docs/0.41/text.html#style" target="_blank" rel="external">Text样式</a></li>
<li><a href="http://reactnative.cn/docs/0.41/view.html#style" target="_blank" rel="external">View样式</a></li>
<li>最简单的调试方法: 当错误的书写了样式属性时，应用会抛出一个warning，在这个warning里面会列出当前元素所有可使用的样式</li>
<li>实际开发中组件的样式会越来越复杂，官方建议使用StyleSheet.create来集中定义组件的样式。StyleSheet提供了一种类似CSS样式表的抽象，相比于plain object，其主要有以下优势<ul>
<li>代码质量:<ul>
<li>移除了render里面的具体样式内容，使代码组织更加合理</li>
<li>给样式命名可以对render函数中的原始组件进行一种作用标记</li>
</ul>
</li>
<li>性能角度:<ul>
<li>创建一个样式表，就可以使得我们后续更容易通过ID来引用样式，而不是每次都创建一个新的对象</li>
<li>它还使得样式只会在JavaScript和原生之间传递一次，随后的过程都可以只传递一个ID(现在还没实现)</li>
</ul>
</li>
<li>因此，如果我们直接打印styles.xxx，我们只会得到一个number，要使用StyleSheet.flatten(styles.xxx)才能得到具体内容</li>
</ul>
</li>
</ul>
<h4 id="Flex布局"><a href="#Flex布局" class="headerlink" title="Flex布局"></a>Flex布局</h4><ul>
<li>在React Native中布局采用的是FleBox(弹性框)进行布局</li>
<li>Flex布局主要思想是让容器有能力让其子项目能够改变其宽度、高度(甚至顺序)，以最佳方式填充可用空间(主要是为了适应所有类型的显示设备和屏幕大小)</li>
</ul>
<p>像素无关</p>
<ul>
<li><p>React Native中的尺寸都是无单位的，表示的是与设备像素密度无关的逻辑像素点</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&lt;View style=&#123; &#123;<span class="attr">width</span>:<span class="number">100</span>,<span class="attr">height</span>:<span class="number">100</span>,<span class="attr">margin</span>:<span class="number">40</span>,<span class="attr">backgroundColor</span>:<span class="string">'gray'</span>&#125;&#125;&gt;</div><div class="line">      <span class="xml"><span class="tag">&lt;<span class="name">Text</span> <span class="attr">style</span>=<span class="string">&#123;</span> &#123;<span class="attr">fontSize:16</span>,<span class="attr">margin:20</span>&#125;&#125;&gt;</span>尺寸<span class="tag">&lt;/<span class="name">Text</span>&gt;</span></span></div><div class="line">&lt;<span class="regexp">/View&gt;</span></div></pre></td></tr></table></figure>
</li>
<li><p>上面的例子，运行在Android上时，View的长和宽被解释成100dp 其单位是dp，字体被解释成16sp 其单位是sp，运行在iOS上时尺寸单位被解释称了pt，这些单位确保了布局在任何不同dpi的手机屏幕上显示不会发生改变。如果希望获取实际的像素尺寸，则需要使用尺寸 * pixelRatio。<a href="https://facebook.github.io/react-native/docs/pixelratio.html" target="_blank" rel="external">pixelRatio使用</a></p>
</li>
</ul>
<p>React Native中的FlexBox 和Web CSS中的FlexBox不全相同</p>
<ul>
<li>flexDirection: React Native中默认为flexDirection:’column’，在Web CSS中默认为flex-direction:’row’</li>
<li>alignItems: React Native中默认为alignItems:’stretch’，在Web CSS中默认align-items:’flex-start’</li>
<li>flexWrap: React Native中没有wrap-reverse，在Web CSS中有</li>
<li>flex: 相比Web CSS的flex接受多参数，如:flex: 2 2 10%;，但在 React Native中flex只接受一个参数</li>
<li>不支持属性：align-content，flex-flow等</li>
</ul>
<p>Flex基本知识[基于RN]<br>  <img src="https://raw.githubusercontent.com/lulutia/images/master/ReactNative/one/flex.png" alt="flex基本概念"></p>
<ul>
<li><p>父容器属性</p>
<ul>
<li>flexDirection属性定义了父视图中的子元素沿横轴或侧轴方片的排列方式，默认为column: ‘row’, ‘column’,’row-reverse’,’column-reverse’</li>
</ul>
<p><img src="http://okzzg7ifm.bkt.clouddn.com/flexdirection.png" alt="flexDirection"></p>
<ul>
<li>flexWrap属性定义了子元素在父视图内是否允许多行排列，默认为nowrap: ‘wrap’, ‘nowrap’</li>
</ul>
<p><img src="http://okzzg7ifm.bkt.clouddn.com/wrap.png" alt="flexWrap"></p>
<ul>
<li>justifyContent属性定义了浏览器如何分配顺着父容器主轴的弹性（flex）元素之间及其周围的空间，默认为flex-start: ‘flex-start’, ‘flex-end’, ‘center’, ‘space-between’, ‘space-around’</li>
</ul>
<p><img src="http://okzzg7ifm.bkt.clouddn.com/justifyContent.png" alt="justifyContent"></p>
<ul>
<li>alignItems属性以与justify-content相同的方式在侧轴方向上将当前行上的弹性元素对齐，默认为stretch: ‘flex-start’, ‘flex-end’, ‘center’, ‘stretch’。这里需要注意，当选择stretch时，侧轴上的元素不能有固定的size，否则无效</li>
</ul>
<p><img src="http://okzzg7ifm.bkt.clouddn.com/alignItems.png" alt="alignItems"></p>
</li>
<li><p>子容器属性</p>
<ul>
<li>alignSelf决定了元素在父元素的次轴方向的排列方式（此样式设置在子元素上），其值会覆盖父元素的alignItems的值，默认auto: ‘auto’, ‘flex-start’, ‘flex-end’, ‘center’, ‘stretch’</li>
</ul>
</li>
<li>flex 属性定义了一个可伸缩元素的能力，默认为0</li>
<li>视图边框: border[Bottom/Top/Left/Right]Width，borderColor等</li>
<li>尺寸: width，height</li>
<li>外边距: margin[Bottom/Top/Left/Right/Horizontal/Vertical]等</li>
<li>内边距: padding[Bottom/Top/Left/Right/Horizontal/Vertical]等</li>
<li>边缘: left，right，top，bottom等</li>
<li>定位: absolute，relative</li>
<li><a href="https://reactnative.cn/docs/0.39/layout-props.html" target="_blank" rel="external">更多参考</a></li>
</ul>
<p>图片布局</p>
<ul>
<li><p>图片有一个stretchMode. 通过Image.resizeMode访问，其主要有以下几种模式(默认采用cover模式):</p>
<ul>
<li><p>cover: 在保持图片宽高比的前提下缩放图片，直到宽度和高度都大于等于容器视图的尺寸（如果容器有padding内衬的话，则相应减去）。这样图片完全覆盖甚至超出容器，容器中不留任何空白<br><img src="https://raw.githubusercontent.com/lulutia/images/master/ReactNative/one/cover.png" alt="cover"></p>
</li>
<li><p>contain: 在保持图片宽高比的前提下缩放图片，直到宽度和高度都小于等于容器视图的尺寸（如果容器有padding内衬的话，则相应减去）。这样图片完全被包裹在容器中，容器中可能留有空白</p>
</li>
</ul>
<p><img src="https://raw.githubusercontent.com/lulutia/images/master/ReactNative/one/contain.png" alt="contain"></p>
<ul>
<li>stretch: 拉伸图片且不维持宽高比，直到宽高都刚好填满容器</li>
</ul>
<p><img src="https://raw.githubusercontent.com/lulutia/images/master/ReactNative/one/stretch.png" alt="stretch"></p>
<ul>
<li>repeat: 重复平铺图片直到填满容器。图片会维持原始尺寸。仅iOS可用，android使用会报错</li>
</ul>
<p><img src="https://raw.githubusercontent.com/lulutia/images/master/ReactNative/one/repeat.png" alt="repeat"></p>
<ul>
<li>center: 居中不拉伸</li>
</ul>
<p><img src="https://raw.githubusercontent.com/lulutia/images/master/ReactNative/one/center.png" alt="center"></p>
</li>
</ul>
<p>文本元素  </p>
<ul>
<li>文本可嵌套</li>
<li><p><text>元素在布局上不同于其它组件：在Text内部的元素不再使用flexbox布局，而是采用文本布局。这意味着<text>内部的元素不再是一个个矩形，而可能会在行末进行折叠</text></text></p>
<p><img src="https://raw.githubusercontent.com/lulutia/images/master/ReactNative/one/text.png" alt="文本布局">  </p>
</li>
<li>你必须把你的文本节点放在<text>组件内。你不能直接在<view>下放置一段文本</view></text></li>
<li>不能直接设置一整颗子树的默认样式。使用一个一致的文本和尺寸的推荐方式是创建一个包含相关样式的组件MyAppText，然后在你的App中反复使用它</li>
<li>文本标签的子树还是可以继承的，继承父元素的样式</li>
<li>通过numberOfLines={}可以实现文字截断效果</li>
<li>注意ios和android的默认文字样式是不一样的，主要是fontSize和color的不同。</li>
</ul>
<h4 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h4><ul>
<li><a href="https://code.facebook.com/posts/1014532261909640/react-native-bringing-modern-web-techniques-to-mobile/" target="_blank" rel="external">React Native: Bringing modern web techniques to mobile</a></li>
<li><a href="http://www.jianshu.com/p/1e990aac7836" target="_blank" rel="external">基于Facebook Buck改造Android构建系统之初体验</a></li>
<li><a href="https://github.com/amfe/article/issues/32" target="_blank" rel="external">flow——A static type checker for javascript</a></li>
<li><a href="https://git-scm.com/book/zh/v1/%E8%87%AA%E5%AE%9A%E4%B9%89-Git-Git%E5%B1%9E%E6%80%A7" target="_blank" rel="external">自定义 Git - Git属性</a></li>
<li><a href="http://reactnative.cn/docs/0.36/appregistry.html" target="_blank" rel="external">AppRegistry</a></li>
<li><a href="https://github.com/crazycodeboy/RNStudyNotes/blob/master/React%20Native%E5%B8%83%E5%B1%80/React%20Native%E5%B8%83%E5%B1%80%E8%AF%A6%E7%BB%86%E6%8C%87%E5%8D%97/React%20Native%E5%B8%83%E5%B1%80%E8%AF%A6%E7%BB%86%E6%8C%87%E5%8D%97.md" target="_blank" rel="external">React Native布局详细指南</a></li>
<li><a href="http://weibo.com/1712131295/CoRnElNkZ?ref=collection&amp;type=comment#_rnd1486356368337" target="_blank" rel="external">flex布局示意图</a></li>
<li><a href="https://segmentfault.com/a/1190000002658374" target="_blank" rel="external">react-native 之布局篇</a></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本文是React Native学习系列的第一篇，主要介绍了React Native产生的背景、环境搭建、文件结构及如何使用Flex布局进行样式搭建。&lt;/p&gt;
    
    </summary>
    
      <category term="lulutia" scheme="http://xgfe.github.io/categories/lulutia/"/>
    
    
      <category term="React Native" scheme="http://xgfe.github.io/tags/React-Native/"/>
    
  </entry>
  
  <entry>
    <title>SDWebImage源码解读</title>
    <link href="http://xgfe.github.io/2017/05/27/shsoul/SDWebImage%E6%BA%90%E7%A0%81%E8%A7%A3%E8%AF%BB/"/>
    <id>http://xgfe.github.io/2017/05/27/shsoul/SDWebImage源码解读/</id>
    <published>2017-05-27T11:48:29.000Z</published>
    <updated>2017-09-12T08:43:59.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3><p>SDWebImage库是iOS应用中常用的一个图片处理库，包括图片的下载和缓存等。非常好用。本文对其源码做了分析和总结。</p>
<a id="more"></a>
<h3 id="SDWebImage的结构"><a href="#SDWebImage的结构" class="headerlink" title="SDWebImage的结构"></a>SDWebImage的结构</h3><p><img src="https://p1.meituan.net/dpnewvc/20aa73ab887e77461938f858bac37dc164266.png" alt="结构图"></p>
<ol>
<li>整个架构是MVC架构。<ul>
<li>发起图片请求的是View层， 包括UIButton和UIImageView的Category。</li>
<li>ImageManager是Controller层，请求的转发，是请求下载模块还是缓存模块。</li>
<li>下载模块（Downloader）和缓存模块（ImageCache）是Model层。</li>
</ul>
</li>
<li>prefetcher 批量下载相关</li>
<li>combinedOperation 组合操作，主要是取消请求操作。</li>
<li>支持webP和gif等。</li>
</ol>
<h3 id="缓存模块（SDImageCache）"><a href="#缓存模块（SDImageCache）" class="headerlink" title="缓存模块（SDImageCache）"></a>缓存模块（SDImageCache）</h3><p>SDImageCache缓存有两层缓存，一是内存缓存，二是磁盘缓存。SDImageCache是一个单例。</p>
<h4 id="1-NSCache-做内存缓存"><a href="#1-NSCache-做内存缓存" class="headerlink" title="1. NSCache 做内存缓存"></a>1. NSCache 做内存缓存</h4><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">- (<span class="keyword">id</span>)initWithNamespace:(<span class="built_in">NSString</span> *)ns diskCacheDirectory:(<span class="built_in">NSString</span> *)directory &#123;</div><div class="line">        <span class="comment">// Init the memory cache</span></div><div class="line">        _memCache = [[AutoPurgeCache alloc] init]; <span class="comment">// AutoPurgeCaCache是继承与NSCache，对NSCache简单封装。</span></div><div class="line">        _memCache.name = fullNamespace;</div><div class="line">&#125;</div><div class="line">- (<span class="built_in">NSString</span> *)cacheKeyForURL:(<span class="built_in">NSURL</span> *)url &#123;</div><div class="line">    <span class="keyword">if</span> (!url) &#123;</div><div class="line">        <span class="keyword">return</span> <span class="string">@""</span>;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="keyword">if</span> (<span class="keyword">self</span>.cacheKeyFilter) &#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">self</span>.cacheKeyFilter(url);</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">        <span class="keyword">return</span> [url absoluteString];</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>NSCache 跟NSMutableDictionary用法很像，但是NSCache是线程安全的，而且在系统内存不足的情况下回自动释放部分内存。键不会被copy，只是强引用。</li>
<li>默认以url字符串为key，UIImage为value。</li>
<li>键值对都是strong引用</li>
<li>对NSCache缓存空间没有限制</li>
</ul>
<h4 id="2-磁盘缓存"><a href="#2-磁盘缓存" class="headerlink" title="2. 磁盘缓存"></a>2. 磁盘缓存</h4><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// Init the disk cache</span></div><div class="line">-(<span class="built_in">NSString</span> *)makeDiskCachePath:(<span class="built_in">NSString</span>*)fullNamespace&#123;</div><div class="line">    <span class="built_in">NSArray</span> *paths = <span class="built_in">NSSearchPathForDirectoriesInDomains</span>(<span class="built_in">NSCachesDirectory</span>, <span class="built_in">NSUserDomainMask</span>, <span class="literal">YES</span>);</div><div class="line">    <span class="keyword">return</span> [paths[<span class="number">0</span>] stringByAppendingPathComponent:fullNamespace];</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>目录在应用沙盒中的缓存目录下。会创建一个默认目录。</li>
<li>默认情况下既有内存缓存也有磁盘缓存。</li>
<li>可以加自定义的目录，作用是读取那个目录下预存的文件。但是文件名也是根据SDWebImage的命名方式。</li>
</ul>
<figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">- (<span class="built_in">NSString</span> *)cachedFileNameForKey:(<span class="built_in">NSString</span> *)key &#123;</div><div class="line">    <span class="keyword">const</span> <span class="keyword">char</span> *str = [key UTF8String];</div><div class="line">    <span class="keyword">if</span> (str == <span class="literal">NULL</span>) &#123;</div><div class="line">        str = <span class="string">""</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">unsigned</span> <span class="keyword">char</span> r[CC_MD5_DIGEST_LENGTH];</div><div class="line">    CC_MD5(str, (CC_LONG)strlen(str), r);</div><div class="line">    <span class="built_in">NSString</span> *filename = [<span class="built_in">NSString</span> stringWithFormat:<span class="string">@"%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x%@"</span>,</div><div class="line">                          r[<span class="number">0</span>], r[<span class="number">1</span>], r[<span class="number">2</span>], r[<span class="number">3</span>], r[<span class="number">4</span>], r[<span class="number">5</span>], r[<span class="number">6</span>], r[<span class="number">7</span>], r[<span class="number">8</span>], r[<span class="number">9</span>], r[<span class="number">10</span>],</div><div class="line">                          r[<span class="number">11</span>], r[<span class="number">12</span>], r[<span class="number">13</span>], r[<span class="number">14</span>], r[<span class="number">15</span>], [[key pathExtension] isEqualToString:<span class="string">@""</span>] ? <span class="string">@""</span> : [<span class="built_in">NSString</span> stringWithFormat:<span class="string">@".%@"</span>, [key pathExtension]]];</div><div class="line"></div><div class="line">    <span class="keyword">return</span> filename;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>文件名以url的16位MD5后的字符，然后每一位字符转换成两位16进制数命名，防止文件名冲突</li>
</ul>
<figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div></pre></td><td class="code"><pre><div class="line">- (<span class="keyword">void</span>)storeImage:(<span class="built_in">UIImage</span> *)image recalculateFromImage:(<span class="built_in">BOOL</span>)recalculate imageData:(<span class="built_in">NSData</span> *)imageData forKey:(<span class="built_in">NSString</span> *)key toDisk:(<span class="built_in">BOOL</span>)toDisk &#123;</div><div class="line">    <span class="keyword">if</span> (!image || !key) &#123;</div><div class="line">        <span class="keyword">return</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="comment">// if memory cache is enabled</span></div><div class="line">    <span class="keyword">if</span> (<span class="keyword">self</span>.shouldCacheImagesInMemory) &#123;</div><div class="line">        <span class="built_in">NSUInteger</span> cost = SDCacheCostForImage(image);</div><div class="line">        [<span class="keyword">self</span>.memCache setObject:image forKey:key cost:cost];</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">if</span> (toDisk) &#123;</div><div class="line">        <span class="built_in">dispatch_async</span>(<span class="keyword">self</span>.ioQueue, ^&#123;</div><div class="line">            <span class="built_in">NSData</span> *data = imageData;</div><div class="line"></div><div class="line">            <span class="keyword">if</span> (image &amp;&amp; (recalculate || !data)) &#123;</div><div class="line"><span class="meta">#if TARGET_OS_IPHONE</span></div><div class="line">                <span class="comment">// We need to determine if the image is a PNG or a JPEG</span></div><div class="line">                <span class="comment">// PNGs are easier to detect because they have a unique signature (http://www.w3.org/TR/PNG-Structure.html)</span></div><div class="line">                <span class="comment">// The first eight bytes of a PNG file always contain the following (decimal) values:</span></div><div class="line">                <span class="comment">// 137 80 78 71 13 10 26 10</span></div><div class="line"></div><div class="line">                <span class="comment">// If the imageData is nil (i.e. if trying to save a UIImage directly or the image was transformed on download)</span></div><div class="line">                <span class="comment">// and the image has an alpha channel, we will consider it PNG to avoid losing the transparency</span></div><div class="line">                <span class="keyword">int</span> alphaInfo = <span class="built_in">CGImageGetAlphaInfo</span>(image.CGImage);</div><div class="line">                <span class="built_in">BOOL</span> hasAlpha = !(alphaInfo == kCGImageAlphaNone ||</div><div class="line">                                  alphaInfo == kCGImageAlphaNoneSkipFirst ||</div><div class="line">                                  alphaInfo == kCGImageAlphaNoneSkipLast);</div><div class="line">                <span class="built_in">BOOL</span> imageIsPng = hasAlpha;</div><div class="line"></div><div class="line">                <span class="comment">// But if we have an image data, we will look at the preffix</span></div><div class="line">                <span class="keyword">if</span> ([imageData length] &gt;= [kPNGSignatureData length]) &#123;</div><div class="line">                    imageIsPng = ImageDataHasPNGPreffix(imageData);</div><div class="line">                &#125;</div><div class="line"></div><div class="line">                <span class="keyword">if</span> (imageIsPng) &#123;</div><div class="line">                    data = <span class="built_in">UIImagePNGRepresentation</span>(image);</div><div class="line">                &#125;</div><div class="line">                <span class="keyword">else</span> &#123;</div><div class="line">                    data = <span class="built_in">UIImageJPEGRepresentation</span>(image, (<span class="built_in">CGFloat</span>)<span class="number">1.0</span>);</div><div class="line">                &#125;</div><div class="line"><span class="meta">#else</span></div><div class="line">                data = [<span class="built_in">NSBitmapImageRep</span> representationOfImageRepsInArray:image.representations usingType: <span class="built_in">NSJPEGFileType</span> properties:<span class="literal">nil</span>];</div><div class="line"><span class="meta">#endif</span></div><div class="line">            &#125;</div><div class="line"></div><div class="line">            [<span class="keyword">self</span> storeImageDataToDisk:data forKey:key];</div><div class="line">        &#125;);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>iphone设备先判断是png还是其他，是png用png压缩存储，其他用jpeg压缩存储。其他设备不用压缩。</li>
<li>异步存储和获取</li>
<li>多线程用的是GCD</li>
</ul>
<figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">- (<span class="built_in">UIImage</span> *)diskImageForKey:(<span class="built_in">NSString</span> *)key &#123;</div><div class="line">    <span class="built_in">NSData</span> *data = [<span class="keyword">self</span> diskImageDataBySearchingAllPathsForKey:key];</div><div class="line">    <span class="keyword">if</span> (data) &#123;</div><div class="line">        <span class="built_in">UIImage</span> *image = [<span class="built_in">UIImage</span> sd_imageWithData:data];</div><div class="line">        image = [<span class="keyword">self</span> scaledImageForKey:key image:image];</div><div class="line">        <span class="keyword">if</span> (<span class="keyword">self</span>.shouldDecompressImages) &#123;</div><div class="line">            image = [<span class="built_in">UIImage</span> decodedImageWithImage:image];</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> image;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">else</span> &#123;</div><div class="line">        <span class="keyword">return</span> <span class="literal">nil</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>获取图片先从内存中找，如果没有找到则在磁盘中找，找到后先解码(SDWebImageDecoder)，然后放到内存中。</li>
<li>缓存的清除：<ul>
<li>-(void)clearMemory;<br>  清内存缓存，在UIApplicationDidReceiveMemoryWarningNotification时主动调用。</li>
<li>-(void)clearDisk; 清空磁盘缓存</li>
<li>-(void)cleanDisk; 先清过期缓存，默认期限为一周，且如果设置最大缓存间时，清除最久的缓存，直到在size小于最大缓存空间的一半。</li>
<li>需要注意的是，在UIApplicationWillTerminateNotification时会执行<code>- (void)cleanDisk</code>，在UIApplicationDidEnterBackgroundNotification时执行<code>- (void)backgroundCleanDisk</code>，两者的策略都是cleanDisk策略。</li>
</ul>
</li>
</ul>
<h3 id="下载模块"><a href="#下载模块" class="headerlink" title="下载模块"></a>下载模块</h3><h4 id="1-SDWebImageDownloader"><a href="#1-SDWebImageDownloader" class="headerlink" title="1. SDWebImageDownloader"></a>1. SDWebImageDownloader</h4><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div></pre></td><td class="code"><pre><div class="line">- (<span class="keyword">id</span>)init &#123;</div><div class="line">    <span class="keyword">if</span> ((<span class="keyword">self</span> = [<span class="keyword">super</span> init])) &#123;</div><div class="line">        _operationClass = [SDWebImageDownloaderOperation <span class="keyword">class</span>];</div><div class="line">        _shouldDecompressImages = <span class="literal">YES</span>;</div><div class="line">        _executionOrder = SDWebImageDownloaderFIFOExecutionOrder;</div><div class="line">        _downloadQueue = [<span class="built_in">NSOperationQueue</span> new];</div><div class="line">        _downloadQueue.maxConcurrentOperationCount = <span class="number">6</span>;</div><div class="line">        _downloadQueue.name = <span class="string">@"com.hackemist.SDWebImageDownloader"</span>;</div><div class="line">        _URLCallbacks = [<span class="built_in">NSMutableDictionary</span> new];</div><div class="line"><span class="meta">#ifdef SD_WEBP</span></div><div class="line">        _HTTPHeaders = [@&#123;<span class="string">@"Accept"</span>: <span class="string">@"image/webp,image/*;q=0.8"</span>&#125; mutableCopy];</div><div class="line"><span class="meta">#else</span></div><div class="line">        _HTTPHeaders = [@&#123;<span class="string">@"Accept"</span>: <span class="string">@"image/*;q=0.8"</span>&#125; mutableCopy];</div><div class="line"><span class="meta">#endif</span></div><div class="line">        _barrierQueue = dispatch_queue_create(<span class="string">"com.hackemist.SDWebImageDownloaderBarrierQueue"</span>, DISPATCH_QUEUE_CONCURRENT);</div><div class="line">        _downloadTimeout = <span class="number">15.0</span>;</div><div class="line"></div><div class="line">        <span class="built_in">NSURLSessionConfiguration</span> *sessionConfig = [<span class="built_in">NSURLSessionConfiguration</span> defaultSessionConfiguration];</div><div class="line">        sessionConfig.timeoutIntervalForRequest = _downloadTimeout;</div><div class="line"></div><div class="line">        <span class="comment">/**</span></div><div class="line">         *  Create the session for this task</div><div class="line">         *  We send nil as delegate queue so that the session creates a serial operation queue for performing all delegate</div><div class="line">         *  method calls and completion handler calls.</div><div class="line">         */</div><div class="line">        <span class="keyword">self</span>.session = [<span class="built_in">NSURLSession</span> sessionWithConfiguration:sessionConfig</div><div class="line">                                                     delegate:<span class="keyword">self</span></div><div class="line">                                                delegateQueue:<span class="literal">nil</span>];</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">self</span>;</div><div class="line">&#125;</div><div class="line">- (<span class="keyword">id</span> &lt;SDWebImageOperation&gt;)downloadImageWithURL:(<span class="built_in">NSURL</span> *)url options:(SDWebImageDownloaderOptions)options progress:(SDWebImageDownloaderProgressBlock)progressBlock completed:(SDWebImageDownloaderCompletedBlock)completedBlock &#123;</div><div class="line">	...</div><div class="line">&#125;</div><div class="line">- (<span class="keyword">void</span>)addProgressCallback:(SDWebImageDownloaderProgressBlock)progressBlock completedBlock:(SDWebImageDownloaderCompletedBlock)completedBlock forURL:(<span class="built_in">NSURL</span> *)url createCallback:(SDWebImageNoParamsBlock)createCallback &#123;</div><div class="line">	...</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>维护一个downloadeQueue，用的是NSOperationQueue。最大并发数为6</li>
<li>维护url的所有callback，一个url对应一次下载任务线程（downloaderOperation），多个callback。</li>
<li>网络请求用的是urlsession，downloader实现urlsession的delegate。</li>
<li>是一个单例。</li>
</ul>
<h4 id="2-下载线程-downloaderOperation"><a href="#2-下载线程-downloaderOperation" class="headerlink" title="2. 下载线程 - downloaderOperation"></a>2. 下载线程 - downloaderOperation</h4><ul>
<li>下载线程，继承NSOperation，实现SDWebImageOperation协议，就是取消操作。</li>
<li>用的是urlsession执行下载任务。</li>
<li>实现urlsession的delegate，实际在这里处理callback。</li>
<li>默认超时设置为15s</li>
</ul>
<h3 id="取消模块"><a href="#取消模块" class="headerlink" title="取消模块"></a>取消模块</h3><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">- (<span class="keyword">void</span>)sd_cancelImageLoadOperationWithKey:(<span class="built_in">NSString</span> *)key &#123;</div><div class="line">    <span class="comment">// Cancel in progress downloader from queue</span></div><div class="line">    <span class="built_in">NSMutableDictionary</span> *operationDictionary = [<span class="keyword">self</span> operationDictionary];</div><div class="line">    <span class="keyword">id</span> operations = [operationDictionary objectForKey:key];</div><div class="line">    <span class="keyword">if</span> (operations) &#123;</div><div class="line">        <span class="keyword">if</span> ([operations isKindOfClass:[<span class="built_in">NSArray</span> <span class="keyword">class</span>]]) &#123; <span class="comment">// gif（一组图片）下载</span></div><div class="line">            <span class="keyword">for</span> (<span class="keyword">id</span> &lt;SDWebImageOperation&gt; operation <span class="keyword">in</span> operations) &#123;</div><div class="line">                <span class="keyword">if</span> (operation) &#123;</div><div class="line">                    [operation cancel];</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> ([operations conformsToProtocol:<span class="class"><span class="keyword">@protocol</span>(<span class="title">SDWebImageOperation</span>)])</span>&#123;</div><div class="line">            [(<span class="keyword">id</span>&lt;SDWebImageOperation&gt;) operations cancel];</div><div class="line">        &#125;</div><div class="line">        [operationDictionary removeObjectForKey:key];</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>UIView+WebCacheOperation，view层维护所有Operation</li>
</ul>
<figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">SDWebImageCombinedOperation</span> : <span class="title">NSObject</span> &lt;<span class="title">SDWebImageOperation</span>&gt;</span></div><div class="line"></div><div class="line"><span class="keyword">@property</span> (<span class="keyword">assign</span>, <span class="keyword">nonatomic</span>, <span class="keyword">getter</span> = isCancelled) <span class="built_in">BOOL</span> cancelled;</div><div class="line"><span class="keyword">@property</span> (<span class="keyword">copy</span>, <span class="keyword">nonatomic</span>) SDWebImageNoParamsBlock cancelBlock; <span class="comment">//下载模块</span></div><div class="line"><span class="keyword">@property</span> (<span class="keyword">strong</span>, <span class="keyword">nonatomic</span>) <span class="built_in">NSOperation</span> *cacheOperation; <span class="comment">// 缓存模块</span></div><div class="line"></div><div class="line"><span class="keyword">@end</span></div></pre></td></tr></table></figure>
<ul>
<li>CombinedOperation（SDWebImageOperation协议）组合缓存和下载的Operation</li>
<li>DownloaderOperation（SDWebImageOperation协议） 下载线程的Operation</li>
<li>每次执行读取（下载）图片操作会取消上次的读取（下载）操作。</li>
</ul>
<h3 id="Manager模块"><a href="#Manager模块" class="headerlink" title="Manager模块"></a>Manager模块</h3><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">- (<span class="keyword">id</span> &lt;SDWebImageOperation&gt;)downloadImageWithURL:(<span class="built_in">NSURL</span> *)url</div><div class="line">                                         options:(SDWebImageOptions)options</div><div class="line">                                        progress:(SDWebImageDownloaderProgressBlock)progressBlock</div><div class="line">                                       completed:(SDWebImageCompletionWithFinishedBlock)completedBlock;</div><div class="line"></div><div class="line">- (<span class="built_in">UIImage</span> *)imageManager:(SDWebImageManager *)imageManager transformDownloadedImage:(<span class="built_in">UIImage</span> *)image withURL:(<span class="built_in">NSURL</span> *)imageURL;</div></pre></td></tr></table></figure>
<ul>
<li>MVC结构中的C层。一个中间层。</li>
<li>维护runningOperation</li>
<li>决定执行Cache还是Downloader</li>
<li>维护failedURLs黑名单</li>
<li>默认情况下，对黑名单的url不处理。</li>
<li>transformDownloadedImage -delegate可以对下载的图片先做处理。再做缓存。</li>
</ul>
<h3 id="prefetcher批量下载模块"><a href="#prefetcher批量下载模块" class="headerlink" title="prefetcher批量下载模块"></a>prefetcher批量下载模块</h3><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div></pre></td><td class="code"><pre><div class="line">- (<span class="keyword">void</span>)startPrefetchingAtIndex:(<span class="built_in">NSUInteger</span>)index &#123;</div><div class="line">    <span class="keyword">if</span> (index &gt;= <span class="keyword">self</span>.prefetchURLs.count) <span class="keyword">return</span>;</div><div class="line">    <span class="keyword">self</span>.requestedCount++;</div><div class="line">    [<span class="keyword">self</span>.manager downloadImageWithURL:<span class="keyword">self</span>.prefetchURLs[index] options:<span class="keyword">self</span>.options progress:<span class="literal">nil</span> completed:^(<span class="built_in">UIImage</span> *image, <span class="built_in">NSError</span> *error, SDImageCacheType cacheType, <span class="built_in">BOOL</span> finished, <span class="built_in">NSURL</span> *imageURL) &#123;</div><div class="line">        <span class="keyword">if</span> (!finished) <span class="keyword">return</span>;</div><div class="line">        <span class="keyword">self</span>.finishedCount++;</div><div class="line"></div><div class="line">        <span class="keyword">if</span> (image) &#123;</div><div class="line">            <span class="keyword">if</span> (<span class="keyword">self</span>.progressBlock) &#123;</div><div class="line">                <span class="keyword">self</span>.progressBlock(<span class="keyword">self</span>.finishedCount,[<span class="keyword">self</span>.prefetchURLs count]);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">else</span> &#123;</div><div class="line">            <span class="keyword">if</span> (<span class="keyword">self</span>.progressBlock) &#123;</div><div class="line">                <span class="keyword">self</span>.progressBlock(<span class="keyword">self</span>.finishedCount,[<span class="keyword">self</span>.prefetchURLs count]);</div><div class="line">            &#125;</div><div class="line">            <span class="comment">// Add last failed</span></div><div class="line">            <span class="keyword">self</span>.skippedCount++;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span> ([<span class="keyword">self</span>.delegate respondsToSelector:<span class="keyword">@selector</span>(imagePrefetcher:didPrefetchURL:finishedCount:totalCount:)]) &#123;</div><div class="line">            [<span class="keyword">self</span>.delegate imagePrefetcher:<span class="keyword">self</span></div><div class="line">                            didPrefetchURL:<span class="keyword">self</span>.prefetchURLs[index]</div><div class="line">                             finishedCount:<span class="keyword">self</span>.finishedCount</div><div class="line">                                totalCount:<span class="keyword">self</span>.prefetchURLs.count</div><div class="line">             ];</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span> (<span class="keyword">self</span>.prefetchURLs.count &gt; <span class="keyword">self</span>.requestedCount) &#123;</div><div class="line">            <span class="built_in">dispatch_async</span>(<span class="keyword">self</span>.prefetcherQueue, ^&#123; <span class="comment">//默认主线程</span></div><div class="line">                [<span class="keyword">self</span> startPrefetchingAtIndex:<span class="keyword">self</span>.requestedCount];</div><div class="line">            &#125;);</div><div class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="keyword">self</span>.finishedCount == <span class="keyword">self</span>.requestedCount) &#123;</div><div class="line">            [<span class="keyword">self</span> reportStatus];</div><div class="line">            <span class="keyword">if</span> (<span class="keyword">self</span>.completionBlock) &#123;</div><div class="line">                <span class="keyword">self</span>.completionBlock(<span class="keyword">self</span>.finishedCount, <span class="keyword">self</span>.skippedCount);</div><div class="line">                <span class="keyword">self</span>.completionBlock = <span class="literal">nil</span>;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">self</span>.progressBlock = <span class="literal">nil</span>;</div><div class="line">        &#125;</div><div class="line">    &#125;];</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>默认在主线程请求，调用Manager的downloadImageWithURL：方法。</li>
<li>默认并发数为3。 这里的并发是指一次加3个请求到downloader队列中。·</li>
<li>默认的option是SDWebImageLowPriority。</li>
</ul>
<h3 id="SDWebImage的Options"><a href="#SDWebImage的Options" class="headerlink" title="SDWebImage的Options"></a>SDWebImage的Options</h3><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">typedef</span> <span class="built_in">NS_OPTIONS</span>(<span class="built_in">NSUInteger</span>, SDWebImageOptions) &#123;</div><div class="line">    SDWebImageRetryFailed = <span class="number">1</span> &lt;&lt; <span class="number">0</span>, <span class="comment">//不加入url黑名单</span></div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * By default, image downloads are started during UI interactions, this flags disable this feature,</div><div class="line">     * leading to delayed download on UIScrollView deceleration for instance.</div><div class="line">     */</div><div class="line">    SDWebImageLowPriority = <span class="number">1</span> &lt;&lt; <span class="number">1</span>, <span class="comment">//这个试过了，没起作用。在源代码中只是设置了NSOperation的低优先级。</span></div><div class="line">    SDWebImageCacheMemoryOnly = <span class="number">1</span> &lt;&lt; <span class="number">2</span>, <span class="comment">//只内存缓存</span></div><div class="line">    SDWebImageProgressiveDownload = <span class="number">1</span> &lt;&lt; <span class="number">3</span>, <span class="comment">//图片边下载边展示</span></div><div class="line">    SDWebImageRefreshCached = <span class="number">1</span> &lt;&lt; <span class="number">4</span>, <span class="comment">//重新下载</span></div><div class="line">    SDWebImageContinueInBackground = <span class="number">1</span> &lt;&lt; <span class="number">5</span>, <span class="comment">// 可以在后台下载</span></div><div class="line">    SDWebImageHandleCookies = <span class="number">1</span> &lt;&lt; <span class="number">6</span>,</div><div class="line">    SDWebImageAllowInvalidSSLCertificates = <span class="number">1</span> &lt;&lt; <span class="number">7</span>, <span class="comment">//允许私有证书，用于测试</span></div><div class="line">    SDWebImageHighPriority = <span class="number">1</span> &lt;&lt; <span class="number">8</span>, <span class="comment">// 默认是先进先出的，这个可以提到前面</span></div><div class="line">    SDWebImageDelayPlaceholder = <span class="number">1</span> &lt;&lt; <span class="number">9</span>, <span class="comment">//延后放置占位图</span></div><div class="line">    SDWebImageTransformAnimatedImage = <span class="number">1</span> &lt;&lt; <span class="number">10</span>, <span class="comment">//设置转换图片，可以执行transformDownloadedImage的delegate。</span></div><div class="line">    SDWebImageAvoidAutoSetImage = <span class="number">1</span> &lt;&lt; <span class="number">11</span> <span class="comment">//不自动设置图片</span></div><div class="line">&#125;;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;概述&quot;&gt;&lt;a href=&quot;#概述&quot; class=&quot;headerlink&quot; title=&quot;概述&quot;&gt;&lt;/a&gt;概述&lt;/h3&gt;&lt;p&gt;SDWebImage库是iOS应用中常用的一个图片处理库，包括图片的下载和缓存等。非常好用。本文对其源码做了分析和总结。&lt;/p&gt;
    
    </summary>
    
      <category term="shsoul" scheme="http://xgfe.github.io/categories/shsoul/"/>
    
    
      <category term="iOS" scheme="http://xgfe.github.io/tags/iOS/"/>
    
      <category term="SDWebImage" scheme="http://xgfe.github.io/tags/SDWebImage/"/>
    
  </entry>
  
  <entry>
    <title>【译】用JavaScript解释JavaScript虚拟机-内联缓存（inline caches）</title>
    <link href="http://xgfe.github.io/2017/05/24/LexHuang/Inline-Caches/"/>
    <id>http://xgfe.github.io/2017/05/24/LexHuang/Inline-Caches/</id>
    <published>2017-05-24T03:30:00.000Z</published>
    <updated>2017-09-12T08:43:59.000Z</updated>
    
    <content type="html"><![CDATA[<p>本文来自Vyacheslav Egorov的<a href="http://mrale.ph/blog/2012/06/03/explaining-js-vms-in-js-inline-caches.html" target="_blank" rel="external">Explaining JavaScript VMs in JavaScript - Inline Caches</a>，其中的术语、代码请以原文为准。<br><a id="more"></a></p>
<p>我知道如何实现用语言（或者语言的子集）来实现运行该语言虚拟机。如果我在学校或者有更多的时间我肯定会用JavaScript实现一个JavaScript虚拟机。实际上这并不会变成一个独一无二的JavaScript项目，因为蒙特利尔大学的人所造的<a href="https://github.com/Tachyon-Team/Tachyon/tree/master/source" target="_blank" rel="external">Tachyon</a>已经在某种程度上达到了同样的目的，但是我也有些我自己想要追求的点子。</p>
<p><img src="http://mrale.ph/s3/images/black-box.png" alt=""><br>我则有另一个和自循环虚拟机紧密相关的梦想。我想要帮助JavaScript开发者理解JS引擎的工作方式。我认为理解你正在使用的工具是我们职业生涯中最重要的。越多人不在把JS VM看作是将JavaScript源码转为0-1神秘的黑盒越好。</p>
<p><img src="http://mrale.ph/s3/images/wr2012-assembly.png" alt=""><br>我应该说我不是一个人在追求如何解释虚拟机的内部机制并且帮助人们编写性能更好的代码。全世界有许多人正在尝试做同样的事情。但是我认为又一个问题正在阻止知识有效地被开发者所吸收——我们正在用错误的形式来传授我们的知识。我对此深感愧疚：</p>
<ul>
<li>有时候我把我对V8的了解包装成了很难消化的“做这个，别做那个”的教条化意见。这样的问题在于它对于解释起不到任何帮助并且很容易随着关注人的减少而消失。</li>
<li>有时候我们用了错误的抽象层次来解释虚拟机的工作机制。我喜欢一个想法：看见满是汇编代码的ppt演示可能会鼓励人们去学习汇编并且学会之后会去读ppt演示的内容。但我也害怕有时候这些ppt只会被人忽视和遗忘而对于实践毫无用处。</li>
</ul>
<p>我一直在思考这些问题很长时间了并且我认为用JavaScript来解释JavaScript虚拟机是一个值得尝试的事情。我在WebRebels 2012发表的演讲“V8 Inside Out”追求的正是这一点[<a href="http://vimeo.com/43334972" target="_blank" rel="external">视频</a>][<a href="http://mrale.ph/s3/webrebels2012.pdf" target="_blank" rel="external">演示</a>]并且在本文中我像回顾我一直在奥斯陆所谈论的事情但是不同的是不会有任何音频的干扰。（我认为我写作的方式比我演讲的方式更加严肃些 ☺）。</p>
<h2 id="用JavaScript来实现动态语言"><a href="#用JavaScript来实现动态语言" class="headerlink" title="用JavaScript来实现动态语言"></a>用JavaScript来实现动态语言</h2><p>想象你想要为了一个在语法上非常类似于JavaScript但是有着更简单的对象模型的语言——用表来映射key到任意类型的值来代替JavaScript对象——而来用JavaScript实现其虚拟机。简单起见，让我们想象Lua， 既像JavaScript但作为一个语言又很不一样。我最喜欢的“造出一个充满点的数组然后去计算向量合”的例子看起来大致如下：</p>
<figure class="highlight lua"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">MakePoint</span><span class="params">(x, y)</span></span></div><div class="line">  <span class="keyword">local</span> point = &#123;&#125;</div><div class="line">  point.x = x</div><div class="line">  point.y = y</div><div class="line">  <span class="keyword">return</span> point</div><div class="line"><span class="keyword">end</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">MakeArrayOfPoints</span><span class="params">(N)</span></span></div><div class="line">  <span class="keyword">local</span> array = &#123;&#125;</div><div class="line">  <span class="keyword">local</span> m = <span class="number">-1</span></div><div class="line">  <span class="keyword">for</span> i = <span class="number">0</span>, N <span class="keyword">do</span></div><div class="line">    m = m * <span class="number">-1</span></div><div class="line">    array[i] = MakePoint(m * i, m * -i)</div><div class="line">  <span class="keyword">end</span></div><div class="line">  array.n = N</div><div class="line">  <span class="keyword">return</span> array</div><div class="line"><span class="keyword">end</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">SumArrayOfPoints</span><span class="params">(array)</span></span></div><div class="line">  <span class="keyword">local</span> sum = MakePoint(<span class="number">0</span>, <span class="number">0</span>)</div><div class="line">  <span class="keyword">for</span> i = <span class="number">0</span>, array.n <span class="keyword">do</span></div><div class="line">    sum.x = sum.x + array[i].x</div><div class="line">    sum.y = sum.y + array[i].y</div><div class="line">  <span class="keyword">end</span></div><div class="line">  <span class="keyword">return</span> sum</div><div class="line"><span class="keyword">end</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">CheckResult</span><span class="params">(sum)</span></span></div><div class="line">  <span class="keyword">local</span> x = sum.x</div><div class="line">  <span class="keyword">local</span> y = sum.y</div><div class="line">  <span class="keyword">if</span> x ~= <span class="number">50000</span> <span class="keyword">or</span> y ~= <span class="number">-50000</span> <span class="keyword">then</span></div><div class="line">    <span class="built_in">error</span>(<span class="string">"failed: x = "</span> .. x .. <span class="string">", y = "</span> .. y)</div><div class="line">  <span class="keyword">end</span></div><div class="line"><span class="keyword">end</span></div><div class="line"></div><div class="line"><span class="keyword">local</span> N = <span class="number">100000</span></div><div class="line"><span class="keyword">local</span> array = MakeArrayOfPoints(N)</div><div class="line"><span class="keyword">local</span> start_ms = <span class="built_in">os</span>.<span class="built_in">clock</span>() * <span class="number">1000</span>;</div><div class="line"><span class="keyword">for</span> i = <span class="number">0</span>, <span class="number">5</span> <span class="keyword">do</span></div><div class="line">  <span class="keyword">local</span> sum = SumArrayOfPoints(array)</div><div class="line">  CheckResult(sum)</div><div class="line"><span class="keyword">end</span></div><div class="line"><span class="keyword">local</span> end_ms = <span class="built_in">os</span>.<span class="built_in">clock</span>() * <span class="number">1000</span>;</div><div class="line"><span class="built_in">print</span>(end_ms - start_ms)</div></pre></td></tr></table></figure>
<p>注意我有一个至少检查某些最终结果的微型基准测试的习惯。这有助于当有人发现我的革命性的jsperf测试用例只不过是我自己的bug时，让我不会太尴尬。</p>
<p>如果你拿上面的例子放入一个Lua编译器你会得到类似于下面的东西：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">∮ lua points.lua</div><div class="line">150.2</div></pre></td></tr></table></figure>
<p>很好，但是对于了解虚拟机的工作过程起不到任何帮助。所以让我们想想如果我们有用JavaScript编写的类Lua虚拟机会长什么样。“类”是因为我不想实现完全类似于Lua的语法，我更喜欢只关注于用表来实现对象这一点上。原生编译器应该会将我们的代码编译成下面的JavaScript：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">MakePoint</span>(<span class="params">x, y</span>) </span>&#123;</div><div class="line">  <span class="keyword">var</span> point = <span class="keyword">new</span> Table();</div><div class="line">  STORE(point, <span class="string">'x'</span>, x);</div><div class="line">  STORE(point, <span class="string">'y'</span>, y);</div><div class="line">  <span class="keyword">return</span> point;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">MakeArrayOfPoints</span>(<span class="params">N</span>) </span>&#123;</div><div class="line">  <span class="keyword">var</span> array = <span class="keyword">new</span> Table();</div><div class="line">  <span class="keyword">var</span> m = <span class="number">-1</span>;</div><div class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt;= N; i++) &#123;</div><div class="line">    m = m * <span class="number">-1</span>;</div><div class="line">    STORE(array, i, MakePoint(m * i, m * -i));</div><div class="line">  &#125;</div><div class="line">  STORE(array, <span class="string">'n'</span>, N);</div><div class="line">  <span class="keyword">return</span> array;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">SumArrayOfPoints</span>(<span class="params">array</span>) </span>&#123;</div><div class="line">  <span class="keyword">var</span> sum = MakePoint(<span class="number">0</span>, <span class="number">0</span>);</div><div class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt;= LOAD(array, <span class="string">'n'</span>); i++) &#123;</div><div class="line">    STORE(sum, <span class="string">'x'</span>, LOAD(sum, <span class="string">'x'</span>) + LOAD(LOAD(array, i), <span class="string">'x'</span>));</div><div class="line">    STORE(sum, <span class="string">'y'</span>, LOAD(sum, <span class="string">'y'</span>) + LOAD(LOAD(array, i), <span class="string">'y'</span>));</div><div class="line">  &#125;</div><div class="line">  <span class="keyword">return</span> sum;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">CheckResult</span>(<span class="params">sum</span>) </span>&#123;</div><div class="line">  <span class="keyword">var</span> x = LOAD(sum, <span class="string">'x'</span>);</div><div class="line">  <span class="keyword">var</span> y = LOAD(sum, <span class="string">'y'</span>);</div><div class="line">  <span class="keyword">if</span> (x !== <span class="number">50000</span> || y !== <span class="number">-50000</span>) &#123;</div><div class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">"failed: x = "</span> + x + <span class="string">", y = "</span> + y);</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">var</span> N = <span class="number">100000</span>;</div><div class="line"><span class="keyword">var</span> array = MakeArrayOfPoints(N);</div><div class="line"><span class="keyword">var</span> start = LOAD(os, <span class="string">'clock'</span>)() * <span class="number">1000</span>;</div><div class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt;= <span class="number">5</span>; i++) &#123;</div><div class="line">  <span class="keyword">var</span> sum = SumArrayOfPoints(array);</div><div class="line">  CheckResult(sum);</div><div class="line">&#125;</div><div class="line"><span class="keyword">var</span> end = LOAD(os, <span class="string">'clock'</span>)() * <span class="number">1000</span>;</div><div class="line">print(end - start);</div></pre></td></tr></table></figure>
<p>但是如果你尝试用d8（V8的独立shell）去运行编译后的代码，它会很礼貌的拒绝：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">∮ d8 points.js</div><div class="line">points.js:9: ReferenceError: Table is not defined</div><div class="line">  var array = new Table();</div><div class="line">                  ^</div><div class="line">ReferenceError: Table is not defined</div><div class="line">    at MakeArrayOfPoints (points.js:9:19)</div><div class="line">    at points.js:37:13</div></pre></td></tr></table></figure>
<p>失败的原因很简单：我们还缺少负责实现对象模型和存取语法的运行时系统代码。这可能看起来很明显，但是我想要强调的是：虚拟机从外面看起来像是黑盒，在内部实际上是一系列盒子为了得到出最佳性能的相互协作。这些盒子是：编译器、运行时例程、对象模型、垃圾回收等。幸运的是我们的语言和例子非常简单所以我们的运行时系统仅仅多了几行代码：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Table</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="comment">// Map from ES Harmony is a simple dictionary-style collection.</span></div><div class="line">  <span class="keyword">this</span>.map = <span class="keyword">new</span> <span class="built_in">Map</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line">Table.prototype = &#123;</div><div class="line">  <span class="attr">load</span>: <span class="function"><span class="keyword">function</span> (<span class="params">key</span>) </span>&#123; <span class="keyword">return</span> <span class="keyword">this</span>.map.get(key); &#125;,</div><div class="line">  <span class="attr">store</span>: <span class="function"><span class="keyword">function</span> (<span class="params">key, value</span>) </span>&#123; <span class="keyword">this</span>.map.set(key, value); &#125;</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">CHECK_TABLE</span>(<span class="params">t</span>) </span>&#123;</div><div class="line">  <span class="keyword">if</span> (!(t <span class="keyword">instanceof</span> Table)) &#123;</div><div class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">"table expected"</span>);</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">LOAD</span>(<span class="params">t, k</span>) </span>&#123;</div><div class="line">  CHECK_TABLE(t);</div><div class="line">  <span class="keyword">return</span> t.load(k);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">STORE</span>(<span class="params">t, k, v</span>) </span>&#123;</div><div class="line">  CHECK_TABLE(t);</div><div class="line">  t.store(k, v);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">var</span> os = <span class="keyword">new</span> Table();</div><div class="line"></div><div class="line">STORE(os, <span class="string">'clock'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="keyword">return</span> <span class="built_in">Date</span>.now() / <span class="number">1000</span>;</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p>注意到我用了<a href="http://wiki.ecmascript.org/doku.php?id=harmony:simple_maps_and_sets" target="_blank" rel="external">ES6的Map</a>而不是一般的JavaScript对象因为潜在的表可以使用任何键，而不仅是字符串形式的。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">∮ d8 --harmony quasi-lua-runtime.js points.js</div><div class="line">737</div></pre></td></tr></table></figure>
<p><img src="http://mrale.ph/s3/images/wr2012-lookup.png" alt=""><br>现在我们编译后的代码可以执行但是却慢地令人失望，因为每一次读和写不得不跨越所有这些抽象层级后才能拿到值。让我们通过所有JavaScript虚拟机都有的最基本的优化inline caching来尝试减少这些开销。即使是用Java实现的JS虚拟机最终也会使用它因为动态调用的本质是被暴露在字节码层面的结构化的內联缓存。Inline caching（在V8资源里通常简写为IC）实际上是一门近30年的非常古老的技术，最初用在Smalltalk虚拟机上。</p>
<h2 id="好鸭子总是叫得一模一样"><a href="#好鸭子总是叫得一模一样" class="headerlink" title="好鸭子总是叫得一模一样"></a>好鸭子总是叫得一模一样</h2><p>内联缓存（Inline caching）背后的思想非常简单：创建一个高速路来绕过运行时系统来读取对象的属性:对传入的对象及其属性作出某种假设，然后通过一个低成本的方式验证这个假设是否正确，如果正确就读取上次缓存的结果。在充满了动态类型和晚绑定以及其他古怪行为——比如eval——的语言里对一个对象作出合理的假设是非常困难的，所以我们退而求其次，让我们的读／写操作能够有学习能力：一旦它们看见某个对象它们就可以以某种方式来自适应，使得之后的读取操作在遇到类似结构的对象时能够更快地进行。在某种意义上，我们将要在读／写操作上缓存关于之前见过的对象的布局的相关知识——这也是内联缓存这个名字的由来。内联缓存可以被用在几乎所有需要动态行为的操作上，只要你可以找到正确的高速路：算数操作、调用自由函数、方法调用等等。有些内联缓存还能缓存不止一条快速通道，这些内联缓存就变成了多态的。<br><img src="http://mrale.ph/s3/images/wr2012-lookup-ic.png" alt=""></p>
<p>如果我们开始思考如何应用内联缓存到上面编译后的代码，答案就变得显而易见了：我们需要改变我们的对象模型。我们不可能从一个map中进行快速读取，因为我们总是要调用get方法。[如果我们能够窥探map后的纯哈希表，我们就可以通过缓存桶索引来让内联缓存替我们工作而不需要相处一个新的对象布局。]</p>
<h2 id="探索隐藏结构"><a href="#探索隐藏结构" class="headerlink" title="探索隐藏结构"></a>探索隐藏结构</h2><p><img src="http://mrale.ph/s3/images/wr2012-hidden-classes.png" alt=""><br>出于效率角度考虑，用作数据结构的表应该更类似于C结构：带有固定偏移量的命名字段序列。这样表就和数组类似：我们希望数字形式的属性的存储类似于数组。但是很显然并不是所有表的键都是数字：键可以被设计成非字符串非数字或者包含太多字符串命名的属性，并且随着表的修改键也会随之修改。不幸的是，我们不能做任何昂贵的类型推断。取而代之我们必须找在程序运行期间的每一个表背后的结构，并且随着程序的运行可以创建和修改它们。幸运的是，有一个众所周知的技术 ☺：隐藏类（hidden classes）。</p>
<p>隐藏类背后的思想可以归结为以下两点：</p>
<ol>
<li>对于每个javascript对象，运行时系统都会将其合一个hidden class关联起来。就像Java VM会关联一个java.lang.Class的实例给每个对象一样。</li>
<li>如果对象的布局改变了，则运行时就会 找到一个hidden class或者创建一个新的hidden class来匹配这个新对象布局并且连接到该对象上。</li>
</ol>
<p>隐藏类有个非常重要的特性：它们运行虚拟机通过简单比对缓存过的隐藏类来检查关于某个对象布局的假设。这正是我们的内联缓存功能所需要的。让我们为我们的类-Lua运行时来实现一些简单的隐藏类系统。每个隐藏类本质上是属性描述符的集合，每个描述符要么是一个真正的属性，要么是一个过渡（transition）：从一个没有该属性的类指向一个有该属性的类。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Transition</span>(<span class="params">klass</span>) </span>&#123;</div><div class="line">  <span class="keyword">this</span>.klass = klass;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Property</span>(<span class="params">index</span>) </span>&#123;</div><div class="line">  <span class="keyword">this</span>.index = index;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Klass</span>(<span class="params">kind</span>) </span>&#123;</div><div class="line">  <span class="comment">// Classes are "fast" if they are C-struct like and "slow" is they are Map-like.</span></div><div class="line">  <span class="keyword">this</span>.kind = kind;</div><div class="line">  <span class="keyword">this</span>.descriptors = <span class="keyword">new</span> <span class="built_in">Map</span>;</div><div class="line">  <span class="keyword">this</span>.keys = [];</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>过渡之所以存在是为了让多个对象之间能共享隐藏类：如果你有两个对象共享了隐藏类并且你为它们同时增加了某些属性，你不希望得到不同的隐藏类。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div></pre></td><td class="code"><pre><div class="line">Klass.prototype = &#123;</div><div class="line">  <span class="comment">// Create hidden class with a new property that does not exist on</span></div><div class="line">  <span class="comment">// the current hidden class.</span></div><div class="line">  addProperty: <span class="function"><span class="keyword">function</span> (<span class="params">key</span>) </span>&#123;</div><div class="line">    <span class="keyword">var</span> klass = <span class="keyword">this</span>.clone();</div><div class="line">    klass.append(key);</div><div class="line">    <span class="comment">// Connect hidden classes with transition to enable sharing:</span></div><div class="line">    <span class="comment">//           this == add property key ==&gt; klass</span></div><div class="line">    <span class="keyword">this</span>.descriptors.set(key, <span class="keyword">new</span> Transition(klass));</div><div class="line">    <span class="keyword">return</span> klass;</div><div class="line">  &#125;,</div><div class="line"></div><div class="line">  <span class="attr">hasProperty</span>: <span class="function"><span class="keyword">function</span> (<span class="params">key</span>) </span>&#123;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.descriptors.has(key);</div><div class="line">  &#125;,</div><div class="line"></div><div class="line">  <span class="attr">getDescriptor</span>: <span class="function"><span class="keyword">function</span> (<span class="params">key</span>) </span>&#123;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.descriptors.get(key);</div><div class="line">  &#125;,</div><div class="line"></div><div class="line">  <span class="attr">getIndex</span>: <span class="function"><span class="keyword">function</span> (<span class="params">key</span>) </span>&#123;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.getDescriptor(key).index;</div><div class="line">  &#125;,</div><div class="line"></div><div class="line">  <span class="comment">// Create clone of this hidden class that has same properties</span></div><div class="line">  <span class="comment">// at same offsets (but does not have any transitions).</span></div><div class="line">  clone: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">var</span> klass = <span class="keyword">new</span> Klass(<span class="keyword">this</span>.kind);</div><div class="line">    klass.keys = <span class="keyword">this</span>.keys.slice(<span class="number">0</span>);</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="keyword">this</span>.keys.length; i++) &#123;</div><div class="line">      <span class="keyword">var</span> key = <span class="keyword">this</span>.keys[i];</div><div class="line">      klass.descriptors.set(key, <span class="keyword">this</span>.descriptors.get(key));</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> klass;</div><div class="line">  &#125;,</div><div class="line"></div><div class="line">  <span class="comment">// Add real property to descriptors.</span></div><div class="line">  append: <span class="function"><span class="keyword">function</span> (<span class="params">key</span>) </span>&#123;</div><div class="line">    <span class="keyword">this</span>.keys.push(key);</div><div class="line">    <span class="keyword">this</span>.descriptors.set(key, <span class="keyword">new</span> Property(<span class="keyword">this</span>.keys.length - <span class="number">1</span>));</div><div class="line">  &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<p>现在我们可以让我们的表变得更加灵活并且能允许它们适应其的构造过程</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> ROOT_KLASS = <span class="keyword">new</span> Klass(<span class="string">"fast"</span>);</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Table</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="comment">// All tables start from the fast empty root hidden class and form </span></div><div class="line">  <span class="comment">// a single tree. In V8 hidden classes actually form a forest - </span></div><div class="line">  <span class="comment">// there are multiple root classes, e.g. one for each constructor. </span></div><div class="line">  <span class="comment">// This is partially due to the fact that hidden classes in V8 </span></div><div class="line">  <span class="comment">// encapsulate constructor specific information, e.g. prototype </span></div><div class="line">  <span class="comment">// poiinter is actually stored in the hidden class and not in the </span></div><div class="line">  <span class="comment">// object itself so classes with different prototypes must have </span></div><div class="line">  <span class="comment">// different hidden classes even if they have the same structure.</span></div><div class="line">  <span class="comment">// However having multiple root classes also allows to evolve these</span></div><div class="line">  <span class="comment">// trees separately capturing class specific evolution independently.</span></div><div class="line">  <span class="keyword">this</span>.klass = ROOT_KLASS;</div><div class="line">  <span class="keyword">this</span>.properties = [];  <span class="comment">// Array of named properties: 'x','y',...</span></div><div class="line">  <span class="keyword">this</span>.elements = [];  <span class="comment">// Array of indexed properties: 0, 1, ...</span></div><div class="line">  <span class="comment">// We will actually cheat a little bit and allow any int32 to go here,</span></div><div class="line">  <span class="comment">// we will also allow V8 to select appropriate representation for</span></div><div class="line">  <span class="comment">// the array's backing store. There are too many details to cover in</span></div><div class="line">  <span class="comment">// a single blog post :-)</span></div><div class="line">&#125;</div><div class="line"></div><div class="line">Table.prototype = &#123;</div><div class="line">  <span class="attr">load</span>: <span class="function"><span class="keyword">function</span> (<span class="params">key</span>) </span>&#123;</div><div class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.klass.kind === <span class="string">"slow"</span>) &#123;</div><div class="line">      <span class="comment">// Slow class =&gt; properties are represented as Map.</span></div><div class="line">      <span class="keyword">return</span> <span class="keyword">this</span>.properties.get(key);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">// This is fast table with indexed and named properties only.</span></div><div class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> key === <span class="string">"number"</span> &amp;&amp; (key | <span class="number">0</span>) === key) &#123;  <span class="comment">// Indexed property.</span></div><div class="line">      <span class="keyword">return</span> <span class="keyword">this</span>.elements[key];</div><div class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="keyword">typeof</span> key === <span class="string">"string"</span>) &#123;  <span class="comment">// Named property.</span></div><div class="line">      <span class="keyword">var</span> idx = <span class="keyword">this</span>.findPropertyForRead(key);</div><div class="line">      <span class="keyword">return</span> (idx &gt;= <span class="number">0</span>) ? <span class="keyword">this</span>.properties[idx] : <span class="keyword">void</span> <span class="number">0</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">// There can be only string&amp;number keys on fast table.</span></div><div class="line">    <span class="keyword">return</span> <span class="keyword">void</span> <span class="number">0</span>;</div><div class="line">  &#125;,</div><div class="line"></div><div class="line">  <span class="attr">store</span>: <span class="function"><span class="keyword">function</span> (<span class="params">key, value</span>) </span>&#123;</div><div class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.klass.kind === <span class="string">"slow"</span>) &#123;</div><div class="line">      <span class="comment">// Slow class =&gt; properties are represented as Map.</span></div><div class="line">      <span class="keyword">this</span>.properties.set(key, value);</div><div class="line">      <span class="keyword">return</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">// This is fast table with indexed and named properties only.</span></div><div class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> key === <span class="string">"number"</span> &amp;&amp; (key | <span class="number">0</span>) === key) &#123;  <span class="comment">// Indexed property.</span></div><div class="line">      <span class="keyword">this</span>.elements[key] = value;</div><div class="line">      <span class="keyword">return</span>;</div><div class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="keyword">typeof</span> key === <span class="string">"string"</span>) &#123;  <span class="comment">// Named property.</span></div><div class="line">      <span class="keyword">var</span> index = <span class="keyword">this</span>.findPropertyForWrite(key);</div><div class="line">      <span class="keyword">if</span> (index &gt;= <span class="number">0</span>) &#123;</div><div class="line">        <span class="keyword">this</span>.properties[index] = value;</div><div class="line">        <span class="keyword">return</span>;</div><div class="line">      &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">this</span>.convertToSlow();</div><div class="line">    <span class="keyword">this</span>.store(key, value);</div><div class="line">  &#125;,</div><div class="line"></div><div class="line">  <span class="comment">// Find property or add one if possible, returns property index</span></div><div class="line">  <span class="comment">// or -1 if we have too many properties and should switch to slow.</span></div><div class="line">  findPropertyForWrite: <span class="function"><span class="keyword">function</span> (<span class="params">key</span>) </span>&#123;</div><div class="line">    <span class="keyword">if</span> (!<span class="keyword">this</span>.klass.hasProperty(key)) &#123;  <span class="comment">// Try adding property if it does not exist.</span></div><div class="line">      <span class="comment">// To many properties! Achtung! Fast case kaput.</span></div><div class="line">      <span class="keyword">if</span> (<span class="keyword">this</span>.klass.keys.length &gt; <span class="number">20</span>) <span class="keyword">return</span> <span class="number">-1</span>;</div><div class="line"></div><div class="line">      <span class="comment">// Switch class to the one that has this property.</span></div><div class="line">      <span class="keyword">this</span>.klass = <span class="keyword">this</span>.klass.addProperty(key);</div><div class="line">      <span class="keyword">return</span> <span class="keyword">this</span>.klass.getIndex(key);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">var</span> desc = <span class="keyword">this</span>.klass.getDescriptor(key);</div><div class="line">    <span class="keyword">if</span> (desc <span class="keyword">instanceof</span> Transition) &#123;</div><div class="line">      <span class="comment">// Property does not exist yet but we have a transition to the class that has it.</span></div><div class="line">      <span class="keyword">this</span>.klass = desc.klass;</div><div class="line">      <span class="keyword">return</span> <span class="keyword">this</span>.klass.getIndex(key);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">// Get index of existing property.</span></div><div class="line">    <span class="keyword">return</span> desc.index;</div><div class="line">  &#125;,</div><div class="line"></div><div class="line">  <span class="comment">// Find property index if property exists, return -1 otherwise.</span></div><div class="line">  findPropertyForRead: <span class="function"><span class="keyword">function</span> (<span class="params">key</span>) </span>&#123;</div><div class="line">    <span class="keyword">if</span> (!<span class="keyword">this</span>.klass.hasProperty(key)) <span class="keyword">return</span> <span class="number">-1</span>;</div><div class="line">    <span class="keyword">var</span> desc = <span class="keyword">this</span>.klass.getDescriptor(key);</div><div class="line">    <span class="keyword">if</span> (!(desc <span class="keyword">instanceof</span> Property)) <span class="keyword">return</span> <span class="number">-1</span>;  <span class="comment">// Here we are not interested in transitions.</span></div><div class="line">    <span class="keyword">return</span> desc.index;</div><div class="line">  &#125;,</div><div class="line"></div><div class="line">  <span class="comment">// Copy all properties into the Map and switch to slow class.</span></div><div class="line">  convertToSlow: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">var</span> map = <span class="keyword">new</span> <span class="built_in">Map</span>;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="keyword">this</span>.klass.keys.length; i++) &#123;</div><div class="line">      <span class="keyword">var</span> key = <span class="keyword">this</span>.klass.keys[i];</div><div class="line">      <span class="keyword">var</span> val = <span class="keyword">this</span>.properties[i];</div><div class="line">      map.set(key, val);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="built_in">Object</span>.keys(<span class="keyword">this</span>.elements).forEach(<span class="function"><span class="keyword">function</span> (<span class="params">key</span>) </span>&#123;</div><div class="line">      <span class="keyword">var</span> val = <span class="keyword">this</span>.elements[key];</div><div class="line">      map.set(key | <span class="number">0</span>, val);  <span class="comment">// Funky JS, force key back to int32.</span></div><div class="line">    &#125;, <span class="keyword">this</span>);</div><div class="line"></div><div class="line">    <span class="keyword">this</span>.properties = map;</div><div class="line">    <span class="keyword">this</span>.elements = <span class="literal">null</span>;</div><div class="line">    <span class="keyword">this</span>.klass = <span class="keyword">new</span> Klass(<span class="string">"slow"</span>);</div><div class="line">  &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<blockquote>
<p>我不打算一行一行地解释上面的代码，因为它已经是用JavaScript书写的了；而不是C++ 或者 汇编…这正是使用JavaScript的意义所在。然而你可以通过评论或者邮件来询问任何不理解的地方。</p>
</blockquote>
<p>既然我们已经在运行时系统里加入了隐藏类，使得我们能够快速检查对象的结构并且通过它们的索引来快速读取属性，我们只差实现内联缓存了。这需要在编译器和运行时系统增加一些新的功能（还记得我谈论过虚拟机内不同成员之间的协作么？）。</p>
<h2 id="打包生成后代码"><a href="#打包生成后代码" class="headerlink" title="打包生成后代码"></a>打包生成后代码</h2><p>实现内联缓存的途径之一是将其分割成两个部分：生成代码里的可变调用点和可以被调用点调用的一系列存根（stubs，一小片生成的本地代码）。非常重要的一点是：存根本身必须能从调用它们的调用点（或者运行时系统）中找到：存根只存放特定假设下的编译后的快速路径，如果这些假设对存根遇到的对象不适用，则存根可以初始化调用该存根的调用点的变动（打包，patching），使得该调用点能够适应新的情况。我们的纯JavaScript仍然包含两个部分：</p>
<ol>
<li>一个全局变量，每个ic都会使用一个全局变量来模拟可变调用指令;</li>
<li>并使用闭包来代替存根。<br><img src="http://mrale.ph/s3/images/wr2012-inline-cache.png" alt=""></li>
</ol>
<p>在本地代码里， V8通过在栈上监听返回地址来找到要打包的内联缓存点。我们不能通过纯JavaScript来达到这一点（arguments.caller的粒度不够细）。所以我们将只会显式地传递内联缓存的id到内联缓存的存根。通过内联缓存优化后的代码如下：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// Initially all ICs are in uninitialized state.</span></div><div class="line"><span class="comment">// They are not hitting the cache and always missing into runtime system.</span></div><div class="line"><span class="keyword">var</span> STORE$<span class="number">0</span> = NAMED_STORE_MISS;</div><div class="line"><span class="keyword">var</span> STORE$<span class="number">1</span> = NAMED_STORE_MISS;</div><div class="line"><span class="keyword">var</span> KEYED_STORE$<span class="number">2</span> = KEYED_STORE_MISS;</div><div class="line"><span class="keyword">var</span> STORE$<span class="number">3</span> = NAMED_STORE_MISS;</div><div class="line"><span class="keyword">var</span> LOAD$<span class="number">4</span> = NAMED_LOAD_MISS;</div><div class="line"><span class="keyword">var</span> STORE$<span class="number">5</span> = NAMED_STORE_MISS;</div><div class="line"><span class="keyword">var</span> LOAD$<span class="number">6</span> = NAMED_LOAD_MISS;</div><div class="line"><span class="keyword">var</span> LOAD$<span class="number">7</span> = NAMED_LOAD_MISS;</div><div class="line"><span class="keyword">var</span> KEYED_LOAD$<span class="number">8</span> = KEYED_LOAD_MISS;</div><div class="line"><span class="keyword">var</span> STORE$<span class="number">9</span> = NAMED_STORE_MISS;</div><div class="line"><span class="keyword">var</span> LOAD$<span class="number">10</span> = NAMED_LOAD_MISS;</div><div class="line"><span class="keyword">var</span> LOAD$<span class="number">11</span> = NAMED_LOAD_MISS;</div><div class="line"><span class="keyword">var</span> KEYED_LOAD$<span class="number">12</span> = KEYED_LOAD_MISS;</div><div class="line"><span class="keyword">var</span> LOAD$<span class="number">13</span> = NAMED_LOAD_MISS;</div><div class="line"><span class="keyword">var</span> LOAD$<span class="number">14</span> = NAMED_LOAD_MISS;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">MakePoint</span>(<span class="params">x, y</span>) </span>&#123;</div><div class="line">  <span class="keyword">var</span> point = <span class="keyword">new</span> Table();</div><div class="line">  STORE$<span class="number">0</span>(point, <span class="string">'x'</span>, x, <span class="number">0</span>);  <span class="comment">// The last number is IC's id: STORE$0 &amp;rArr; id is 0</span></div><div class="line">  STORE$<span class="number">1</span>(point, <span class="string">'y'</span>, y, <span class="number">1</span>);</div><div class="line">  <span class="keyword">return</span> point;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">MakeArrayOfPoints</span>(<span class="params">N</span>) </span>&#123;</div><div class="line">  <span class="keyword">var</span> array = <span class="keyword">new</span> Table();</div><div class="line">  <span class="keyword">var</span> m = <span class="number">-1</span>;</div><div class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt;= N; i++) &#123;</div><div class="line">    m = m * <span class="number">-1</span>;</div><div class="line">    <span class="comment">// Now we are also distinguishing between expressions x[p] and x.p.</span></div><div class="line">    <span class="comment">// The fist one is called keyed load/store and the second one is called</span></div><div class="line">    <span class="comment">// named load/store.</span></div><div class="line">    <span class="comment">// The main difference is that named load/stores use a fixed known</span></div><div class="line">    <span class="comment">// constant string key and thus can be specialized for a fixed property</span></div><div class="line">    <span class="comment">// offset.</span></div><div class="line">    KEYED_STORE$<span class="number">2</span>(array, i, MakePoint(m * i, m * -i), <span class="number">2</span>);</div><div class="line">  &#125;</div><div class="line">  STORE$<span class="number">3</span>(array, <span class="string">'n'</span>, N, <span class="number">3</span>);</div><div class="line">  <span class="keyword">return</span> array;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">SumArrayOfPoints</span>(<span class="params">array</span>) </span>&#123;</div><div class="line">  <span class="keyword">var</span> sum = MakePoint(<span class="number">0</span>, <span class="number">0</span>);</div><div class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt;= LOAD$<span class="number">4</span>(array, <span class="string">'n'</span>, <span class="number">4</span>); i++) &#123;</div><div class="line">    STORE$<span class="number">5</span>(sum, <span class="string">'x'</span>, LOAD$<span class="number">6</span>(sum, <span class="string">'x'</span>, <span class="number">6</span>) + LOAD$<span class="number">7</span>(KEYED_LOAD$<span class="number">8</span>(array, i, <span class="number">8</span>), <span class="string">'x'</span>, <span class="number">7</span>), <span class="number">5</span>);</div><div class="line">    STORE$<span class="number">9</span>(sum, <span class="string">'y'</span>, LOAD$<span class="number">10</span>(sum, <span class="string">'y'</span>, <span class="number">10</span>) + LOAD$<span class="number">11</span>(KEYED_LOAD$<span class="number">12</span>(array, i, <span class="number">12</span>), <span class="string">'y'</span>, <span class="number">11</span>), <span class="number">9</span>);</div><div class="line">  &#125;</div><div class="line">  <span class="keyword">return</span> sum;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">CheckResults</span>(<span class="params">sum</span>) </span>&#123;</div><div class="line">  <span class="keyword">var</span> x = LOAD$<span class="number">13</span>(sum, <span class="string">'x'</span>, <span class="number">13</span>);</div><div class="line">  <span class="keyword">var</span> y = LOAD$<span class="number">14</span>(sum, <span class="string">'y'</span>, <span class="number">14</span>);</div><div class="line">  <span class="keyword">if</span> (x !== <span class="number">50000</span> || y !== <span class="number">-50000</span>) <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">"failed x: "</span> + x + <span class="string">", y:"</span> + y);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>上述的改变依旧是不言自明的：每一个属性的读/写点都有属于它们自己的、带有id的内联缓存。距离最终完成还剩一小步：实现未命中（MISS）存根和可以生存特定存根的“存根编译器”：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">NAMED_LOAD_MISS</span>(<span class="params">t, k, ic</span>) </span>&#123;</div><div class="line">  <span class="keyword">var</span> v = LOAD(t, k);</div><div class="line">  <span class="keyword">if</span> (t.klass.kind === <span class="string">"fast"</span>) &#123;</div><div class="line">    <span class="comment">// Create a load stub that is specialized for a fixed class and key k and</span></div><div class="line">    <span class="comment">// loads property from a fixed offset.</span></div><div class="line">    <span class="keyword">var</span> stub = CompileNamedLoadFastProperty(t.klass, k);</div><div class="line">    PatchIC(<span class="string">"LOAD"</span>, ic, stub);</div><div class="line">  &#125;</div><div class="line">  <span class="keyword">return</span> v;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">NAMED_STORE_MISS</span>(<span class="params">t, k, v, ic</span>) </span>&#123;</div><div class="line">  <span class="keyword">var</span> klass_before = t.klass;</div><div class="line">  STORE(t, k, v);</div><div class="line">  <span class="keyword">var</span> klass_after = t.klass;</div><div class="line">  <span class="keyword">if</span> (klass_before.kind === <span class="string">"fast"</span> &amp;&amp;</div><div class="line">      klass_after.kind === <span class="string">"fast"</span>) &#123;</div><div class="line">    <span class="comment">// Create a store stub that is specialized for a fixed transition between classes</span></div><div class="line">    <span class="comment">// and a fixed key k that stores property into a fixed offset and replaces</span></div><div class="line">    <span class="comment">// object's hidden class if necessary.</span></div><div class="line">    <span class="keyword">var</span> stub = CompileNamedStoreFastProperty(klass_before, klass_after, k);</div><div class="line">    PatchIC(<span class="string">"STORE"</span>, ic, stub);</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">KEYED_LOAD_MISS</span>(<span class="params">t, k, ic</span>) </span>&#123;</div><div class="line">  <span class="keyword">var</span> v = LOAD(t, k);</div><div class="line">  <span class="keyword">if</span> (t.klass.kind === <span class="string">"fast"</span> &amp;&amp; (<span class="keyword">typeof</span> k === <span class="string">'number'</span> &amp;&amp; (k | <span class="number">0</span>) === k)) &#123;</div><div class="line">    <span class="comment">// Create a stub for the fast load from the elements array.</span></div><div class="line">    <span class="comment">// Does not actually depend on the class but could if we had more complicated</span></div><div class="line">    <span class="comment">// storage system.</span></div><div class="line">    <span class="keyword">var</span> stub = CompileKeyedLoadFastElement();</div><div class="line">    PatchIC(<span class="string">"KEYED_LOAD"</span>, ic, stub);</div><div class="line">  &#125;</div><div class="line">  <span class="keyword">return</span> v;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">KEYED_STORE_MISS</span>(<span class="params">t, k, v, ic</span>) </span>&#123;</div><div class="line">  STORE(t, k, v);</div><div class="line">  <span class="keyword">if</span> (t.klass.kind === <span class="string">"fast"</span> &amp;&amp; (<span class="keyword">typeof</span> k === <span class="string">'number'</span> &amp;&amp; (k | <span class="number">0</span>) === k)) &#123;</div><div class="line">    <span class="comment">// Create a stub for the fast store into the elements array.</span></div><div class="line">    <span class="comment">// Does not actually depend on the class but could if we had more complicated</span></div><div class="line">    <span class="comment">// storage system.</span></div><div class="line">    <span class="keyword">var</span> stub = CompileKeyedStoreFastElement();</div><div class="line">    PatchIC(<span class="string">"KEYED_STORE"</span>, ic, stub);</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">PatchIC</span>(<span class="params">kind, id, stub</span>) </span>&#123;</div><div class="line">  <span class="keyword">this</span>[kind + <span class="string">"$"</span> + id] = stub;  <span class="comment">// non-strict JS funkiness: this is global object.</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">CompileNamedLoadFastProperty</span>(<span class="params">klass, key</span>) </span>&#123;</div><div class="line">  <span class="comment">// Key is known to be constant (named load). Specialize index.</span></div><div class="line">  <span class="keyword">var</span> index = klass.getIndex(key);</div><div class="line"></div><div class="line">  <span class="function"><span class="keyword">function</span> <span class="title">KeyedLoadFastProperty</span>(<span class="params">t, k, ic</span>) </span>&#123;</div><div class="line">    <span class="keyword">if</span> (t.klass !== klass) &#123;</div><div class="line">      <span class="comment">// Expected klass does not match. Can't use cached index.</span></div><div class="line">      <span class="comment">// Fall through to the runtime system.</span></div><div class="line">      <span class="keyword">return</span> NAMED_LOAD_MISS(t, k, ic);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> t.properties[index];  <span class="comment">// Veni. Vidi. Vici.</span></div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="keyword">return</span> KeyedLoadFastProperty;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">CompileNamedStoreFastProperty</span>(<span class="params">klass_before, klass_after, key</span>) </span>&#123;</div><div class="line">  <span class="comment">// Key is known to be constant (named load). Specialize index.</span></div><div class="line">  <span class="keyword">var</span> index = klass_after.getIndex(key);</div><div class="line"></div><div class="line">  <span class="keyword">if</span> (klass_before !== klass_after) &#123;</div><div class="line">    <span class="comment">// Transition happens during the store.</span></div><div class="line">    <span class="comment">// Compile stub that updates hidden class.</span></div><div class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params">t, k, v, ic</span>) </span>&#123;</div><div class="line">      <span class="keyword">if</span> (t.klass !== klass_before) &#123;</div><div class="line">        <span class="comment">// Expected klass does not match. Can't use cached index.</span></div><div class="line">        <span class="comment">// Fall through to the runtime system.</span></div><div class="line">        <span class="keyword">return</span> NAMED_STORE_MISS(t, k, v, ic);</div><div class="line">      &#125;</div><div class="line">      t.properties[index] = v;  <span class="comment">// Fast store.</span></div><div class="line">      t.klass = klass_after;  <span class="comment">// T-t-t-transition!</span></div><div class="line">    &#125;</div><div class="line">  &#125; <span class="keyword">else</span> &#123;</div><div class="line">    <span class="comment">// Write to an existing property. No transition.</span></div><div class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params">t, k, v, ic</span>) </span>&#123;</div><div class="line">      <span class="keyword">if</span> (t.klass !== klass_before) &#123;</div><div class="line">        <span class="comment">// Expected klass does not match. Can't use cached index.</span></div><div class="line">        <span class="comment">// Fall through to the runtime system.</span></div><div class="line">        <span class="keyword">return</span> NAMED_STORE_MISS(t, k, v, ic);</div><div class="line">      &#125;</div><div class="line">      t.properties[index] = v;  <span class="comment">// Fast store.</span></div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">CompileKeyedLoadFastElement</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="function"><span class="keyword">function</span> <span class="title">KeyedLoadFastElement</span>(<span class="params">t, k, ic</span>) </span>&#123;</div><div class="line">    <span class="keyword">if</span> (t.klass.kind !== <span class="string">"fast"</span> || !(<span class="keyword">typeof</span> k === <span class="string">'number'</span> &amp;&amp; (k | <span class="number">0</span>) === k)) &#123;</div><div class="line">      <span class="comment">// If table is slow or key is not a number we can't use fast-path.</span></div><div class="line">      <span class="comment">// Fall through to the runtime system, it can handle everything.</span></div><div class="line">      <span class="keyword">return</span> KEYED_LOAD_MISS(t, k, ic);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> t.elements[k];</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="keyword">return</span> KeyedLoadFastElement;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">CompileKeyedStoreFastElement</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="function"><span class="keyword">function</span> <span class="title">KeyedStoreFastElement</span>(<span class="params">t, k, v, ic</span>) </span>&#123;</div><div class="line">    <span class="keyword">if</span> (t.klass.kind !== <span class="string">"fast"</span> || !(<span class="keyword">typeof</span> k === <span class="string">'number'</span> &amp;&amp; (k | <span class="number">0</span>) === k)) &#123;</div><div class="line">      <span class="comment">// If table is slow or key is not a number we can't use fast-path.</span></div><div class="line">      <span class="comment">// Fall through to the runtime system, it can handle everything.</span></div><div class="line">      <span class="keyword">return</span> KEYED_STORE_MISS(t, k, v, ic);</div><div class="line">    &#125;</div><div class="line">    t.elements[k] = v;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="keyword">return</span> KeyedStoreFastElement;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>代码很长（以及注释），但是配合上面所有解释应该不难理解：内联缓存负责观察而存根编译器／工程负责生产自适应和特化后的存根[有心的读者可能注意到了我本可以初始化所有键控的存储内联缓存（keyed store ICs），用一开始的快速读取或者当它进入快速状态后就一直保持住]。</p>
<p>如果我们不管上面所有代码而回到我们的“基准测试”,我们会得到非常令人满意的结果：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">∮ d8 --harmony quasi-lua-runtime-ic.js points-ic.js</div><div class="line">117</div></pre></td></tr></table></figure>
<p>这要比我们一开始的天真尝试提升了6倍! </p>
<h2 id="关于JavaScript虚拟机优化永远也不会有结论"><a href="#关于JavaScript虚拟机优化永远也不会有结论" class="headerlink" title="关于JavaScript虚拟机优化永远也不会有结论"></a>关于JavaScript虚拟机优化永远也不会有结论</h2><p>希望你在阅读这一部分的时候已经看完了之前所有内容…我尝试从不同的角度，JavaScript开发者的角度，来看某些驱动当今JavaScript引擎的点子。所写的代码越长，我越有一种盲人摸象的感觉。下面的事实只是为了给你一种望向深渊的感觉：V8有10种描述符，5种元素类型（+9外部元素类型），ic.cc里包含了几乎所有内联缓存状态选择的逻辑多达2500行，并且V8的内联缓存的状态不止2个（它们是uninitialized, premonomorphic, monomorphic, polymorphic, generic states，更别提用于键控读／写的内联缓存的特殊的状态或者是算数内敛缓存的完全不同的状态层级），ia32-specific手写的内联缓存存根多达5000行代码，等等。这些数字只会随着时间的流逝和V8为了识别和适应越来越多的对象布局的学习而增长。而且我甚至都还没谈到对象模型本身（objects.cc 13k行代码），或者垃圾回收，或者优化编译器。</p>
<p>话虽如此，在可预见的未来內，我确信基础将不会改变，如果变了肯定会引发一场你一定会注意到的巨大的爆炸！因此我认为这次尝试用JavaScript去理解基础的练习是非常非常非常重要的。</p>
<p>我希望明天或者几周之后你会停下来并且大喊“我找到了！”并且告诉你的为什么特定情况下在一个地方为一个对象增加属性会影响其余很远的接触这些对象的热回路的性能。你知道的，因为隐藏类变了！</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本文来自Vyacheslav Egorov的&lt;a href=&quot;http://mrale.ph/blog/2012/06/03/explaining-js-vms-in-js-inline-caches.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Explaining JavaScript VMs in JavaScript - Inline Caches&lt;/a&gt;，其中的术语、代码请以原文为准。&lt;br&gt;
    
    </summary>
    
      <category term="LexHuang" scheme="http://xgfe.github.io/categories/LexHuang/"/>
    
    
      <category term="JavaScript" scheme="http://xgfe.github.io/tags/JavaScript/"/>
    
      <category term="V8" scheme="http://xgfe.github.io/tags/V8/"/>
    
  </entry>
  
  <entry>
    <title>cocos2d-Js 基础入门</title>
    <link href="http://xgfe.github.io/2017/05/15/jakii/cocos2d-x%20introduction/"/>
    <id>http://xgfe.github.io/2017/05/15/jakii/cocos2d-x introduction/</id>
    <published>2017-05-15T08:30:00.000Z</published>
    <updated>2017-09-12T08:43:59.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://oprp8vydn.bkt.clouddn.com/2017-05-15-14948390188781.jpg" alt=""></p>
<p>cocos2d-x是一个广泛流行的2D跨平台游戏引擎。采用c++作为开发语言。而cocos2d-Js是cocos2d-x采用脚本绑定技术实现的采用JavaScript语言作为开发语言的版本。</p>
<p>本博客主要内容分为三部分：</p>
<ul>
<li>环境搭建</li>
<li>核心概念</li>
<li>相关扩展</li>
</ul>
<a id="more"></a>
<h2 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h2><h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3><p>cocos2d-x是一个广泛流行的2D跨平台游戏引擎。采用c++作为开发语言。而cocos2d-Js是cocos2d-x采用脚本绑定技术实现的采用JavaScript语言作为开发语言的版本。</p>
<h3 id="设计目标"><a href="#设计目标" class="headerlink" title="设计目标"></a>设计目标</h3><p><img src="http://oprp8vydn.bkt.clouddn.com/2017-05-15-14944929318503.jpg" alt=""></p>
<p>cocos2d-x的设计目标是横向兼容各个不同的平台，包括多种手机平台和pc平台。纵向支持c++、js、lua多种语言<br>编写代码，而且支持canvas，openGl渲染等</p>
<h3 id="开发环境搭建"><a href="#开发环境搭建" class="headerlink" title="开发环境搭建"></a>开发环境搭建</h3><ul>
<li>下载安装webstorm，作为开发IDE</li>
<li>安装chrome插件jetBrains IDE Support</li>
<li>下载cocos官方核心包</li>
<li>配置cocos2d-x环境<ul>
<li>安装python2.x版本</li>
<li>安装Apache Ant工具</li>
<li>安装其它诸如安卓sdk等特定环境的sdk等</li>
<li>运行python setup安装cocos工具</li>
</ul>
</li>
</ul>
<p>按照系统提示把上面步骤进行完成后，就可以进行项目的开发了</p>
<h3 id="一个简单的实例-helloWorld"><a href="#一个简单的实例-helloWorld" class="headerlink" title="一个简单的实例 helloWorld"></a>一个简单的实例 helloWorld</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">创建项目:cocos <span class="keyword">new</span> helloWorld -l js</div><div class="line">运行项目:cocos run -p web|ios|android|mac|win32</div><div class="line">打包:cocos compile -p web|ios|android|mac|win32 -m release</div></pre></td></tr></table></figure>
<p>创建生成的目录如下<br><img src="http://oprp8vydn.bkt.clouddn.com/2017-05-15-14944957996388.jpg" alt=""><br>frameworks是cocos2d-x的源文件，我们使用的一些库和API都是里面定义的。<br>res目录存放我们的资源文件，包括图片、音频、字体等资源。<br>src目录主要存放我们的代码，是我们主要的工作区域，我们的代码逻辑和资源引入都在此处进行。<br>index.html文件主要是用于web端的主页面，main.js主要是游戏启动，以及一些对页面的设置问题。<br>project.json主要是一些项目设置，以及js文件的引入</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//在index.html中,由于浏览器的兼容性问题，采用canvas来渲染，此处定义屏幕大小</span></div><div class="line">&lt;canvas id=<span class="string">"gameCanvas"</span> width=<span class="string">"480"</span> height=<span class="string">"720"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">canvas</span>&gt;</span></span></div><div class="line"></div><div class="line"><span class="comment">//在main.js中，此处代码用来加载游戏资源，同时用导演对象启动游戏</span></div><div class="line">cc.LoaderScene.preload(g_resources, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">    cc.director.runScene(<span class="keyword">new</span> HelloWorldScene());</div><div class="line">&#125;, <span class="keyword">this</span>);</div><div class="line"></div><div class="line"><span class="comment">//在project.json中，jsList数组用于加载js资源</span></div><div class="line"><span class="string">"jsList"</span> : [</div><div class="line">    <span class="string">"src/resource.js"</span>,</div><div class="line">    <span class="string">"src/app.js"</span></div><div class="line">]</div></pre></td></tr></table></figure>
<h2 id="核心概念"><a href="#核心概念" class="headerlink" title="核心概念"></a>核心概念</h2><h3 id="导演"><a href="#导演" class="headerlink" title="导演"></a>导演</h3><p><img src="http://oprp8vydn.bkt.clouddn.com/2017-05-15-14945711804166.jpg" alt=""><br>导演cc.director是整个游戏工程的管理者，可以称它为大总管，采用单例模式，也就是说，不管在游戏里面任何一个场景访问它获取到的都是一个对象。<br>它的主要职责是访问和切换游戏场景，访问一些API配置信息，暂停、继续、结束游戏，转换坐标等</p>
<h3 id="场景scene"><a href="#场景scene" class="headerlink" title="场景scene"></a>场景scene</h3><p>场景scene是构成游戏的界面，类似于电影中的场景。继承于node，是层layer的容器。<br>主要分为三类场景。</p>
<ul>
<li>展示类场景:主要展示一些视频、游戏介绍等</li>
<li>选项类场景：主要是主菜单、设置选项等场景</li>
<li>游戏主场景：游戏运行的主要场景，是游戏中最重要的场景<h3 id="层layer"><a href="#层layer" class="headerlink" title="层layer"></a>层layer</h3><img src="http://oprp8vydn.bkt.clouddn.com/2017-05-15-14945723879457.jpg" alt=""><br>层是场景的重要组成部分，一个场景由一个或多个层铺叠而成，就如同上图一样，一个游戏开始界面由三层组成，最下面的背景层，中间的精灵层和最上面的菜单层，层相互叠加最终组成最终的游戏界面。<br>需要注意的是，层之间是有顺序的，与此同时，层继承与node，而且是精灵的容器，可以随意存放精灵。</li>
</ul>
<h3 id="精灵"><a href="#精灵" class="headerlink" title="精灵"></a>精灵</h3><p><img src="http://oprp8vydn.bkt.clouddn.com/2017-05-15-14945729564081.jpg" alt=""><br>精灵是游戏中极其重要的一部分。比如在坦克大战游戏中，坦克、子弹、增益物品等对象都是精灵，可以说游戏编程其实就是面对精灵编程。在整个游戏中我们会创建很多很多的精灵。</p>
<h3 id="Node究竟是什么？"><a href="#Node究竟是什么？" class="headerlink" title="Node究竟是什么？"></a>Node究竟是什么？</h3><p>从上面的简要介绍中我们可以看出，包括场景，层，精灵等很多元素都继承于Node，那么Node究竟是什么呢？<br><img src="http://oprp8vydn.bkt.clouddn.com/2017-05-15-14945743415606.jpg" alt=""><br>熟悉web开发的人应该对上面这张图应该并不陌生，在web开发中，html是最上层的节点，然后按层依次管理其对应的子节点。与之类似，在cocos2d-x中，节点管理也是采用类似的方式。场景是最外层的容器，类似于html节点，采用树形结构依次管理对应的层和精灵。其中所有的节点均继承自Node，具有Node的所有属性和方法。<br>其中，Node的常用属性和方法如下所示</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">1.重要操作</div><div class="line">    - var node=new cc.Node();//创建节点</div><div class="line">    - node.addChild(childNode,0,123);//子节点，层级，标签</div><div class="line">    - var childNode=node.getChildByTag(123);</div><div class="line">    - node.removeChildByTag(123,true);移除子节点及其相关动作</div><div class="line">    - node.removeChild(childNode,true);移除子节点及其相关动作</div><div class="line"></div><div class="line">    </div><div class="line">2.重要属性</div><div class="line">    - position  node在场景中的实际位置</div><div class="line">    - anchorPoint(0.5,0.5); 锚点，node相对position的比例，也是运动的不动点</div><div class="line">    - anchorPoint=(w1/w,h1/h);</div><div class="line">    </div><div class="line">    node.setPosition(x,y);</div><div class="line">    node.setAnchorPoint(0.5,0.5);</div></pre></td></tr></table></figure>
<h3 id="事件循环与调度"><a href="#事件循环与调度" class="headerlink" title="事件循环与调度"></a>事件循环与调度</h3><p>我们知道，跟拍电影类似 整个过程是由一帧一帧的图片连续播放而成。cocos2d-x游戏工程也是基于不断的刷新重绘页面的原理制作而成的。在整个游戏的过程中，引擎会基于特定的帧率(默认60帧)来不断更新游戏页面。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">//让游戏进行循环</div><div class="line">scene.scheduleUpdate();</div><div class="line"></div><div class="line">update:function(dt)&#123;</div><div class="line">    //执行循环代码</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>正如上面的代码，当某个场景(层)调用<code>scheduleUpdate()</code>这个函数，就会启用工程的刷新机制，会不断调用当前对象对应的<code>update()</code>函数，从而达到更新游戏的目的</p>
<h3 id="标签与菜单"><a href="#标签与菜单" class="headerlink" title="标签与菜单"></a>标签与菜单</h3><p>在游戏中，我们可以看到上面会有各种各样的文字和菜单，比如坦克大战中坦克的数量，杀敌数等数据，以及开始游戏时候的开始游戏，结束游戏等菜单。</p>
<h4 id="标签"><a href="#标签" class="headerlink" title="标签"></a>标签</h4><blockquote>
<p><code>cc.LabelTTF</code>使用系统字体来定义文字</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">var helloLabel=new cc.LabelTFF(&quot;hello world&quot;,&quot;Arial&quot;,38);</div><div class="line"></div><div class="line"></div><div class="line">//如果使用的是第三方字体，需要将字体文件加入resource.js中</div><div class="line">varg_resources=[&#123;</div><div class="line">    type:&quot;font&quot;,</div><div class="line">    name:&quot;Courier New&quot;,</div><div class="line">    srcs:[&quot;res/fonts/Courier New.ttf&quot;]</div><div class="line">&#125;];</div></pre></td></tr></table></figure>
<blockquote>
<p><code>cc.LabelAtlas</code>图片集标签，这种标签的文字是从一个图片集中取出来的，需要额外加载图片集文件，比前者快许多</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">//图片集需要在资源文件中定义</div><div class="line">var helloLabel=new cc.LabelAtlas(&quot;hello world&quot;,res.charmap.png,48,46,&quot;&quot;)</div></pre></td></tr></table></figure>
<blockquote>
<p><code>cc.LabelBMFont</code>使用位图字体来添加字体，它比前两者速度要快得多</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">//资源文件中需要定义字体文件</div><div class="line">var helloLabel=new cc.LabelBMFont(&quot;hello world&quot;,res.BMFont_fnt)</div></pre></td></tr></table></figure>
<h4 id="菜单"><a href="#菜单" class="headerlink" title="菜单"></a>菜单</h4><p>菜单分为三种，分别是文本菜单、精灵菜单、开关菜单</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line">//文本菜单</div><div class="line">cc.MenuItemFont.setFontName(&quot;Times New Roman&quot;);</div><div class="line">cc.MenuItemFont.setFontSize(86);</div><div class="line"></div><div class="line">var item1=new cc.MenuItemFont(&quot;Start&quot;,this.menuItem1CallBack,this);</div><div class="line"></div><div class="line">//精灵菜单与图片菜单</div><div class="line">var startSpriteNormal = new cc.Sprite(res.start_up_png);</div><div class="line">var startSpriteSelected = new cc.Sprite(res.start_down_png);</div><div class="line">var startMenuItem = new cc.MenuItemSprite(</div><div class="line">            startSpriteNormal,</div><div class="line">            startSpriteSelected,</div><div class="line">            this.menuItemStartCallback, this);</div><div class="line"></div><div class="line">var settingMenuItem = new cc.MenuItemImage(</div><div class="line">            res.setting_up_png,</div><div class="line">            res.setting_down_png,</div><div class="line">            this.menuItemSettingCallback, this);</div><div class="line">            </div><div class="line">//开关菜单</div><div class="line">var soundOnMenuItem = new cc.MenuItemImage(</div><div class="line">            res.On_png, res.On_png);</div><div class="line">var soundOffMenuItem = new cc.MenuItemImage(</div><div class="line">            res.Off_png, res.Off_png);</div><div class="line">var soundToggleMenuItem = new cc.MenuItemToggle(</div><div class="line">            soundOnMenuItem,</div><div class="line">            soundOffMenuItem,</div><div class="line">            this.menuSoundToggleCallback, this);</div></pre></td></tr></table></figure>
<h3 id="动作与动画"><a href="#动作与动画" class="headerlink" title="动作与动画"></a>动作与动画</h3><h4 id="动作"><a href="#动作" class="headerlink" title="动作"></a>动作</h4><blockquote>
<p>属性变化动作，其中position可以是cc.p(x,y)，也可以是x</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line">//直线移动</div><div class="line">- cc.moveTo(duration, position, y); </div><div class="line">- cc.moveBy(duration, position, y);</div><div class="line"></div><div class="line">//跳跃移动，jump为跳跃次数</div><div class="line">cc.jumpTo(duration, position, y, height, jumps); </div><div class="line">cc.jumpBy(duration, position, y, height, jumps);</div><div class="line"></div><div class="line">//贝塞尔曲线运动，cc.BezierTo cc.BezierBy</div><div class="line">var size=cc.winSize;</div><div class="line">var control = [</div><div class="line">    cc.p(0, size.height),</div><div class="line">    cc.p(size.width, size.height),</div><div class="line">    cc.p(size.width, 0)</div><div class="line">];</div><div class="line"></div><div class="line">cc.bezierTo(duration, control); </div><div class="line">cc.bezierBy(duration, control);</div><div class="line"></div><div class="line"></div><div class="line">//cc.ScaleTo cc.ScaleBy缩放</div><div class="line"></div><div class="line">//cc.rotateTo和cc.rotateBy旋转</div></pre></td></tr></table></figure>
<blockquote>
<p>视觉特效动作</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line">//淡入淡出  cc.FadeIn cc.FadeOut cc.FadeTo</div><div class="line">var fadeOut = cc.fadeOut(1);</div><div class="line">var fadeIn = cc.fadeIn(1);</div><div class="line">var fadeTo = cc.fadeTo(1, 128);</div><div class="line">node.runAction(cc.sequence(fadeOut, fadeIn, fadeTo));</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line">//闪烁 cc.blink,1s时间闪烁10次</div><div class="line">var actionBlink = cc.blink(1, 10); </div><div class="line">node.runAction(actionBlink);</div><div class="line"></div><div class="line"></div><div class="line">//cc.Animation 自定义帧动画 参数:帧对象、间隔时间、循环次数</div><div class="line">var animation = new cc.Animation(frames, delay, loops);</div><div class="line">//实例</div><div class="line">var animation = new cc.Animation(); // 创建动作</div><div class="line">animation.addSpriteFrameWithFile(res.sh_node_64_png);</div><div class="line">animation.addSpriteFrameWithFile(res.sh_node_128_png);</div><div class="line">animation.addSpriteFrameWithFile(res.sh_node_256_png);</div><div class="line">animation.addSpriteFrameWithFile(res.sh_node_512_png);</div><div class="line">animation.setDelayPerUnit(0.15); // 设置间隔时间</div><div class="line">animation.setRestoreOriginalFrame(true); // 设置是否回复到第一帧</div><div class="line">var animate = cc.animate(animation); // 通过cc.animate将animation封装成动作 </div><div class="line">node.runAction(animate);</div></pre></td></tr></table></figure>
<blockquote>
<p>复合动作</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">//cc.DelayTime延时动作，只起到延时作用</div><div class="line">cc.delayTime(duration);</div><div class="line"></div><div class="line"></div><div class="line">//cc.Repeat cc.RepeatForever 重复执行</div><div class="line">//用0.5s旋转节点90度 </div><div class="line">var rotate = cc.rotateBy(0.5, -90);</div><div class="line">var repeat = rotate.repeat(4); //  重复4次 </div><div class="line">node.runAction(repeat);</div><div class="line"> </div><div class="line">var rotate = cc.rotateBy(0.5, -90);</div><div class="line">var repeat = rotate.repeatForever();//一直重复</div><div class="line">node.runAction(repeat);</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line">//cc.Sequence 有顺序执行动作</div><div class="line">//cc.Spawn同步执行动作</div></pre></td></tr></table></figure>
<h3 id="动画"><a href="#动画" class="headerlink" title="动画"></a>动画</h3><blockquote>
<p>此处主要介绍帧动画，骨骼动画制作较为复杂，此处不做介绍</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">//cc.Animation 自定义帧动画 参数:帧对象、间隔时间、循环次数</div><div class="line">var animation = new cc.Animation(frames, delay, loops);</div><div class="line">//实例</div><div class="line">var animation = new cc.Animation(); // 创建动作</div><div class="line">animation.addSpriteFrameWithFile(res.sh_node_64_png);</div><div class="line">animation.addSpriteFrameWithFile(res.sh_node_128_png);</div><div class="line">animation.addSpriteFrameWithFile(res.sh_node_256_png);</div><div class="line">animation.addSpriteFrameWithFile(res.sh_node_512_png);</div><div class="line">animation.setDelayPerUnit(0.15); // 设置间隔时间</div><div class="line">animation.setRestoreOriginalFrame(true); // 设置是否回复到第一帧</div><div class="line">var animate = cc.animate(animation); // 通过cc.animate将animation封装成动作 </div><div class="line">node.runAction(animate);</div></pre></td></tr></table></figure>
<h3 id="事件"><a href="#事件" class="headerlink" title="事件"></a>事件</h3><p>在cocos2d-x中，事件主要分为鼠标事件，触摸事件，键盘事件和自定义事件等。此处简要介绍以下单点触摸事件和鼠标事件<br><img src="http://oprp8vydn.bkt.clouddn.com/2017-05-15-14948319177139.jpg" alt=""><br>如上代码所示，首先检测是不是触摸事件，如果是，则在事件管理器中添加单点触摸事件，并绑定move时的触发函数。如果不是触摸事件，则在事件管理器中添加鼠标事件，并绑定相关触发函数</p>
<h3 id="音频处理"><a href="#音频处理" class="headerlink" title="音频处理"></a>音频处理</h3><blockquote>
<p>在<code>cocos2d-x</code>中，音频控制主要是在<code>cc.audioEngine</code>中控制的，以下是相关的API，直接调用即可。不过需要注意的是，相关音频必须在res目录中且被代码引入</p>
</blockquote>
<p><img src="http://oprp8vydn.bkt.clouddn.com/2017-05-15-14948325815436.jpg" alt=""></p>
<h3 id="数据存储"><a href="#数据存储" class="headerlink" title="数据存储"></a>数据存储</h3><p>我们都知道，除了那种特别简单的游戏，一般都是需要存储游戏数据。在cocos2d-x阴影中当然也不例外。通常来说，如果游戏数据存储在本地，我们一般采用localStorage方法，将数据存储在本地。<br>如果数据需要存储在服务端，自然而然要存放在数据库中，在客户端与服务端交换数据时候可以采用json形式<br><img src="http://oprp8vydn.bkt.clouddn.com/2017-05-15-14948330435333.jpg" alt=""></p>
<h2 id="相关拓展"><a href="#相关拓展" class="headerlink" title="相关拓展"></a>相关拓展</h2><p>开发一个游戏当然远远不止上面展示的那么简单，里面牵扯到的内容还有很多很多，以下简要介绍一下cocos2d-x开发游戏需要了解到的技术点，当然，我所提到的只是九牛一毛，开发游戏水很深，需要大家持续不断的去学习，去努力</p>
<ul>
<li>物理引擎</li>
<li>性能优化</li>
<li>3D特性</li>
<li>网络通信</li>
<li>多平台移植</li>
<li>屏幕适配</li>
<li>瓦片地图</li>
<li>粒子系统</li>
<li>骨骼动画</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://oprp8vydn.bkt.clouddn.com/2017-05-15-14948390188781.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;cocos2d-x是一个广泛流行的2D跨平台游戏引擎。采用c++作为开发语言。而cocos2d-Js是cocos2d-x采用脚本绑定技术实现的采用JavaScript语言作为开发语言的版本。&lt;/p&gt;
&lt;p&gt;本博客主要内容分为三部分：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;环境搭建&lt;/li&gt;
&lt;li&gt;核心概念&lt;/li&gt;
&lt;li&gt;相关扩展&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="jakii" scheme="http://xgfe.github.io/categories/jakii/"/>
    
    
      <category term="javascript" scheme="http://xgfe.github.io/tags/javascript/"/>
    
      <category term="cocos2d-x" scheme="http://xgfe.github.io/tags/cocos2d-x/"/>
    
  </entry>
  
  <entry>
    <title>理解Virtual DOM</title>
    <link href="http://xgfe.github.io/2017/05/04/y8n/understand-virtual-dom/"/>
    <id>http://xgfe.github.io/2017/05/04/y8n/understand-virtual-dom/</id>
    <published>2017-05-04T04:30:13.000Z</published>
    <updated>2017-09-12T08:43:59.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>使用过React的同学对于Virtual DOM并不陌生，作为React的重要核心概念，Virtual DOM凭借其高效的diff算法，让我们不用关心应用的性能问题，毫无顾忌地修改各种数据状态。在实际的开发中，我们并不需要关注Virtual DOM在一个框架中是如何运行的，但是理解Virtual DOM的实现原理却是非常有必要的，同时也有助于我们更加深入React。<br><a id="more"></a></p>
<h2 id="一、前端应用状态管理"><a href="#一、前端应用状态管理" class="headerlink" title="一、前端应用状态管理"></a>一、前端应用状态管理</h2><p>在日益复杂的前端应用中，状态管理是一个经常被提及的话题，从早期的刀耕火种时代到jQuery，再到现在流行的MVVM时代，状态管理的形式发生了翻天覆地的变化，我们再也不用维护茫茫多的事件回调、监听来更新视图，转而使用使用双向数据绑定，只需要维护相应的数据状态，就可以自动更新视图，极大提高开发效率。</p>
<p>但是，双向数据绑定也并不是唯一的办法，还有一个非常粗暴有效的方式：一旦数据发生变化，重新绘制<strong>整个视图</strong>，也就是重新设置一下innerHTML。这样的做法确实简单、粗暴、有效，但是如果只是因为局部一个小的数据发生变化而更新整个视图，性价比未免太低了，而且，像事件，获取焦点的输入框等，都需要重新处理。所以，对于小的应用或者说局部的小视图，这样处理完全是可以的，但是面对复杂的大型应用，这样的做法不可取。</p>
<p>说到这里，你会说这跟Virtual DOM有什么关系呢？其实Virtual DOM就是这么做的，只是在高效的diff算法计算下，避免对整棵DOM树进行变更，而是进行针对性的视图变更，将效率做到最优化。</p>
<h2 id="二、什么是Virtual-DOM"><a href="#二、什么是Virtual-DOM" class="headerlink" title="二、什么是Virtual DOM"></a>二、什么是Virtual DOM</h2><p>Virtual DOM的概念有很多解释，从我的理解来看，主要是三个方面，分别是：一个对象，两个前提，三个步骤。</p>
<p>一个对象指的是Virtual DOM是一个基本的JavaScript对象，也是整个Virtual DOM树的基本。</p>
<p>两个前提分别是JavaScript很快和直接操作DOM很慢，这是Virtual DOM得以实现的两个基本前提。得益于V8引擎的出现，让JavaScript可以高效地运行，在性能上有了极大的提高。直接操作DOM的低效和JavaScript的高效相对比，为Virtual DOM的产生提供了大前提。</p>
<p>三个步骤指的是Virtual DOM的三个重要步骤，分别是：生成Virtual DOM树、对比两棵树的差异、更新视图。这三个步骤的具体实现也是本文将简述的一大重点。</p>
<h2 id="三、Virtual-DOM三板斧"><a href="#三、Virtual-DOM三板斧" class="headerlink" title="三、Virtual DOM三板斧"></a>三、Virtual DOM三板斧</h2><p>下面就将介绍Virtual DOM的三个步骤具体的含义以及实现思路。</p>
<h3 id="1、生成Virtual-DOM树"><a href="#1、生成Virtual-DOM树" class="headerlink" title="1、生成Virtual DOM树"></a>1、生成Virtual DOM树</h3><p>DOM是前端工程师最常接触的内容之一，一个DOM节点包含了很多的内容，但是一个抽象出一个DOM节点却只需要三部分：节点类型，节点属性、子节点。所以围绕这三个部分，我们可以使用JavaScript简单地实现一棵DOM树，然后给节点实现渲染方法，就可以实现虚拟节点到真是DOM的转化。</p>
<p><img src="https://cloud.githubusercontent.com/assets/8521368/25689709/3fe7eaa8-30bd-11e7-8e00-45ec2e40726e.png" alt="DOM树的状态转化"></p>
<h3 id="2、对比两棵树的差异"><a href="#2、对比两棵树的差异" class="headerlink" title="2、对比两棵树的差异"></a>2、对比两棵树的差异</h3><p>比较两棵DOM树的差异是Virtual DOM算法最核心的部分，这也是我们常说的的 Virtual DOM的diff算法。在比较的过程中，我们只比较同级的节点，非同级的节点不在我们的比较范围内，这样既可以满足我们的需求，又可以简化算法实现。</p>
<p><img src="https://cloud.githubusercontent.com/assets/8521368/25689831/fe51cf0e-30bd-11e7-92fc-6fc69bcab700.png" alt="diff"></p>
<p>比较“树”的差异，首先是要对树进行遍历，常用的有两种遍历算法，分别是深度优先遍历和广度优先遍历，一般的diff算法中都采用的是深度优先遍历。对新旧两棵树进行一次深度优先的遍历，这样每个节点都会有一个唯一的标记。在遍历的时候，每遍历到一个节点就把该节点和新的树的同一个位置的节点进行对比，如果有差异的话就记录到一个对象里面。</p>
<p><img src="https://cloud.githubusercontent.com/assets/8521368/25689882/5decd9ea-30be-11e7-8252-b164d6a642ae.png" alt="深度优先遍历"></p>
<p>例如，上面的div和新的div有差异，当前的标记是0，那么：<code>patches[0] = [{difference}, {difference}, ...]</code>同理<code>p</code>是<code>patches[1]</code>，<code>ul</code>是<code>patches[3]</code>，以此类推。这样当遍历完整棵树的时候，就可以获得一个完整的差异对象。</p>
<p>在这个差异对象中记录了有改变的节点，每一个发生改变的内容也不尽相同，但也是有迹可循，常见的差异包括四种，分别是：</p>
<ul>
<li>替换节点</li>
<li>增加/删除子节点</li>
<li>修改节点属性</li>
<li>改变文本内容</li>
</ul>
<p>所以在记录差异的时候要根据不同的差异类型，记录不同的内容。</p>
<h3 id="3、更新视图"><a href="#3、更新视图" class="headerlink" title="3、更新视图"></a>3、更新视图</h3><p>在第二步得到整棵树的差异之后，就可以根据这些差异的不同类型，对DOM进行针对性的更新。与四种差异类型相对应的，是更新视图时具体的更新方法，分别是：</p>
<ul>
<li><code>replaceChild()</code></li>
<li><code>appendChild()</code>/<code>removeChild()</code></li>
<li><code>setAttribute()</code>/<code>removeAttribute()</code></li>
<li><code>textContent</code></li>
</ul>
<p><img src="https://cloud.githubusercontent.com/assets/8521368/25689889/6922dddc-30be-11e7-882d-94c47f9c6390.png" alt="更新视图"></p>
<h2 id="四、动手实现Virtual-DOM"><a href="#四、动手实现Virtual-DOM" class="headerlink" title="四、动手实现Virtual DOM"></a>四、动手实现Virtual DOM</h2><p>对原理有了一定的认识之后，自然是动手实现一番了，GitHub上有很多对Virtual DOM的实现，比如<a href="https://github.com/livoras/simple-virtual-dom/" target="_blank" rel="external">https://github.com/livoras/simple-virtual-dom/</a>、<a href="https://github.com/Matt-Esch/virtual-dom" target="_blank" rel="external">https://github.com/Matt-Esch/virtual-dom</a>等，我也对其进行了一个基本的实现，比较简陋，<a href="https://github.com/y8n/simple-virtual-dom" target="_blank" rel="external">传送门</a>。</p>
<h2 id="五、进一步思考"><a href="#五、进一步思考" class="headerlink" title="五、进一步思考"></a>五、进一步思考</h2><p>Virtual DOM的原理和实现的说明已经结束了，但是对于Virtual DOM的思考远没有结束，Virtual DOM 对前端开发的影响难道就只是一堆算法吗？</p>
<h3 id="1、性能对比"><a href="#1、性能对比" class="headerlink" title="1、性能对比"></a>1、性能对比</h3><p>首先，先来看一下性能，在诸多的Virtual DOM实现中，都会强调算法的高效，那么在实际的使用中，Virtual DOM的性能到底如何呢？</p>
<p><img src="https://cloud.githubusercontent.com/assets/8521368/25689892/72533f28-30be-11e7-8d67-8fa3fb8ae26b.png" alt="简单性能对比"></p>
<p>上图是对一个简单的DOM树进行不同方式的操作，由左边的结构更新为右边的结构，通过原生操作、jQuery、Virtual DOM和React四种方式，在Chrome的timeline中得到的性能对比，在这个图中，我们并没有看出Virtual DOM或者React的优势，通过对比我们发现，原生的操作要比其他三种方式快，而其他三种方式就相差无几了。当然，这样一个简单测试并没有说明什么，测试的DOM结构简单，和我们平时面对的业务场景不是一个量级，代表不了什么，但是起码我们可以看到，这种情况下好像Virtual DOM并没有我们想象的性能优势。</p>
<p><img src="https://cloud.githubusercontent.com/assets/8521368/25689897/7b4fbb88-30be-11e7-85f5-9fb4cc423149.png" alt="复杂性能对比"></p>
<p>在接下来的测试中我们增加测试量。上图分别是使用原生操作、Virtual DOM和React三种方式进行两类测试：插入10000个节点100次和修改3000个节点的属性100次。分别取这100次的耗时最大值、最小值和平均值。从图中我们可以看到明显的差异，Virtual DOM和React的差异可以理解，毕竟我们自己实现的Virtual DOM没有那么庞大，只是针对虚拟DOM而实现的，比React快一点可以理解，但是原生的操作比Virtual DOM和React都要快得多，这又是怎么一回事，好像和我们预想的不一样，回到最初，我们提到，Virtual DOM的产生前提之一就是直接操作DOM很<strong>慢</strong>，现在看来直接操作不但不慢，反而快了很多，这不得不让我产生了怀疑，是我对Virtual DOM的理解有误还是对DOM的理解有误呢？</p>
<h3 id="2、再次审视Virtual-DOM"><a href="#2、再次审视Virtual-DOM" class="headerlink" title="2、再次审视Virtual DOM"></a>2、再次审视Virtual DOM</h3><p>框架存在的意义是什么？是提高性能？提高开发效率？亦或是其他用途，每个人对框架的理解不同，答案也不尽相同。但是不得不承认，存在框架的情况下，项目的可维护性有了极大的提高，而对于其他方面就要做出牺牲，比如性能。在上面的性能测试中，其实完全走入了一个误区，在测试中我们用到的原生的操作其实是“人为”地对操作进行优化之后的结果，而如果抛开人为优化的前提，最终的结果可能就不是这样了。<strong>Virtual DOM的优势不在于单次的操作，而是在大量、频繁的数据更新下，能够对视图进行合理、高效的更新。</strong>这一点是原生操作远远无法替代的。</p>
<p>到此为止，再次审视Virtual DOM，可以简单得出如下结论：</p>
<ul>
<li>Virtual DOM 在牺牲部分性能的前提下，增加了可维护性，这也是很多框架的通性</li>
<li>实现了对DOM的集中化操作，在数据改变时先对虚拟DOM进行修改，再反映到真实的DOM中，用最小的代价来更新DOM，提高效率</li>
<li>打开了函数式UI编程的大门</li>
<li><strong>可以渲染到DOM以外的端，比如ReactNative</strong></li>
</ul>
<h2 id="六、结语"><a href="#六、结语" class="headerlink" title="六、结语"></a>六、结语</h2><p>本文对Virtual DOM有一个简单的介绍，包括实现的部分也很简单，甚至对列表的diff算法也偷工减料，跟多高级的特性也没有涉及，比如事件绑定、生命周期、JSX语法等，如果加上这些内容，就是一个小型版的React了。</p>
<p>本文旨在让大家了解并认识Virtual DOM的基本概念、组成和实现，同时对Virtual DOM更深层的意义有所了解，这样在以后用到相关的框架的时候也不会两眼一抹黑了，起码在性能优化上有点认识，比如列表要带上<code>key</code>这样基本的优化操作。</p>
<h2 id="七、参考资料"><a href="#七、参考资料" class="headerlink" title="七、参考资料"></a>七、参考资料</h2><ul>
<li><a href="https://en.wikipedia.org/wiki/Levenshtein_distance" target="_blank" rel="external">Levenshtein distance算法</a></li>
<li><a href="https://github.com/livoras/blog/issues/13" target="_blank" rel="external">深度剖析：如何实现一个 Virtual DOM 算法</a></li>
<li><a href="http://www.jianshu.com/p/cbb7d7094fb9" target="_blank" rel="external">50行代码实现Virtual DOM</a></li>
<li><a href="http://chrisharrington.github.io/demos/performance/" target="_blank" rel="external">Performance Comparison for React, Angular and Knockout</a></li>
<li><a href="https://www.zhihu.com/question/31809713" target="_blank" rel="external">网上都说操作真实 DOM 慢，但测试结果却比 React 更快，为什么？</a></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;使用过React的同学对于Virtual DOM并不陌生，作为React的重要核心概念，Virtual DOM凭借其高效的diff算法，让我们不用关心应用的性能问题，毫无顾忌地修改各种数据状态。在实际的开发中，我们并不需要关注Virtual DOM在一个框架中是如何运行的，但是理解Virtual DOM的实现原理却是非常有必要的，同时也有助于我们更加深入React。&lt;br&gt;
    
    </summary>
    
      <category term="y8n" scheme="http://xgfe.github.io/categories/y8n/"/>
    
    
      <category term="react" scheme="http://xgfe.github.io/tags/react/"/>
    
      <category term="virtual dom" scheme="http://xgfe.github.io/tags/virtual-dom/"/>
    
  </entry>
  
  <entry>
    <title>web worker详解</title>
    <link href="http://xgfe.github.io/2017/05/03/LexHuang/web-worker/"/>
    <id>http://xgfe.github.io/2017/05/03/LexHuang/web-worker/</id>
    <published>2017-05-03T03:30:00.000Z</published>
    <updated>2017-09-12T08:43:59.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://p0.meituan.net/kuailv/678b764c4d0bff4629f20e748357481c29564.jpg" alt="" title="web worker"><br>Web Workers 是一种不在页面线程而是在后台线程中执行脚本的技术。Web Workers 的优点在于可以将计算密集型和I/O密集型的操作放在一个单独的后台线程中执行，进而使得主线程（通常是UI线程）能够不被阻塞，也不会被减缓。</p>
<p>本博客主要内容分为七部分：</p>
<ul>
<li>Web Worker 概念及使用</li>
<li>Web worker的生命周期和处理模型</li>
<li>错误处理</li>
<li>数据传输</li>
<li>线程安全</li>
<li>内容安全策略</li>
</ul>
<a id="more"></a>
<h2 id="Web-Workers-概念"><a href="#Web-Workers-概念" class="headerlink" title="Web Workers 概念"></a>Web Workers 概念</h2><p>所谓的 worker 就是用一个构造器创建的（例如<a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Worker/Worker" target="_blank" rel="external">Worker()</a>） ，用来运行一个 JavaScript 文件的函数 — 这个文件包含了将要在 worker 线程中执行的代码<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">worker = <span class="keyword">new</span> Worker(scriptURL [, options ])</div></pre></td></tr></table></figure></p>
<p><a href="https://html.spec.whatwg.org/multipage/workers.html#dedicated-workers-and-the-worker-interface" target="_blank" rel="external">options</a>可以被用来确保worker的全局环境是否支持Javascript模块{type:’module’}，默认为’class’。在共享worker中还可以通过指定<strong>credentials</strong>来制定<strong>scriptURL</strong>的被获取方式。</p>
<p>worker 脚本将在一个与当前 window 对象不同的全局上下文环境中运行，根据检测到的 worker 的类型有所不同,会生成不同的上下文对象。在<code>专属worker</code>(Dedicated Worker)中这个上下文环境由一个叫做 <a href="https://developer.mozilla.org/zh-CN/docs/Web/API/DedicatedWorkerGlobalScope" target="_blank" rel="external">DedicatedWorkerGlobalScope</a> 的对象来表示。在<code>共享worker</code>（Shared Worker）则会使用<a href="https://developer.mozilla.org/en-US/docs/Web/API/SharedWorkerGlobalScope" target="_blank" rel="external">SharedWorkerGlobalScope</a>。所有上下文对象都继承于<a href="https://developer.mozilla.org/en-US/docs/Web/API/WorkerGlobalScope" target="_blank" rel="external">WorkerGlobalScope</a></p>
<p>你可以在你的 worker 线程中运行任意的javascript代码，除某些特殊情况外。比如，你不能直接在 worker 线程中操纵 DOM 元素, 或者使用某些 window 对象中默认的方法和属性。 但是 window 对象中很多的方法和属性你是可以使用的，包括 WebSockets，以及诸如 IndexedDB 和 FireFox OS 中独有的 Data Store API 这一类数据存储机制。具体的可用api和函数列表如下：</p>
<ul>
<li>对比不同类型的workers所拥有的属性和类型:</li>
</ul>
<table>
<thead>
<tr>
<th>function</th>
<th>Dedicated workers</th>
<th>Shared workers</th>
</tr>
</thead>
<tbody>
<tr>
<td>atob()</td>
<td>yes, on WorkerGlobalScope</td>
<td>yes, on WorkerGlobalScope</td>
</tr>
<tr>
<td>btoa()</td>
<td>yes, on WorkerGlobalScope</td>
<td>yes, on WorkerGlobalScope</td>
</tr>
<tr>
<td>clearInterval()</td>
<td>yes, on WorkerGlobalScope</td>
<td>yes, on WorkerGlobalScope</td>
</tr>
<tr>
<td>clearTimeout()</td>
<td>yes, on WorkerGlobalScope</td>
<td>yes, on WorkerGlobalScope</td>
</tr>
<tr>
<td>dump()</td>
<td>yes, on WorkerGlobalScope</td>
<td>yes, on WorkerGlobalScope</td>
</tr>
<tr>
<td>setInterval()</td>
<td>yes, on WorkerGlobalScope</td>
<td>yes, on WorkerGlobalScope</td>
</tr>
<tr>
<td>setTimeout()</td>
<td>yes, on WorkerGlobalScope</td>
<td>yes, on WorkerGlobalScope</td>
</tr>
<tr>
<td>importScripts()</td>
<td>yes, on WorkerGlobalScope</td>
<td>yes, on WorkerGlobalScope</td>
</tr>
<tr>
<td>close()</td>
<td>yes, on WorkerGlobalScope</td>
<td>yes, on WorkerGlobalScope</td>
</tr>
<tr>
<td>postMessage()</td>
<td>yes, on DedicatedWorkerGlobalScope</td>
<td>no</td>
</tr>
</tbody>
</table>
<ul>
<li>worker中可用的web API：<ul>
<li>Channel Messaging API</li>
<li>Console API</li>
<li>CustomEvent</li>
<li>DOMRequest and DOMCursor</li>
<li>FileReader</li>
<li>FileReaderSync</li>
<li>FormData</li>
<li>ImageData</li>
<li>IndexedDB</li>
<li>Notifications</li>
<li>Performance</li>
<li>Promise</li>
<li>Worker</li>
<li>WorkerGlobalScope</li>
<li>WorkerLocation</li>
<li>WorkerNavigator</li>
<li>XMLHttpReques</li>
</ul>
</li>
</ul>
<p>可见，web worker可以执行所有常见的I/O操作。</p>
<hr>
<p>以上api去除了实验阶段api和非w3c标准api。</p>
<hr>
<p> 在专属worker里，主线程和 worker 线程之间通过消息机制来互相传输信息：两端都使用 postMessage() 方法来发送信息, 并且通过 onmessage 这个事件处理函数来接收信息。 （传递的信息包含在 Message 这个事件的数据属性内) 。数据的交互是通过传递副本，而不是直接共享数据。</p>
<p> 共享worker［Shared workers ］指的是那些可以被多个运行在不同窗口的脚本所共享的worker，比如IFrames等，只要这些窗口和该共享worder同源。该类worker比专属workers更复杂些————脚本们利用处于活动中的端口与主线程们进行通信。</p>
<hr>
<p> 本质上专属worker也是通过端口来与主线程进行通信，但是由于双方端口是一致的，因此将此特性隐藏了。</p>
<hr>
<p> 一个 worker 也可以生成新的 worker，只要这些 worker 和它们父页面的宿主同源。  此外，worker 可以通过 XMLHttpRequest 来进行网络通信，只是 XMLHttpRequest 的 responseXML 和 channel 这两个属性的值将总是 null 。</p>
<h2 id="使用web-worker"><a href="#使用web-worker" class="headerlink" title="使用web worker"></a>使用web worker</h2><hr>
<p>随着多核计算机逐渐普及，将复杂计算的任务拆解成多个子任务分配给worker是一个非常有效的办法，这样可以在多处理器内核上运算这些任务。</p>
<hr>
<h3 id="Worker-特征检测"><a href="#Worker-特征检测" class="headerlink" title="Worker 特征检测"></a>Worker 特征检测</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span> (<span class="built_in">window</span>.Worker) &#123;</div><div class="line">...</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="专属worker"><a href="#专属worker" class="headerlink" title="专属worker"></a>专属worker</h3><p>以下以MDN的<a href="https://mdn.github.io/simple-web-worker/" target="_blank" rel="external">Basic dedicated worker example</a>为例。它允许你输入两个数字相乘。两个乘数被送到一个专属worker中，运算得到乘积后，在返回到原页面并展示出来。</p>
<h4 id="生成一个专属worker"><a href="#生成一个专属worker" class="headerlink" title="生成一个专属worker"></a>生成一个专属worker</h4><p>创建一个新的 <strong>专属worker</strong> 很简单。你只需要调用 Worker() 构造器, 并指定一个worker线程需要执行的脚本的URI:<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**main.js**/</span></div><div class="line"><span class="keyword">var</span> myWorker = <span class="keyword">new</span> Worker(<span class="string">"worker.js"</span>);</div></pre></td></tr></table></figure></p>
<h4 id="往dedicated-worker里发送消息以及从dedicated-worker发出消息"><a href="#往dedicated-worker里发送消息以及从dedicated-worker发出消息" class="headerlink" title="往dedicated worker里发送消息以及从dedicated worker发出消息"></a>往dedicated worker里发送消息以及从dedicated worker发出消息</h4><p>worker的奇妙之处在于 postMessage()方法和onmessage 事件处理程序。当你想要传递一个消息到worker,你需要像这样传递消息:</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**main.js**/</span></div><div class="line">first.onchange = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  myWorker.postMessage([first.value,second.value]);</div><div class="line">  <span class="built_in">console</span>.log(<span class="string">'Message posted to worker'</span>);</div><div class="line">&#125;</div><div class="line">second.onchange = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  myWorker.postMessage([first.value,second.value]);</div><div class="line">  <span class="built_in">console</span>.log(<span class="string">'Message posted to worker'</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这里我们有两个<code>&lt;input&gt;</code>元素来代表两个乘数; 当它们的值变化时, 会通过myWorker.postMessage([first.value,second.value])传递新值给worker, 数组意味着. 你可以往消息里塞入非常多的信息。<br>在worker里,我们可以通过编写一个事件回调函数来响应接受到的消息:</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**worker.js**/</span></div><div class="line">onmessage = <span class="function"><span class="keyword">function</span>(<span class="params">e</span>) </span>&#123;</div><div class="line">  <span class="built_in">console</span>.log(<span class="string">'Message received from main script'</span>);</div><div class="line">  <span class="keyword">var</span> workerResult = <span class="string">'Result: '</span> + (e.data[<span class="number">0</span>] * e.data[<span class="number">1</span>]);</div><div class="line">  <span class="built_in">console</span>.log(<span class="string">'Posting message back to main script'</span>);</div><div class="line">  postMessage(workerResult);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>onmessage 处理程序允许我们在接受消息时运行一些代码，并在事件对象的data属性里访问传入的消息。这里我们简单的讲两个数字相乘，并再次使用postMessage()来回传结果回主线程。</p>
<p>回到主线程，我们再次使用onmessage 来响应来自于worker的消息：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**main.js**/</span></div><div class="line">myWorker.onmessage = <span class="function"><span class="keyword">function</span>(<span class="params">e</span>) </span>&#123;</div><div class="line">  result.textContent = e.data;</div><div class="line">  <span class="built_in">console</span>.log(<span class="string">'Message received from worker'</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>这里我们抓取事件data属性里的消息并设置到文档内容上展示出来。</p>
<hr>
<ul>
<li><p>注意: 传入到Worker 构造器里的参数必须遵循同源策略。</p>
<p>  浏览器制造商对于“同源”所包含的概念有争议；Gecko 10.0 (Firefox 10.0 / Thunderbird 10.0 / SeaMonkey 2.7) 以及之后的版本允许 data URIs，而Internet Explorer 10禁止Blob URIs作为用于worker的合法的脚本。</p>
</li>
<li><p>注意:  注意到，再主线程里onmessage 和postMessage()必须挂在Worker对象上 ，但是在worker内部不需要。这是因为在worker内部，该worker本身就有效的充当了全局作用域</p>
</li>
<li><p>注意: 当主线程和worker之间传递消息时，传递的是消息的副本，而不是共享该消息。</p>
</li>
</ul>
<hr>
<h4 id="关闭一个-worker"><a href="#关闭一个-worker" class="headerlink" title="关闭一个 worker"></a>关闭一个 worker</h4><ul>
<li><p>terminate()</p>
<p>  如果想在主线程里立刻关闭正在运行的worker，只要调用worker的terminate 方法就行：</p>
  <figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**main.js**/</span></div><div class="line">myWorker.terminate();</div></pre></td></tr></table></figure>
<p>  该worker线程会被立刻杀死而不会获得任何完成操作或者垃圾回收的机会。</p>
</li>
<li><p>close()</p>
<p>  在 worker 线程内部, workers 可以通过调用自己全局作用域下的close 方法来关闭自身:</p>
  <figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**worker.js**/</span></div><div class="line">self.close();</div></pre></td></tr></table></figure>
</li>
</ul>
<p>尽量使用close在worker内关闭自己，这样可以让线程被安全关闭且更适当地释放资源。具体算法参考下一节。</p>
<h4 id="生成子worker"><a href="#生成子worker" class="headerlink" title="生成子worker"></a>生成子worker</h4><p>如果需要，worker可以产生更多的worker。所谓的子worker必须是和父页面同源。而且，该子worker的URIs 的解析是相对于父worker的地址而不是其所属页面的。这简化了worker的依赖追踪。</p>
<h4 id="引入脚本和库"><a href="#引入脚本和库" class="headerlink" title="引入脚本和库"></a>引入脚本和库</h4><p>Worker现场可以访问全局函数，importScripts()，让worker引入脚本。它接受0个或者更多要导入的资源的URI作为参数；以下所有例子都是有效的：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">importScripts();                         <span class="comment">/* imports nothing */</span></div><div class="line">importScripts(<span class="string">'foo.js'</span>);                 <span class="comment">/* imports just "foo.js" */</span></div><div class="line">importScripts(<span class="string">'foo.js'</span>, <span class="string">'bar.js'</span>);       <span class="comment">/* imports two scripts */</span></div><div class="line">importScripts(<span class="string">'//example.com/hello.js'</span>); <span class="comment">/* You can import scripts from other origins */</span></div></pre></td></tr></table></figure>
<p>浏览器加载列出的所有脚本并且执行它们。之后所有脚本里的全局对象都能被worker所使用。如果脚本加载失败则会抛出一个<code>NETWORK_ERROR</code>错误，并且之后的代码将不会被执行。之前已经执行的代码（包括使用 window.setTimeout()延迟执行的代码）将继续执行。在importScripts() 方法之后的函数声明会被保留，因为它们始终比其他代码先解析。</p>
<hr>
<ul>
<li>注意: 脚本下载是无序的，但是执行顺序则根据传递到importScripts()里的顺序。这是异步完成的；在所有脚本都被下载和执行前，importScripts()不会返回。</li>
</ul>
<hr>
<h3 id="共享worker"><a href="#共享worker" class="headerlink" title="共享worker"></a>共享worker</h3><p>一个 <strong>共享worker</strong> 可以被多个脚本所访问 — 即使它们正在被多个不同的窗口访问着, 比如多个iframe乃至多个worker。 在这一节我们将会讨论 <a href="https://mdn.github.io/simple-shared-worker/" target="_blank" rel="external">Basic shared worker example</a>里的代码: 它和基础专属worker的例子很类似,除了它有两个函数可以被不同的脚本文件处理：两数相乘和平方一个数字。两个脚本使用同一个worker 来完成所需的实际计算。</p>
<p>这里我们将重点分析专属和共享worker之间的不同。注意到在这个例子里我们有两个HTML页面，每个页面都有JavaScript 访问同一个worker文件。</p>
<hr>
<ul>
<li>注意: 如果共享worker可以被来自不同的浏览上下文所访问，那这些浏览上下文必须时完全同源的（同协议、域名和端口）。</li>
<li>注意: 在火狐里,共享worker不能在一个隐私模式下的窗口和一个非隐私模式下的窗口之间共享 (<a href="https://bugzilla.mozilla.org/show_bug.cgi?id=1177621" target="_blank" rel="external">bug 1177621</a>)。</li>
</ul>
<hr>
<h4 id="生成一个-shared-worker"><a href="#生成一个-shared-worker" class="headerlink" title="生成一个 shared worker"></a>生成一个 shared worker</h4><p>与生成一个新dedicated worker类似, 但是不同的是构造器的名称是<code>SharedWorker</code> — 每个都得使用与下面类似的方式启动worker:<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> myWorker = <span class="keyword">new</span> SharedWorker(<span class="string">"worker.js"</span>);</div></pre></td></tr></table></figure></p>
<p>一个最大的不同点在于使用共享worker你必须通过一个<code>port对象</code>来通信——明确指定一个端口，这样脚本们可以通过它来与worker通信。(在专属worker偷偷完成了这一点)。</p>
<p>端口链接需要通过隐式地使用<code>onmessage</code>事件处理程序或者显式地在传递任何消息前使用 start()方法。只有当消息事件通过是addEventListener()接通的情况下需要调用start()。</p>
<p>当使用<code>start()</code>方法来开启端口连接时, 如果需要双向通信，则该方法既要在主线程中调用，也需要在woker线程中调用。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// called in parent thread</span></div><div class="line">myWorker.port.start();</div><div class="line"></div><div class="line"><span class="comment">// called in worker thread, assuming the port variable references a port</span></div><div class="line">port.start();</div></pre></td></tr></table></figure></p>
<h4 id="往shared-worker里发送消息以及从shared-worker发出消息"><a href="#往shared-worker里发送消息以及从shared-worker发出消息" class="headerlink" title="往shared worker里发送消息以及从shared worker发出消息"></a>往shared worker里发送消息以及从shared worker发出消息</h4><p>现在消息可以像之前一样传递到worker里了,但是postMessage() 方法必须通过port对象来调用 :</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">squareNumber.onchange = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  myWorker.port.postMessage([squareNumber.value,squareNumber.value]);</div><div class="line">  <span class="built_in">console</span>.log(<span class="string">'Message posted to worker'</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>现在, 将目光转向我们的worker。这里也发生了些复杂的事情:<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**worker.js**/</span></div><div class="line">onconnect = <span class="function"><span class="keyword">function</span>(<span class="params">e</span>) </span>&#123;</div><div class="line">    <span class="keyword">var</span> port = e.ports[<span class="number">0</span>];</div><div class="line"></div><div class="line">    port.onmessage = <span class="function"><span class="keyword">function</span>(<span class="params">e</span>) </span>&#123;</div><div class="line">        <span class="keyword">var</span> workerResult = <span class="string">'Result: '</span> + (e.data[<span class="number">0</span>] * e.data[<span class="number">1</span>]);</div><div class="line">        port.postMessage(workerResult);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>首先, 我们使用一个<code>onconnect事件处理程序</code>来在发生一个端口连接的时候去激活代码(比如，当父线程里设置了一个<code>onmessage事件处理程序</code>，或者在父线程里<code>start()</code>方法被显式调用)。</p>
<p>我们使用该事件的<code>ports属性</code>来获取端口并且将它存到一个变量里。</p>
<p>之后，我们增加一个消息处理程序在该端口上来做计算并返回给主线程。设置该消息处理程序在worker线程里同样隐式打开了到父线程的端口连接，所以无需调用 <code>port.start()</code>。</p>
<p>最后, 回到main 脚本, 我们处理worker返回的消息:</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">myWorker.port.onmessage = <span class="function"><span class="keyword">function</span>(<span class="params">e</span>) </span>&#123;</div><div class="line">  result2.textContent = e.data;</div><div class="line">  <span class="built_in">console</span>.log(<span class="string">'Message received from worker'</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>当一个消息通过端口回到主线程时，我们检查结果类型，然后插入到文档里显示出来。</p>
<h2 id="web-worker的生命周期和处理模型"><a href="#web-worker的生命周期和处理模型" class="headerlink" title="web worker的生命周期和处理模型"></a>web worker的生命周期和处理模型</h2><h3 id="生命周期"><a href="#生命周期" class="headerlink" title="生命周期"></a>生命周期</h3><p>web worker之间的通信必须依赖于浏览器的上下文环境，并且通过它们的 MessagePort 对象实例传递消息。每个web worker的全局作用域都拥有这些线程的端口列表，这些列表包括了所有线程使用到的 MessagePort 对象。在专用线程的情况下，这个列表还会包含隐式的 MessagePort 对象。</p>
<p>每个web worker的全局作用域对象 WorkerGlobalScope 还会有一个web worker的线程列表，在初始化时这个列表为空。当web worker被创建的时候或者拥有父web worker的时候，它们就会被填充进来。</p>
<p>最后，每个web worker的全局作用域对象 WorkerGlobalScope 还拥有这个线程的文档对象列表，在初始化时这个列表为空。当web worker被创建的时候，文档对象就会被填充进来。无论何时当一个文档对象被丢弃的时候，它就会从这个文档对象列表里面被删除。<br>在web worker的生命周期中，定义了下面四种不同类型的线程名称，用以标识它们在线程的整个生命周期中的不同状态：</p>
<ul>
<li>当一个web worker的<code>文档列表</code>不为空的时候，这个web worker会被称之为<code>许可线程</code>。</li>
<li>当一个web worker的<code>文档列表</code>中的任何一个对象都是处于完全活动状态的时候，这个web worker会被称之为<code>需要激活线程</code>。</li>
<li>当一个web worker是许可线程并且拥有计数器或者拥有数据库事务或者拥有网络连接或者它的web worker列表不为空的时候，这个web worker会被称之为<code>受保护的线程</code>。</li>
<li>当一个web worker是一个非需要激活线程同时又是一个许可线程的时候，这个web worker会被称之为<code>可挂起线程</code>。</li>
</ul>
<p>由于 W3C 的 Web Worker 规范目前还是处于完善阶段，没有形成最终的规范。</p>
<h3 id="处理模型"><a href="#处理模型" class="headerlink" title="处理模型"></a>处理模型</h3><p><img src="http://p1.meituan.net/kuailv/1aae5f5a2fd5220d14bf377ffd82937840137.png" alt="" title="web worker执行模型"></p>
<p>当web worker被一个具有 URL 参数的构造函数创建的时候，它需要有一系列的处理流程来处理和记录它本身的数据和状态。<a href="https://html.spec.whatwg.org/multipage/workers.html#worker-processing-model" target="_blank" rel="external">W3C的web worker的处理模型</a>如下：</p>
<blockquote>
<p>当一个用户代理将要通过：Worker 或者 SharedWorker等worker对象、<a href="https://url.spec.whatwg.org/#concept-url" target="_blank" rel="external">URL</a> url, <a href="https://html.spec.whatwg.org/multipage/webappapis.html#environment-settings-object" target="_blank" rel="external">环境设置对象</a><code>外部设置</code>, <a href="https://html.spec.whatwg.org/multipage/comms.html#messageport" target="_blank" rel="external">MessagePort</a> <code>外部端口</code>, 一个<a href="https://html.spec.whatwg.org/multipage/workers.html#workeroptions" target="_blank" rel="external">WorkerOptions</a> 字典 <code>options参数</code>, 和一个可选字符串<code>name</code> 来为一个脚本 <strong>运行一个线程</strong> 时，它必须执行以下步骤：（当worker是一个共享worker时，name始终会被提供。）</p>
<ol>
<li>创建一个独立的并行处理环境，并且在这个环境里面异步的运行下面的步骤。<hr>
对于那些用于计时的API来说，这是官方规定的worker创建时刻。<hr>
</li>
<li>让<code>is shared</code>设置为true如果worker是一个 <code>SharedWorker</code> 对象, 反之为 false。</li>
<li>让<code>docs</code>为<a href="https://html.spec.whatwg.org/multipage/workers.html#list-of-relevant-document-objects-to-add" target="_blank" rel="external">相关的Document对象组成的列表</a>并用来添加给定的外部设置。</li>
<li>让父 worker 的<code>parent worker global scope</code>为 null.</li>
<li>如果外部设置的<a href="https://html.spec.whatwg.org/multipage/webappapis.html#concept-settings-object-global" target="_blank" rel="external">全局对象</a>(即<a href="https://html.spec.whatwg.org/multipage/webappapis.html#environment-settings-object" target="_blank" rel="external">环境设置对象</a>)是一个 WorkerGlobalScope 对象（比如我们在创建嵌套worker时），设置<code>parent worker global scope</code>到外部设置的<a href="https://html.spec.whatwg.org/multipage/webappapis.html#concept-settings-object-global" target="_blank" rel="external">全局对象上</a>。</li>
<li><p>通过以下自定义项来调用JavaScript <a href="https://tc39.github.io/ecma262/#sec-initializehostdefinedrealm" target="_blank" rel="external">InitializeHostDefinedRealm()</a>抽象操作 </p>
<ul>
<li><p>对于全局对象，如果<code>is shared</code>是true,创建一个新 SharedWorkerGlobalScope对象。否则，创建一个新DedicatedWorkerGlobalScope对象。并使其成为该worker的全局作用域对象。</p>
</li>
<li><p>让区域执行上下文（<a href="https://tc39.github.io/ecma262/#realm" target="_blank" rel="external">realm execution context</a>,概念上类似于一个ECMAScript 全局环境）成为所创建的<a href="https://tc39.github.io/ecma262/#sec-execution-contexts" target="_blank" rel="external">JavaScript执行上下文</a>。</p>
</li>
</ul>
</li>
<li>利用上述的区域执行上下文和外部设置来<a href="https://html.spec.whatwg.org/multipage/workers.html#set-up-a-worker-environment-settings-object" target="_blank" rel="external">初始化一个worker环境设置对象</a>，并且将返回的设置对象设置为<code>内部设置</code>。</li>
<li>如果<code>is shared</code>为true, 则:<ol>
<li>设置worker全局作用域的<a href="https://html.spec.whatwg.org/multipage/workers.html#concept-sharedworkerglobalscope-constructor-origin" target="_blank" rel="external">constructor origin属性</a>值为外部设置的源。</li>
<li>设置worker全局作用域的<a href="https://html.spec.whatwg.org/multipage/workers.html#concept-sharedworkerglobalscope-constructor-url" target="_blank" rel="external">constructor url属性</a>的值为外部设置的url。</li>
<li>设置worker全局作用域的<a href="https://html.spec.whatwg.org/multipage/workers.html#concept-sharedworkerglobalscope-constructor-url" target="_blank" rel="external">name属性</a>的值为外部设置的name。</li>
</ol>
</li>
<li>把<a href="https://fetch.spec.whatwg.org/#concept-request-destination" target="_blank" rel="external">destination</a>值设置为”sharedworker”如果<code>is shared</code>为true，否则为”worker”。</li>
<li><p>通过options参数的type成员的值来获取脚本:</p>
<ul>
<li><p>“classic”<br>  利用指定的url来获取经典的worker脚本、外部设置、 destination和内部设置。</p>
</li>
<li><p>“module”<br>利用指定的url来获取脚本图、外部设置、 destination、options参数的credentials成员值和<code>内部设置</code>。</p>
</li>
</ul>
<p>两种情况下，对请求<a href="https://html.spec.whatwg.org/multipage/webappapis.html#fetching-scripts-perform-fetch" target="_blank" rel="external">执行fetch操作</a>，在<a href="https://html.spec.whatwg.org/multipage/webappapis.html#fetching-scripts-is-top-level" target="_blank" rel="external">is top-level flag</a>被设置后将以下步骤：</p>
<ol>
<li>设置请求的 <a href="https://fetch.spec.whatwg.org/#concept-request-reserved-client" target="_blank" rel="external">reserved client</a>（即环境） 为<code>内部设置</code>。</li>
<li><a href="https://fetch.spec.whatwg.org/#concept-fetch" target="_blank" rel="external">Fetch</a> 请求,并且为了执行残留的步骤而异步等待，残留的步骤作为fetch的<a href="https://fetch.spec.whatwg.org/#concept-response-url" target="_blank" rel="external">process response</a>对应<a href="https://fetch.spec.whatwg.org/#concept-response" target="_blank" rel="external">response</a>（fetch的结果）的一部分。</li>
<li>设置<code>worker全局作用域</code>的 <a href="https://html.spec.whatwg.org/multipage/workers.html#concept-workerglobalscope-url" target="_blank" rel="external">url</a> 为响应的 <a href="https://fetch.spec.whatwg.org/#concept-response-url" target="_blank" rel="external">url</a>。</li>
<li>设置 <code>worker 全局作用域</code>的 <a href="https://html.spec.whatwg.org/multipage/workers.html#concept-workerglobalscope-https-state" target="_blank" rel="external">HTTPS 状态</a>为响应的 <a href="https://fetch.spec.whatwg.org/#concept-response-https-state" target="_blank" rel="external">HTTPS 状态</a>。</li>
<li>设置 <code>worker 全局作用域</code>的 referrer policy 为处理响应报文头部的<code>Referrer-Policy</code>字段所的到结果。</li>
<li>在<code>worker的全局作用域</code>和响应上执行<a href="https://w3c.github.io/webappsec-csp/#initialize-global-object-csp" target="_blank" rel="external">初始化全局对象的CSP列表</a>算法。[<a href="https://html.spec.whatwg.org/multipage/references.html#refsCSP" target="_blank" rel="external">CSP(内容安全策略)</a>]</li>
<li>异步地利用响应来完成<a href="https://html.spec.whatwg.org/multipage/webappapis.html#fetching-scripts-perform-fetch" target="_blank" rel="external">执行fetch操作</a>步骤。</li>
</ol>
<p>如果异步执行该算法得到的结果为null，则排队一个任务来发射一个error事件，并且放弃这些步骤。否则，在该算法异步执行完后继续执行之后的步骤。</p>
</li>
<li>将worker和worker全局作用域关联起来。</li>
<li><a href="https://html.spec.whatwg.org/multipage/comms.html#create-a-new-messageport-object" target="_blank" rel="external">创建一个新MessagePort对象</a>，其<a href="https://html.spec.whatwg.org/multipage/comms.html#concept-port-owner" target="_blank" rel="external">所有者</a>是<code>内部设置</code>。让<code>内部端口</code>为新建的对象。</li>
<li>将 <code>内部端口</code> 和 worker 全局作用域关联起来.</li>
<li>将<code>外部端口</code>和<code>内部端口</code>牵连起来。</li>
<li>将<code>文档</code>的<a href="https://html.spec.whatwg.org/multipage/dom.html#document" target="_blank" rel="external">Document</a>对象<a href="https://html.spec.whatwg.org/multipage/workers.html#add-a-document-to-the-worker&#39;s-documents" target="_blank" rel="external">添加到<code>worker的全局作用域</code>下的<code>文档列表</code>里</a>。</li>
<li>如果<code>parent worker global scope</code>不是null，则添加该worker的<code>worker的全局作用域</code>到<code>parent worker global scope</code>的<a href="https://html.spec.whatwg.org/multipage/workers.html#the-worker&#39;s-workers" target="_blank" rel="external">workers列表</a>里。</li>
<li>设置 <code>worker的全局作用域</code>的 <a href="https://html.spec.whatwg.org/multipage/workers.html#concept-workerglobalscope-type" target="_blank" rel="external">type</a> 为<code>options</code>的type成员的值。</li>
<li>创建一个新<a href="https://html.spec.whatwg.org/multipage/workers.html#workerlocation" target="_blank" rel="external">WorkerLocation</a>对象并且将它和<code>worker的全局作用域</code>关联。</li>
<li><strong>关闭孤儿worker</strong>: 开始监控线程，在晚于其不再是一个<code>受保护线程</code>且早于它不再是一个<code>许可线程</code>时，设置<code>worker的全局作用域</code>的<a href="https://html.spec.whatwg.org/multipage/workers.html#dom-workerglobalscope-closing" target="_blank" rel="external">closing</a> flag为true。</li>
<li><strong>挂起线程</strong>: 开始监控线程，在worker全局作用域的<a href="https://html.spec.whatwg.org/multipage/workers.html#dom-workerglobalscope-closing" target="_blank" rel="external">closing</a> flag为false并且worker是一个<a href="https://html.spec.whatwg.org/multipage/workers.html#suspendable-worker" target="_blank" rel="external">可挂起线程</a>时，用户代理挂起该线程的脚本的执行直到<a href="https://html.spec.whatwg.org/multipage/workers.html#dom-workerglobalscope-closing" target="_blank" rel="external">closing</a> flag为true或者worker不再是一个<a href="https://html.spec.whatwg.org/multipage/workers.html#suspendable-worker" target="_blank" rel="external">可挂起线程</a>。</li>
<li>设置 <code>内部设置</code>的<a href="https://html.spec.whatwg.org/multipage/webappapis.html#concept-environment-execution-ready-flag" target="_blank" rel="external">execution ready flag</a>。</li>
<li><p>如果脚本是一个<a href="https://html.spec.whatwg.org/multipage/webappapis.html#classic-script" target="_blank" rel="external">经典脚本</a>，则<a href="https://html.spec.whatwg.org/multipage/webappapis.html#run-a-classic-script" target="_blank" rel="external">执行该经典脚本</a>操作。否则，该脚本就是一个<a href="https://html.spec.whatwg.org/multipage/webappapis.html#module-script" target="_blank" rel="external">模块脚本</a>并<a href="https://html.spec.whatwg.org/multipage/webappapis.html#run-a-module-script" target="_blank" rel="external">执行模块脚本</a>操作</p>
<p>除了返回一个值或者由于异常而失败之外，这也可能由于下面定义的”<a href="https://html.spec.whatwg.org/multipage/workers.html#kill-a-worker" target="_blank" rel="external">杀死一个worker线程</a>“或者”<a href="https://html.spec.whatwg.org/multipage/workers.html#terminate-a-worker" target="_blank" rel="external">结束一个worker线程</a>“算法而被提前放弃。</p>
</li>
<li><p>启动<code>外部端口</code>的<a href="https://html.spec.whatwg.org/multipage/comms.html#port-message-queue" target="_blank" rel="external">端口消息队列</a>。</p>
</li>
<li><p>如果<code>is shared</code>为false，则开启worker的隐藏端口的<a href="https://html.spec.whatwg.org/multipage/comms.html#port-message-queue" target="_blank" rel="external">端口消息队列</a>。</p>
</li>
<li>如果<code>is shared</code>为true, 则排队一个任务, 在<code>worker的全局作用域</code>中使用<a href="https://html.spec.whatwg.org/multipage/webappapis.html#dom-manipulation-task-source" target="_blank" rel="external">the DOM manipulation task source</a>来启动一个名为<a href="https://html.spec.whatwg.org/multipage/indices.html#event-workerglobalscope-connect" target="_blank" rel="external">connect</a>的事件，使用<a href="https://html.spec.whatwg.org/multipage/comms.html#messageevent" target="_blank" rel="external">MessageEvent</a>，并将其<a href="https://html.spec.whatwg.org/multipage/comms.html#dom-messageevent-data" target="_blank" rel="external">data</a>特性初始化为空字符串,<a href="">ports</a>特性初始化为一个包含着<code>内部端口</code>的新<a href="https://heycam.github.io/webidl/#dfn-frozen-array-type" target="_blank" rel="external">frozen array</a>，并且<a href="https://html.spec.whatwg.org/multipage/comms.html#dom-messageevent-source" target="_blank" rel="external">source</a>特性初始化为<code>内部端口</code></li>
<li>启动<a href="https://w3c.github.io/ServiceWorker/#serviceworkercontainer" target="_blank" rel="external">ServiceWorkerContainer</a>对象的<a href="https://w3c.github.io/ServiceWorker/#dfn-client-message-queue" target="_blank" rel="external">客户端消息队列</a>，<a href="https://w3c.github.io/ServiceWorker/#serviceworkercontainer" target="_blank" rel="external">ServiceWorkerContainer</a>对象相关的<a href="https://w3c.github.io/ServiceWorker/#serviceworkercontainer-service-worker-client" target="_blank" rel="external">service worker client</a>是worker全局作用域的<a href="https://html.spec.whatwg.org/multipage/webappapis.html#relevant-settings-object" target="_blank" rel="external">相关设置对象</a>。</li>
<li><strong>Event loop</strong>: 执行由内部配置指定的<a href="https://html.spec.whatwg.org/multipage/webappapis.html#responsible-event-loop" target="_blank" rel="external">responsible event loop</a>直到其被摧毁。<hr>
responsible event loop:不会被使用该event loop的环境立刻回收的event loop。<hr>
由event loop运行的事件的处理或者<a href="https://html.spec.whatwg.org/multipage/webappapis.html#concept-task" target="_blank" rel="external">任务</a>的回调函数的执行可能由于下面定义的”<a href="https://html.spec.whatwg.org/multipage/workers.html#kill-a-worker" target="_blank" rel="external">杀死一个worker线程</a>“或者”<a href="https://html.spec.whatwg.org/multipage/workers.html#terminate-a-worker" target="_blank" rel="external">结束一个worker线程</a>“算法而被提前抛弃。<br>该worker处理模型将会循环这些步骤直到event loop被摧毁，这发生在<a href="https://html.spec.whatwg.org/multipage/workers.html#dom-workerglobalscope-closing" target="_blank" rel="external">closing</a> flag被设置为true之后,正如<a href="https://html.spec.whatwg.org/multipage/webappapis.html#event-loop" target="_blank" rel="external">event loop</a>处理模型里定义的那样。</li>
<li>清空该worker全局作用域下的活动中的计时器的列表。</li>
<li>释放worker的端口列表中的所有端口</li>
<li>清空worker的文档列表。</li>
</ol>
<p>当一个用户代理将要 <strong>杀死一个worker线程</strong>，它必须并行于worker的主循环来执行以下步骤:</p>
<ol>
<li>设置该 worker的 WorkerGlobalScope 对象的closing flag 为true.</li>
<li>如果 WorkerGlobalScope 对象的event loop里的任务队列里还有任务在排队，则直接抛弃它们而不执行。</li>
<li>等待一段由用户代理定义的时间。</li>
<li><p>终止worker中正在执行的脚本</p>
<p>用户代理可以在任意时刻请求“杀死一个worker”处理模型，比如用户请求，cpu配额管理，或者当一个worker不再是一个<code>需要激活线程</code>而该worker在其<code>closing flag</code>被设置为<code>true</code>后仍然继续执行时。</p>
</li>
</ol>
<p>当用户代理要 <strong>结束一个worker线程</strong>，它必须并行于worker的主循环来执行以下步骤:</p>
<ol>
<li>设置该 worker的 WorkerGlobalScope 对象的closing flag 为true.</li>
<li>如果 WorkerGlobalScope 对象的event loop里的任务队列里还有任务在排队，则直接抛弃它们而不执行。</li>
<li>等待一段由用户代理定义的时间。</li>
<li>如果该worker的 WorkerGlobalScope对象是一个DedicatedWorkerGlobalScope对象（比如该worker是一个dedicated worker），则清空该worker的隐藏端口所对应的端口的端口消息队列。</li>
</ol>
</blockquote>
<hr>
<p>注意：由于 whatwg 中web worker的规范依然在更新，您读到这篇文章的时候可能看到已不是最新的处理模型，建议参考 W3C 中的最新规范。</p>
<hr>
<h2 id="错误处理"><a href="#错误处理" class="headerlink" title="错误处理"></a>错误处理</h2><p>当worker内出现了一个运行时错误，它的onerror 事件处理程序会被调用。该事件处理程序会收到一个名为error的事件，它实现了ErrorEvent 接口。<br>该事件可以被取消但是不会冒泡；为了阻止默认行为的发生，该worker可以调用错误事件的<code>preventDefault()</code> 方法。<br>错误事件有以下三个域:</p>
<ul>
<li>message<br>  一个人工可读的错误消息。</li>
<li>filename<br>  发生错误的脚本文件的名字。</li>
<li>lineno<br>  发生错误的代码在脚本文件中的行数。</li>
</ul>
<h3 id="深入规范"><a href="#深入规范" class="headerlink" title="深入规范"></a>深入规范</h3><p>当worker的脚本发生运行时错误时,如果错误没有在处理上一个错误期间发生，则用户代理必需为该脚本所发生的错误, 带上发生错误的代码位置信息（行数和列数）, 使用 WorkerGlobalScope 对象作为目标。</p>
<p>对于共享worker， 如果错误在之后仍未被处理， 则错误可能会被报告给用户。</p>
<p>对于专属worker，如果该错误在之后仍未被处理，则用户代理必需排队一个任务来以发射出一个使用ErrorEvent接口实现的受信任的名为error的事件，并带上其消息、文件名、行数、列数和被恰当初始化过的特性，并且错误特性被初始化为null，且该事件不冒泡并且可以在该worker对应的Worker对象上被取消。如果事件没被取消，则用户代理必需表现得像一个未处理的运行时错误发生在Worker对象的全局作用域下那样，逐级往上地重复整个运行时脚本错误报告处理流程。</p>
<p>如果该worker正在连接着的隐藏端口已经被释放了（比如，如果父worker已经被结束），则该用户代理必需表现的像该the Workerobject没有错误事件处理函数并且该worker的onerror特性是null那样。如果端口未被释放，则执行前述的流程。</p>
<hr>
<p>因此，错误报告会从专属worker链一直冒泡到主文档，即使整条链上的一些worker已经被结束并且被垃圾回收。而错误事件则不会冒泡。</p>
<hr>
<h2 id="数据传输"><a href="#数据传输" class="headerlink" title="数据传输"></a>数据传输</h2><p>主线程与子线程数据通信方式有多种，通信内容，可以是文本，也可以是对象。主线程与子线程之间也可以交换二进制数据，比如File、Blob、ArrayBuffer等对象，也可以在线程之间发送。比如，主线程向子线程发送一个50MB文件，默认情况下浏览器会生成一个原文件的拷贝。</p>
<h3 id="通过-cloneable-objects传输数据"><a href="#通过-cloneable-objects传输数据" class="headerlink" title="通过 cloneable objects传输数据"></a>通过 <a href="http://w3c.github.io/html/infrastructure.html#safe-passing-of-structured-data" target="_blank" rel="external">cloneable objects</a>传输数据</h3><p>这种通信是深拷贝关系， 即是传值而不是地址，子线程对通信内容的修改，不会影响到主线程。<br>在传输过程中使用的克隆算法叫<a href="http://w3c.github.io/html/infrastructure.html#structuredclone" target="_blank" rel="external">structured clone algorithm</a>,这种算法允许传输大部分类型，包括：</p>
<ul>
<li>正则对象。</li>
<li>Blob、 File 和 FileList 对象。</li>
<li>ImageData对象。</li>
<li>unJSON-safe的对象。</li>
</ul>
<hr>
<p>早期浏览器内部的运行机制是，先将通信内容串行化，然后把串行化后的字符串发给子线程，后者再将它还原。</p>
<hr>
<p>不能传输的数据有：</p>
<ul>
<li>Error和Function对象，尝试克隆会抛出<code>DATA_CLONE_ERR</code>错误。</li>
<li>DOM节点，尝试克隆会抛出<code>DATA_CLONE_ERR</code>错误。</li>
<li>对象的特定参数不会被保留：<ul>
<li>RegExp对象的lastIndex 域不会被保留。</li>
<li>属性描述符、数据描述符不会被复制。</li>
<li>原型链不会被遍历和复制。</li>
</ul>
</li>
</ul>
<h3 id="通过-transferable-objects传输数据"><a href="#通过-transferable-objects传输数据" class="headerlink" title="通过 transferable objects传输数据"></a>通过 <a href="http://www.w3.org/html/wg/drafts/html/master/infrastructure.html#transferable-objects" target="_blank" rel="external">transferable objects</a>传输数据</h3><p>但是，用拷贝方式发送二进制数据，会造成性能问题。为了解决这个问题，规范定义了<code>Transferable objects</code>，通过控制权移交的方式，将对象从主线程直接转移给子线程，转移后主线程无法再使用这些数据，这是为了防止出现多个线程同时修改数据的问题。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// Create a 32MB "file" and fill it.</span></div><div class="line"><span class="keyword">var</span> uInt8Array = <span class="keyword">new</span> <span class="built_in">Uint8Array</span>(<span class="number">1024</span>*<span class="number">1024</span>*<span class="number">32</span>); <span class="comment">// 32MB</span></div><div class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; uInt8Array .length; ++i) &#123;</div><div class="line">    uInt8Array[i] = i;</div><div class="line">&#125;</div><div class="line">worker.postMessage(uInt8Array.buffer, [uInt8Array.buffer]);</div></pre></td></tr></table></figure>
<h2 id="关于线程安全"><a href="#关于线程安全" class="headerlink" title="关于线程安全"></a>关于线程安全</h2><p>Worker接口生成真正的系统级别的线程，有心的程序员会想到如果不太小心，那么并行会对你的代码产生有趣的影响。</p>
<p>然而，对于 web worker 来说，与其他线程的通信点会被很细心地控制，这就意味着你很难引起并行问题。你没有办法去访问非线程安全的组件或者是 DOM，此外你还需要通过序列化对象作为数据来在线程间传递。所以你要是不费点劲儿，还真搞不出错误来。</p>
<h2 id="内容安全策略"><a href="#内容安全策略" class="headerlink" title="内容安全策略"></a>内容安全策略</h2><p>Worker们被视为有它们自己的执行上下文，不同于创建它们的文档。出于这个原因，一般而言，worker不受创建它们的文档（或者父worker）的内容安全策略所约束。所以，举个例子，假设一个服务端返回的文档有如下的头部：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Content-Security-Policy: script-src &apos;self&apos;</div></pre></td></tr></table></figure></p>
<p>这将会阻止它所包含的任何脚本执行eval()。但是，如果脚本构造了一个worker，在worker上下文中运行的代码将会被允许使用eval()。<br>为了给worker指定内容安全策略，需要为请求的worker脚本的响应报文设置一个  Content-Security-Policy 响应头部。<br>例外，在worker脚本的源是全局唯一标识（比如，当它的URL有一个 Data URI scheme或者blob）的时候，这周情况下，该worker就会继承创建它的文档或者worker的内容安全策略。</p>
<h2 id="浏览器支持"><a href="#浏览器支持" class="headerlink" title="浏览器支持"></a><a href="http://caniuse.com/#search=web%20worker" target="_blank" rel="external">浏览器支持</a></h2><p><img src="http://p0.meituan.net/kuailv/2eeab3203902eee3bf8565f7fbedaace198201.png" alt="" title="浏览器支持"></p>
<h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul>
<li><a href="https://html.spec.whatwg.org/multipage/workers.html" target="_blank" rel="external">HTML living standard — Last Updated 13 April 2017</a></li>
<li><a href="http://w3c.github.io/html/infrastructure.html#transferable-objects" target="_blank" rel="external">HTML 5.2 Editor’s Draft, 9 April 2017</a></li>
<li><a href="https://developer.mozilla.org/en-US/docs/Web/API/Web_Workers_API" target="_blank" rel="external">MDN - Web Workers API</a></li>
<li><a href="https://developer.mozilla.org/en-US/docs/Web/API/AbstractWorker" target="_blank" rel="external">MDN - AbstractWorker</a></li>
<li><a href="https://developer.mozilla.org/en-US/docs/Web/API/Worker" target="_blank" rel="external">MDN - Worker</a></li>
<li><a href="https://developer.mozilla.org/en-US/docs/Web/API/SharedWorker" target="_blank" rel="external">MDN - SharedWorker</a></li>
<li><a href="https://developer.mozilla.org/en-US/docs/Web/API/WorkerGlobalScope" target="_blank" rel="external">MDN - WorkerGlobalScope</a></li>
<li><a href="https://developer.mozilla.org/en-US/docs/Web/API/DedicatedWorkerGlobalScope" target="_blank" rel="external">MDN - DedicatedWorkerGlobalScope</a></li>
<li><a href="https://developer.mozilla.org/en-US/docs/Web/API/SharedWorkerGlobalScope" target="_blank" rel="external">MDN - SharedWorkerGlobalScope</a></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://p0.meituan.net/kuailv/678b764c4d0bff4629f20e748357481c29564.jpg&quot; alt=&quot;&quot; title=&quot;web worker&quot;&gt;&lt;br&gt;Web Workers 是一种不在页面线程而是在后台线程中执行脚本的技术。Web Workers 的优点在于可以将计算密集型和I/O密集型的操作放在一个单独的后台线程中执行，进而使得主线程（通常是UI线程）能够不被阻塞，也不会被减缓。&lt;/p&gt;
&lt;p&gt;本博客主要内容分为七部分：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Web Worker 概念及使用&lt;/li&gt;
&lt;li&gt;Web worker的生命周期和处理模型&lt;/li&gt;
&lt;li&gt;错误处理&lt;/li&gt;
&lt;li&gt;数据传输&lt;/li&gt;
&lt;li&gt;线程安全&lt;/li&gt;
&lt;li&gt;内容安全策略&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="LexHuang" scheme="http://xgfe.github.io/categories/LexHuang/"/>
    
    
      <category term="javascript" scheme="http://xgfe.github.io/tags/javascript/"/>
    
      <category term="web api" scheme="http://xgfe.github.io/tags/web-api/"/>
    
  </entry>
  
  <entry>
    <title>远程调用框架Thrift分享</title>
    <link href="http://xgfe.github.io/2017/05/03/zhouxiong/Thrift/"/>
    <id>http://xgfe.github.io/2017/05/03/zhouxiong/Thrift/</id>
    <published>2017-05-02T16:00:00.000Z</published>
    <updated>2017-09-12T08:43:59.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Thrift"><a href="#Thrift" class="headerlink" title="Thrift"></a>Thrift</h2><p>Thrift是一个跨语言的远程调用框架(RPC)，它允许你根据IDL规则定义数据类型和服务接口，然后通过Thrift编译器生成跨语言的client和server端，目前支持市面上所有的主流语言。</p>
<a id="more"></a>
<ul>
<li>主要目标</li>
</ul>
<p>建立一种高效，可信赖的跨语言通信方案，不再将客户端和服务端局限于同一种语言上。</p>
<h2 id="Thrift-VS-Restful"><a href="#Thrift-VS-Restful" class="headerlink" title="Thrift VS Restful"></a>Thrift VS Restful</h2><p>Thrift RPC相比于HTTP的Restful模式有自己的优势，也有不足的地方。</p>
<table>
<thead>
<tr>
<th>对比项</th>
<th style="text-align:center">Thrift</th>
<th>Restful</th>
</tr>
</thead>
<tbody>
<tr>
<td>架构设计</td>
<td style="text-align:center">基于C/S模式</td>
<td>基于B/S模式</td>
</tr>
<tr>
<td>传输协议</td>
<td style="text-align:center">可以通过Socket，HTTP传输</td>
<td>通过HTTP传输</td>
</tr>
<tr>
<td>传输格式</td>
<td style="text-align:center">基于二进制数据传输</td>
<td>基于JSON或者XML格式传输</td>
</tr>
<tr>
<td>优势</td>
<td style="text-align:center">体积更小，传输更快</td>
<td>充分利用HTTP协议优势</td>
</tr>
<tr>
<td>劣势</td>
<td style="text-align:center">增加额外序列化和反序列化成本</td>
<td>针对业务场景HTTP动词太少   </td>
</tr>
</tbody>
</table>
<h2 id="Thrift基础知识之IDL"><a href="#Thrift基础知识之IDL" class="headerlink" title="Thrift基础知识之IDL"></a>Thrift基础知识之IDL</h2><p>Thrift是一门接口定义语言(interface definition language, IDL)，遵循自己的语言原则。一个IDL文件中包含定义的数据结构以及接口服务，可以由Thrift的代码生成器将源文件(.thrift)编译成各种目标语言支持的文件，例如可以将IDL文件编译成Java支持的.java文件，NodeJS支持的.js文件等。</p>
<h3 id="基本数据类型"><a href="#基本数据类型" class="headerlink" title="基本数据类型"></a>基本数据类型</h3><ul>
<li><p>bool 表示一个布尔值，取true或false</p>
</li>
<li><p>byte 表示一个带符号的字节</p>
</li>
<li><p>i16 表示一个带符号的16位整形</p>
</li>
<li><p>i32 表示一个带符号的32位整形 </p>
</li>
<li><p>i64 表示一个带符号的64位整形</p>
</li>
<li><p>double 表示一个带符号的64位浮点数is</p>
</li>
<li><p>string 表示一个不可知编码的文本或二进制串</p>
</li>
</ul>
<h3 id="结构struct"><a href="#结构struct" class="headerlink" title="结构struct"></a>结构struct</h3><p>类似于C++里的结构体，定义一个通用的对象以此来跨语言，通过struct来描述，对于struct有一些限制</p>
<ul>
<li><p>struct不能继承，可以嵌套</p>
</li>
<li><p>成员必须有明确的数据类型</p>
</li>
<li><p>成员是被整数编过号的，编号不能被重复使用</p>
</li>
<li><p>字段有required和optional之分，默认值为optional，设置为required，则必须赋值而且会被序列化；设置为optional，则在没有设置值的时候不会进行序列化。而且如果设置为required，而没有赋值时会报错<code>Required field XX is unset!</code></p>
</li>
<li><p>字段可以设置默认值</p>
</li>
</ul>
<p>例如定义一个User对象</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"> struct User &#123;</div><div class="line">    1: i16 id,</div><div class="line">    2: string username,</div><div class="line">    3: string password = &apos;123456&apos;,</div><div class="line">    4: required string email,</div><div class="line">    5: optional string telphone</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="容器Containers"><a href="#容器Containers" class="headerlink" title="容器Containers"></a>容器Containers</h3><p>Thrift容器类似于主流编程语言的容器，主要有三种类型：</p>
<ul>
<li><p>list&lt; type &gt;：元素类型为type的有序列表，允许重复元素</p>
</li>
<li><p>set&lt; type &gt;：元素类型为type的无序列表，不允许重复元素</p>
</li>
<li><p>map&lt; key, value&gt;：&lt; key, value&gt;类型的键值对，key不允许重复，一般情况下map的key最好是thrift的基本类型</p>
</li>
</ul>
<p>例如定义一个struct，里面包含三种类型的容器</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">struct User &#123;</div><div class="line">    1: i16 id,</div><div class="line">    2: string username,</div><div class="line">    3: string password,</div><div class="line">    4: required string email,</div><div class="line">    5: optional string telphone</div><div class="line">&#125;</div><div class="line"></div><div class="line">struct Person &#123; </div><div class="line">    1: list&lt;User&gt; userList,</div><div class="line">    2: set&lt;User&gt; userSet,</div><div class="line">    3: map&lt;string, User&gt; userMap</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="枚举Enum"><a href="#枚举Enum" class="headerlink" title="枚举Enum"></a>枚举Enum</h3><p>枚举是很多语言中都有的概念，是有穷序列的所有成员的一种表示方式，具有以下一些特征：</p>
<ul>
<li><p>编译器会将每个成员变量赋予一个整数值，默认从0开始</p>
</li>
<li><p>可以赋予成员变量任意一个整数值</p>
</li>
</ul>
<p>例如定义一个运算符的枚举</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">enum Operation &#123;</div><div class="line">    ADD = 1,</div><div class="line">    SUBTRACT = 2,</div><div class="line">    MULTIPLY = 3,</div><div class="line">    DIVIDE = 4</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="异常Exception"><a href="#异常Exception" class="headerlink" title="异常Exception"></a>异常Exception</h3><p>Thrift中同样提供了自定义异常信息的exception属性，Thrift的exception继承了每种语言的基础异常类。</p>
<p>例如，自定义一个运算错误的异常</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">// 运算异常</div><div class="line">exception InvalidOperation &#123;</div><div class="line">    1: i32 whatOp,  </div><div class="line">    2: string why</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="服务Service"><a href="#服务Service" class="headerlink" title="服务Service"></a>服务Service</h3><p>Thrift中的service定义相当于其他语言中的接口定义，service中只有方法的声明，没有方法的实现。Thrift编译器会产生实现这些接口的client和server。</p>
<p>例如定义个NodeJS的运算Service，注意在service中不需要进行顺序的编码</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">service Calculate &#123;</div><div class="line">    void ping(),</div><div class="line"></div><div class="line">    i32 add(1: i32 num1, 2: i32 num2),</div><div class="line"></div><div class="line">    i32 calculate(1: i32 logid, 2: Work work) throws (1: InvalidOperation invalid)</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="命名空间Namespace"><a href="#命名空间Namespace" class="headerlink" title="命名空间Namespace"></a>命名空间Namespace</h3><p>Thrift中的namespace类似于c++中的namespace和java中的package，将相关代码组织在一起</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">namespace cpp com.example.test</div><div class="line">namespace java com.example.test </div><div class="line">namespace php com.example.test</div></pre></td></tr></table></figure>
<h3 id="include"><a href="#include" class="headerlink" title="include"></a>include</h3><p>为了方便管理、重用和提高模块性/组织性，我们常常分割Thrift定义在不同的文件中。Thrift允许文件通过include关键字来引入其它thrift文件，用户需要使用thrift文件名作为前缀访问被包含的对像。</p>
<p>注意：在include关键那行后面没有逗号或者分号。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">include &quot;test.thrift&quot;   </div><div class="line">...</div><div class="line">struct StSearchResult &#123;</div><div class="line">    1: i32 uid,</div><div class="line">	...</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="Thrift基础之底层网络通信"><a href="#Thrift基础之底层网络通信" class="headerlink" title="Thrift基础之底层网络通信"></a>Thrift基础之底层网络通信</h2><p>Thrift的整体架构图如下所示</p>
<p><img src="https://p1.meituan.net/dpnewvc/c8ae7c1cd293f4317d504b39289f7924517918.png" alt="架构图"></p>
<p>从架构图中可以看出，我们自己编写的代码只需要实现service就可以，我们其实并不关心底层的Protocol和Transport的实现。</p>
<h3 id="Transport"><a href="#Transport" class="headerlink" title="Transport"></a>Transport</h3><p>Transport提供了一个简单的网络读写抽象层，是thrift最底层的服务，Transport接口定义了以下一些方法</p>
<ul>
<li><p>open</p>
</li>
<li><p>close</p>
</li>
<li><p>read</p>
</li>
<li><p>write</p>
</li>
<li><p>flush</p>
</li>
</ul>
<p>目前提供的transport有以下这些：</p>
<ul>
<li><p>TSocket：使用阻塞的socket I/O</p>
</li>
<li><p>TFramedTransport：以帧的形式发送，每帧前面是一个长度。要求服务器来non-blocking server</p>
</li>
<li><p>TFileTransport：写到文件。没有包括在java实现中。</p>
</li>
<li><p>TMemoryTransport：使用内存 I/O 。java实现中在内部使用了ByteArrayOutputStream。</p>
</li>
<li><p>TZlibTransport：压缩使用zlib。在java实现中还不可用。</p>
</li>
</ul>
<h3 id="Protocol"><a href="#Protocol" class="headerlink" title="Protocol"></a>Protocol</h3><p>Protocol抽象层定义了一种将内存中数据结构映射成可传输格式的机制。换句话说，Protocol定义了datatype怎样使用底层的Transport对自己进行编解码。因此，Protocol的实现要给出编码机制并负责对数据进行序列化。</p>
<p>目前支持的协议有：</p>
<ul>
<li><p>TBinaryProtocol：二进制格式</p>
</li>
<li><p>TCompactProtocol：效率和高压缩编码数据</p>
</li>
<li><p>TDenseProtocol：和TCompactProtocol相似，但是省略了meta信息，从哪里发送的，增加了receiver。还在实验中，java中还不可用</p>
</li>
<li><p>TJSONProtocol：使用JSON</p>
</li>
<li><p>TSimpleJSONProtocol：只写的protocol使用JSON</p>
</li>
<li><p>TDebugProtocol：使用人类可读的text格式，帮助调试</p>
</li>
</ul>
<h2 id="Thrift使用"><a href="#Thrift使用" class="headerlink" title="Thrift使用"></a>Thrift使用</h2><p>在这里我们要完成的一个功能是使用NodeJS编程，建立Thrift服务，通过客户端向服务端发送请求完成加减乘除的计算，下面对整个过程进行详细讲解。</p>
<h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><p>参考地址：<a href="https://thrift.apache.org/docs/BuildingFromSource" target="_blank" rel="external">https://thrift.apache.org/docs/BuildingFromSource</a></p>
<ul>
<li>下载</li>
</ul>
<p>首先将thrift项目clone到本地，thrift地址为<code>https://github.com/apache/thrift.git</code>，然后进入到项目中。</p>
<ul>
<li>构建和安装thrift的编译器</li>
</ul>
<p>进入到项目的顶级目录中，执行以下命令，安装boost</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">./bootstrap.sh</div></pre></td></tr></table></figure>
<p>然后执行以下命令，安装libevent</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">./configure --prefix=/usr/local</div><div class="line">make</div></pre></td></tr></table></figure>
<p>在安装过程中可能出现<code>Bison version 2.5 or higher must be installed on the system!</code>的问题，需要安装bison的最新版本</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">brew install bison</div></pre></td></tr></table></figure>
<p>然后链接bison</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">brew link bison --force</div></pre></td></tr></table></figure>
<h3 id="建立-thrift文件"><a href="#建立-thrift文件" class="headerlink" title="建立.thrift文件"></a>建立.thrift文件</h3><p>建立一个calculate.thrift文件，在文件中定义struct以及服务接口。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line">// 操作运算符</div><div class="line">enum Operation &#123;</div><div class="line">    ADD = 1,</div><div class="line">    SUBTRACT = 2,</div><div class="line">    MULTIPLY = 3,</div><div class="line">    DIVIDE = 4</div><div class="line">&#125;</div><div class="line"></div><div class="line">// 运算实体</div><div class="line">struct Work &#123;</div><div class="line">    1: i32 num1 = 0,</div><div class="line">    2: i32 num2,</div><div class="line">    3: Operation op,</div><div class="line">    4: string comment</div><div class="line">&#125;</div><div class="line"></div><div class="line">// 异常信息</div><div class="line">exception InvalidOperation &#123;</div><div class="line">    1: i32 whatOp,</div><div class="line">    2: string why</div><div class="line">&#125;</div><div class="line"></div><div class="line">// 服务接口</div><div class="line">service Calculate &#123;</div><div class="line">    void ping(),</div><div class="line"></div><div class="line">    i32 add(1: i32 num1, 2: i32 num2),</div><div class="line"></div><div class="line">    i32 calculate(1: i32 logid, 2: Work work) throws (1: InvalidOperation invalid)</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="编译-thrift文件"><a href="#编译-thrift文件" class="headerlink" title="编译.thrift文件"></a>编译.thrift文件</h3><p>通过以下命令来编译calculate.thrift文件，—gen后面的参数表示编译成支持NodeJS的文件</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">thrift -r --gen js:node tutorial.thrift</div></pre></td></tr></table></figure>
<p>编译后会发现生成了一个gen-nodejs文件夹，下面包含了两个文件<br><img src="https://p1.meituan.net/dpnewvc/e6b5b5b48d0fe84953da10fbffe70edb16813.png" alt="生成的文件夹"></p>
<h3 id="编写server文件"><a href="#编写server文件" class="headerlink" title="编写server文件"></a>编写server文件</h3><p>Thrift是基于Client/Server模式的，我们需要分别编写server和client文件。</p>
<ul>
<li>require</li>
</ul>
<p>首先需要通过require的方式引入thrift和刚才生成的gen-nodejs文件夹下的两个文件</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">var thrift = require(&apos;thrift&apos;);</div><div class="line">var Calculate = require(&apos;../gen-nodejs/Calculate&apos;);</div><div class="line">var ttypes = require(&apos;../gen-nodejs/calculate_types&apos;);</div></pre></td></tr></table></figure>
<ul>
<li>创建server</li>
</ul>
<p>通过createServer()方法创建一个server，并在内部实现service中定义的几个方法</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">var server = thrift.createServer(Calculate, &#123;&#125;)</div></pre></td></tr></table></figure>
<ul>
<li>监听端口</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">server.listen(9090);</div></pre></td></tr></table></figure>
<ul>
<li>完整代码如下</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div></pre></td><td class="code"><pre><div class="line">var thrift = require(&apos;thrift&apos;);</div><div class="line">var Calculate = require(&apos;../gen-nodejs/Calculate&apos;);</div><div class="line">var ttypes = require(&apos;../gen-nodejs/calculate_types&apos;);</div><div class="line"></div><div class="line">var server = thrift.createServer(Calculate, &#123;</div><div class="line">    ping: function (result) &#123;</div><div class="line">        console.log(&apos;ping success&apos;);</div><div class="line">        result(null);</div><div class="line">    &#125;,</div><div class="line">    add: function (num1, num2, result) &#123;</div><div class="line">        console.log(&apos;add success&apos;);</div><div class="line">        result(null, num1 + num2);</div><div class="line">    &#125;,</div><div class="line">    calculate: function (logid, work, result) &#123;</div><div class="line">        console.log(&apos;calculate success&apos;);</div><div class="line">        var val = 0;</div><div class="line">        if (work.op === ttypes.Operation.ADD) &#123;</div><div class="line">            val = work.num1 + work.num2;</div><div class="line">        &#125; else if (work.op === ttypes.Operation.SUBTRACT) &#123;</div><div class="line">            val = work.num1 - work.num2;</div><div class="line">        &#125; else if (work.op === ttypes.Operation.MULTIPLY) &#123;</div><div class="line">            val = work.num1 * work.num2;</div><div class="line">        &#125; else if (work.op === ttypes.Operation.DIVIDE) &#123;</div><div class="line">            if (work.num2 === 0) &#123;</div><div class="line">                var o = new ttypes.InvalidOperation();</div><div class="line">                o.whatOp = work.op;</div><div class="line">                o.why = &apos;Can not divide by 0&apos;;</div><div class="line">                result(o);</div><div class="line">                return;</div><div class="line">            &#125;</div><div class="line">            val = work.num1 / work.num2;</div><div class="line">        &#125; else &#123;</div><div class="line">            var o = new ttypes.InvalidOperation();</div><div class="line">            o.whatOp = work.op;</div><div class="line">            o.why = &apos;invalid operation&apos;;</div><div class="line">            result(o);</div><div class="line">            return;</div><div class="line">        &#125;</div><div class="line">        result(null, val);</div><div class="line">    &#125;</div><div class="line">&#125;);</div><div class="line"></div><div class="line">server.listen(9090);</div></pre></td></tr></table></figure>
<h3 id="编写client文件"><a href="#编写client文件" class="headerlink" title="编写client文件"></a>编写client文件</h3><ul>
<li>require</li>
</ul>
<p>类似于server端，client端也需要引入相关文件</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">var thrift = require(&apos;thrift&apos;);</div><div class="line">var Calculator = require(&apos;../gen-nodejs/Calculate&apos;);</div><div class="line">var ttypes = require(&apos;../gen-nodejs/calculate_types&apos;);</div></pre></td></tr></table></figure>
<ul>
<li>建立连接</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">var transport = thrift.TBufferedTransport;</div><div class="line">var protocol = thrift.TBinaryProtocol;</div><div class="line"></div><div class="line">var connection = thrift.createConnection(&quot;localhost&quot;, 9090, &#123;</div><div class="line">  transport : transport,</div><div class="line">  protocol : protocol</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<ul>
<li>创建client</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">var client = thrift.createClient(Calculator, connection);</div></pre></td></tr></table></figure>
<ul>
<li>调用service中的方法</li>
</ul>
<p>client端通过调用service中的方法向server发送请求</p>
<ul>
<li>完整代码</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div></pre></td><td class="code"><pre><div class="line">var thrift = require(&apos;thrift&apos;);</div><div class="line">var Calculator = require(&apos;../gen-nodejs/Calculate&apos;);</div><div class="line">var ttypes = require(&apos;../gen-nodejs/calculate_types&apos;);</div><div class="line"></div><div class="line">var transport = thrift.TBufferedTransport;</div><div class="line">var protocol = thrift.TBinaryProtocol;</div><div class="line"></div><div class="line">var connection = thrift.createConnection(&apos;localhost&apos;, 9090, &#123;</div><div class="line">    transport: transport,</div><div class="line">    protocol: protocol</div><div class="line">&#125;);</div><div class="line"></div><div class="line">connection.on(&apos;error&apos;, function (error) &#123;</div><div class="line">    console.log(error);</div><div class="line">&#125;);</div><div class="line"></div><div class="line">var client = thrift.createClient(Calculator, connection);</div><div class="line"></div><div class="line">client.ping(function (response) &#123;</div><div class="line">    console.log(&apos;client ping&apos;);</div><div class="line">&#125;);</div><div class="line"></div><div class="line">client.add(1, 1, function (error, response) &#123;</div><div class="line">    console.log(&apos;1 + 1 = &apos;, response);</div><div class="line">&#125;);</div><div class="line"></div><div class="line">var work = new ttypes.Work();</div><div class="line">work.op = ttypes.Operation.SUBTRACT;</div><div class="line">work.num1 = 10;</div><div class="line">work.num2 = 4;</div><div class="line"></div><div class="line">var work2 = new ttypes.Work(&#123;</div><div class="line">    num1: 10,</div><div class="line">    num2: 4,</div><div class="line">    op: ttypes.Operation.SUBTRACT</div><div class="line">&#125;);</div><div class="line"></div><div class="line">client.calculate(1, work2, function (error, response) &#123;</div><div class="line">    if (error) &#123;</div><div class="line">        console.log(error);</div><div class="line">    &#125; else &#123;</div><div class="line">        console.log(&apos;10 - 4 = &apos; + response);</div><div class="line">    &#125;</div><div class="line">    connection.end();</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<h3 id="调用server和client"><a href="#调用server和client" class="headerlink" title="调用server和client"></a>调用server和client</h3><p>直接通过node命令启动server监听端口，然后通过node创建client</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">node server/server.js</div><div class="line"></div><div class="line">node client/client.js</div></pre></td></tr></table></figure>
<h3 id="运行结果"><a href="#运行结果" class="headerlink" title="运行结果"></a>运行结果</h3><ul>
<li><p>服务端<br><img src="https://p1.meituan.net/dpnewvc/14ff01bccad5570e9e923b31798c820d28373.png" alt="服务端结果"></p>
</li>
<li><p>客户端<br><img src="https://p1.meituan.net/dpnewvc/8d37bd540b2967cbf8367ce454b4740c23797.png" alt="客户端结果"></p>
</li>
</ul>
<h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><p>1.<a href="http://www.jianshu.com/p/0f4113d6ec4b" target="_blank" rel="external">Thrift IDL入门教程</a></p>
<p>2.<a href="https://thrift.apache.org/tutorial/nodejs" target="_blank" rel="external">thrift官网的NodeJS实例</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Thrift&quot;&gt;&lt;a href=&quot;#Thrift&quot; class=&quot;headerlink&quot; title=&quot;Thrift&quot;&gt;&lt;/a&gt;Thrift&lt;/h2&gt;&lt;p&gt;Thrift是一个跨语言的远程调用框架(RPC)，它允许你根据IDL规则定义数据类型和服务接口，然后通过Thrift编译器生成跨语言的client和server端，目前支持市面上所有的主流语言。&lt;/p&gt;
    
    </summary>
    
      <category term="zhouxiong" scheme="http://xgfe.github.io/categories/zhouxiong/"/>
    
    
      <category term="Thrift" scheme="http://xgfe.github.io/tags/Thrift/"/>
    
      <category term="NodeJS" scheme="http://xgfe.github.io/tags/NodeJS/"/>
    
  </entry>
  
  <entry>
    <title>如何实现一套iOS-router</title>
    <link href="http://xgfe.github.io/2017/04/21/shsoul/router/"/>
    <id>http://xgfe.github.io/2017/04/21/shsoul/router/</id>
    <published>2017-04-21T04:10:21.000Z</published>
    <updated>2017-09-12T08:43:59.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3><p>本文主要是提供一套iOS-router的解决方案。</p>
<a id="more"></a>
<h3 id="router是什么？"><a href="#router是什么？" class="headerlink" title="router是什么？"></a>router是什么？</h3><p>简单的说，router就是用url跟一些操作绑定，我们可以通过我们设定的url，执行设定的操作，如打开某个页面。看图：</p>
<p><img src="https://p0.meituan.net/dpnewvc/e4c8706c48fdac66aff949f38b599a0015251.png" alt=""></p>
<h3 id="为什么要router？"><a href="#为什么要router？" class="headerlink" title="为什么要router？"></a>为什么要router？</h3><p>随着我们的项目越来越大，界面越来越多，逻辑越来越复杂。界面间的路由也变得越来越臃肿，耦合越来越大。我们需要一套框架来解决和简化这些问题。也就是说我们需要router。router主要作用：</p>
<ol>
<li>解耦界面间的越来越复杂的依赖关系。</li>
<li>统一接口.</li>
<li>实现router拦截器。集中处理需要拦截的需求，如登录拦截。也方便埋点。</li>
<li>方便和其他app的通信，方便处理web跳转到app的逻辑。</li>
</ol>
<p>举个例子：</p>
<figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//使用router前，这里必须在Viewcontroller调用。</span></div><div class="line"></div><div class="line"><span class="built_in">UIViewController</span> *main = [[<span class="built_in">UIViewController</span> alloc] initWithxxx:(<span class="keyword">id</span>)xxx];</div><div class="line">[<span class="keyword">self</span>.navigationController pushViewController:main animated:<span class="literal">YES</span>];</div><div class="line"></div><div class="line"><span class="comment">//使用router后，这里可以任何地方调用。</span></div><div class="line"></div><div class="line">Router.router.build(<span class="string">"/main"</span>).withAnimated(<span class="literal">YES</span>).withObject(<span class="string">@"key"</span>, value).navigate();</div></pre></td></tr></table></figure>
<h3 id="如何实现router"><a href="#如何实现router" class="headerlink" title="如何实现router"></a>如何实现router</h3><ol>
<li><p>明确我们需要做什么。</p>
<ul>
<li>我们需要一个register来注册我们的类，如ViewController。绑定url和类。</li>
<li>我们需要一个router来处理我们所有的路由逻辑。因此要定义好router的接口。</li>
<li>我们需要拦截器。因此要定义好拦截器接口。</li>
<li>我们需要至少支持push和present两种模式。</li>
</ul>
</li>
<li><p>实现方案<br><img src="https://p0.meituan.net/dpnewvc/c501389026c246735b894934a7cf436a10727.png" alt=""></p>
<ul>
<li>在register模块上，保存url和类的映射关系。并保存所有的拦截器。</li>
<li>在router模块：<ul>
<li>由于有两种模式，因此得有两个方法调用present和push（个人感觉navigate更合适，因为可以往前或往后导航）</li>
<li>由于可以前后导航，因此得自定义的vc类中，得定义两个接口，init和update。</li>
<li>维护路由堆栈，加入新的用init，导航到堆栈中存在的就调update。</li>
</ul>
</li>
<li>在跳转之前，调用所有的拦截器，根据拦截器返回的结果再做真正的跳转操作。</li>
<li>用的是字典传参。</li>
<li>由于用的是字典传参，最好加入依赖注入方案。</li>
</ul>
</li>
</ol>
<h3 id="先假想使用router，再思考封装router。"><a href="#先假想使用router，再思考封装router。" class="headerlink" title="先假想使用router，再思考封装router。"></a>先假想使用router，再思考封装router。</h3><p>在上面的方案中，我们已经定义好了我们的router中的一些内容，大概构思了一个方案。我们先想想如果我们已经有了一套router，我们该怎么使用才满足我们的需求还有体验。（我的想法）</p>
<ol>
<li>首先我们自定义一个vc，实现init和update协议。有依赖注入肯定最好，直接调用注入的方法，不用逐一赋值。</li>
<li>在register模块上注册我们的vc。有拦截器加拦截器。</li>
<li>最后调用router相应的方法传参和跳转到我们定义的vc吧。为了更好的使用体验(参数的不确定)，用builder模式好一点。</li>
</ol>
<figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">Router.router.build(<span class="string">"/main"</span>).withAnimated(<span class="literal">YES</span>).withObject(<span class="string">@"key"</span>, value).navigate();</div><div class="line"></div><div class="line">Router.router.build(<span class="string">"/login"</span>).withAnimated(<span class="literal">YES</span>).withObject(<span class="string">@"key"</span>, value).present();</div></pre></td></tr></table></figure>
<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p> 以上是我对router的一些想法，也按照这个想法实现了一套router（KLMRouter）。了解更多请移步<a href="https://github.com/shsoul/KLMRouter" target="_blank" rel="external">github</a>。再也不用关注路由的关系了，只需关注本身页面的构造。达到解耦的效果。特别在嵌套很深的界面中，路由可直接在操作中进行，再也不用回调到外面的controller进行跳转。总的来说，效果不错。</p>
<p> <img src="https://p0.meituan.net/dpnewvc/e4c8706c48fdac66aff949f38b599a0015251.png" alt=""></p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;概述&quot;&gt;&lt;a href=&quot;#概述&quot; class=&quot;headerlink&quot; title=&quot;概述&quot;&gt;&lt;/a&gt;概述&lt;/h3&gt;&lt;p&gt;本文主要是提供一套iOS-router的解决方案。&lt;/p&gt;
    
    </summary>
    
      <category term="shsoul" scheme="http://xgfe.github.io/categories/shsoul/"/>
    
    
      <category term="iOS" scheme="http://xgfe.github.io/tags/iOS/"/>
    
      <category term="router" scheme="http://xgfe.github.io/tags/router/"/>
    
  </entry>
  
</feed>
